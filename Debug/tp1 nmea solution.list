
tp1 nmea solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a15c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bf8  0800a2f0  0800a2f0  0001a2f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bee8  0800bee8  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bee8  0800bee8  0001bee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bef0  0800bef0  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bef0  0800bef0  0001bef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bef4  0800bef4  0001bef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0800bef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  20000230  0800c124  00020230  2**4
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  0800c124  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c07  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b2  00000000  00000000  00030e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00033718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  000345b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000285ab  00000000  00000000  00035320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a57  00000000  00000000  0005d8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecf9c  00000000  00000000  00071322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e2be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005188  00000000  00000000  0015e310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2d4 	.word	0x0800a2d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	0800a2d4 	.word	0x0800a2d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <findNearestCity>:
CITY barcelone = {"Barcelone",41.385,2.173};

CITY * cityDataBase[4]={&kiev, &cergy, &chicago, &barcelone};


CITY * findNearestCity(float latitude, float longitude){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f56:	edc7 0a00 	vstr	s1, [r7]
	float min = norme(cityDataBase[0],latitude,longitude);
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <findNearestCity+0x80>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	edd7 0a00 	vldr	s1, [r7]
 8000f62:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f832 	bl	8000fd0 <norme>
 8000f6c:	ed87 0a05 	vstr	s0, [r7, #20]
	int minPos = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
	for (int i=1;i<sizeof(cityDataBase)/sizeof(CITY *);i++){
 8000f74:	2301      	movs	r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	e01c      	b.n	8000fb4 <findNearestCity+0x68>
		float temp = norme(cityDataBase[i], latitude, longitude);
 8000f7a:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <findNearestCity+0x80>)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f82:	edd7 0a00 	vldr	s1, [r7]
 8000f86:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f820 	bl	8000fd0 <norme>
 8000f90:	ed87 0a02 	vstr	s0, [r7, #8]
		if (temp<min){
 8000f94:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f98:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa4:	d503      	bpl.n	8000fae <findNearestCity+0x62>
			min = temp;
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	617b      	str	r3, [r7, #20]
			minPos=i;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	613b      	str	r3, [r7, #16]
	for (int i=1;i<sizeof(cityDataBase)/sizeof(CITY *);i++){
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d9df      	bls.n	8000f7a <findNearestCity+0x2e>
		}
	}
	return cityDataBase[minPos];
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <findNearestCity+0x80>)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000030 	.word	0x20000030

08000fd0 <norme>:
float norme(CITY * city, float latitude, float longitude){
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fdc:	edc7 0a01 	vstr	s1, [r7, #4]
	float deltalat=pow((city->latitude - latitude),2);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	ed93 7a01 	vldr	s14, [r3, #4]
 8000fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fee:	ee17 0a90 	vmov	r0, s15
 8000ff2:	f7ff faa9 	bl	8000548 <__aeabi_f2d>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	ed9f 1b35 	vldr	d1, [pc, #212]	; 80010d0 <norme+0x100>
 8000ffe:	ec43 2b10 	vmov	d0, r2, r3
 8001002:	f007 fae5 	bl	80085d0 <pow>
 8001006:	ec53 2b10 	vmov	r2, r3, d0
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	f7ff fdcb 	bl	8000ba8 <__aeabi_d2f>
 8001012:	4603      	mov	r3, r0
 8001014:	61fb      	str	r3, [r7, #28]
	float angle = ((city->latitude + latitude)*3.14/360.0);	// so many magic numbers !
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	ed93 7a01 	vldr	s14, [r3, #4]
 800101c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001024:	ee17 0a90 	vmov	r0, s15
 8001028:	f7ff fa8e 	bl	8000548 <__aeabi_f2d>
 800102c:	a32b      	add	r3, pc, #172	; (adr r3, 80010dc <norme+0x10c>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff fae1 	bl	80005f8 <__aeabi_dmul>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <norme+0x108>)
 8001044:	f7ff fc02 	bl	800084c <__aeabi_ddiv>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f7ff fdaa 	bl	8000ba8 <__aeabi_d2f>
 8001054:	4603      	mov	r3, r0
 8001056:	61bb      	str	r3, [r7, #24]
	float deltalon = pow(((city->longitude - longitude)*cos(angle)),2);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	ed93 7a02 	vldr	s14, [r3, #8]
 800105e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	ee17 0a90 	vmov	r0, s15
 800106a:	f7ff fa6d 	bl	8000548 <__aeabi_f2d>
 800106e:	4604      	mov	r4, r0
 8001070:	460d      	mov	r5, r1
 8001072:	69b8      	ldr	r0, [r7, #24]
 8001074:	f7ff fa68 	bl	8000548 <__aeabi_f2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	ec43 2b10 	vmov	d0, r2, r3
 8001080:	f007 fa52 	bl	8008528 <cos>
 8001084:	ec53 2b10 	vmov	r2, r3, d0
 8001088:	4620      	mov	r0, r4
 800108a:	4629      	mov	r1, r5
 800108c:	f7ff fab4 	bl	80005f8 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	ec43 2b17 	vmov	d7, r2, r3
 8001098:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 80010d0 <norme+0x100>
 800109c:	eeb0 0a47 	vmov.f32	s0, s14
 80010a0:	eef0 0a67 	vmov.f32	s1, s15
 80010a4:	f007 fa94 	bl	80085d0 <pow>
 80010a8:	ec53 2b10 	vmov	r2, r3, d0
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fd7a 	bl	8000ba8 <__aeabi_d2f>
 80010b4:	4603      	mov	r3, r0
 80010b6:	617b      	str	r3, [r7, #20]
	return deltalat + deltalon;
 80010b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80010bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80010c4:	eeb0 0a67 	vmov.f32	s0, s15
 80010c8:	3720      	adds	r7, #32
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bdb0      	pop	{r4, r5, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	00000000 	.word	0x00000000
 80010d4:	40000000 	.word	0x40000000
 80010d8:	40768000 	.word	0x40768000
 80010dc:	51eb851f 	.word	0x51eb851f
 80010e0:	40091eb8 	.word	0x40091eb8

080010e4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80010ec:	1d39      	adds	r1, r7, #4
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	2201      	movs	r2, #1
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <__io_putchar+0x20>)
 80010f6:	f003 fba9 	bl	800484c <HAL_UART_Transmit>
  return ch;
 80010fa:	687b      	ldr	r3, [r7, #4]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000324 	.word	0x20000324

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110c:	f001 f8a8 	bl	8002260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001110:	f000 f80d 	bl	800112e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001114:	f000 f8fc 	bl	8001310 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001118:	f000 f8ca 	bl	80012b0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800111c:	f000 f898 	bl	8001250 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001120:	f000 f856 	bl	80011d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001124:	f000 fd62 	bl	8001bec <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 8001128:	f000 fd7a 	bl	8001c20 <loop>
 800112c:	e7fc      	b.n	8001128 <main+0x20>

0800112e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b096      	sub	sp, #88	; 0x58
 8001132:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2244      	movs	r2, #68	; 0x44
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f004 fa85 	bl	800564c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001150:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001154:	f002 f81a 	bl	800318c <HAL_PWREx_ControlVoltageScaling>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800115e:	f000 f93d 	bl	80013dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001162:	2302      	movs	r3, #2
 8001164:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116c:	2310      	movs	r3, #16
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001170:	2302      	movs	r3, #2
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001174:	2302      	movs	r3, #2
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800117c:	2314      	movs	r3, #20
 800117e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001180:	2307      	movs	r3, #7
 8001182:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001188:	2304      	movs	r3, #4
 800118a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4618      	mov	r0, r3
 8001192:	f002 f851 	bl	8003238 <HAL_RCC_OscConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800119c:	f000 f91e 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a0:	230f      	movs	r3, #15
 80011a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a4:	2303      	movs	r3, #3
 80011a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011b4:	463b      	mov	r3, r7
 80011b6:	2104      	movs	r1, #4
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fc19 	bl	80039f0 <HAL_RCC_ClockConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011c4:	f000 f90a 	bl	80013dc <Error_Handler>
  }
}
 80011c8:	bf00      	nop
 80011ca:	3758      	adds	r7, #88	; 0x58
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_I2C1_Init+0x74>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <MX_I2C1_Init+0x78>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_I2C1_Init+0x74>)
 80011dc:	4a1b      	ldr	r2, [pc, #108]	; (800124c <MX_I2C1_Init+0x7c>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_I2C1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_I2C1_Init+0x74>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_I2C1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_I2C1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_I2C1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120a:	480e      	ldr	r0, [pc, #56]	; (8001244 <MX_I2C1_Init+0x74>)
 800120c:	f001 fb96 	bl	800293c <HAL_I2C_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001216:	f000 f8e1 	bl	80013dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121a:	2100      	movs	r1, #0
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <MX_I2C1_Init+0x74>)
 800121e:	f001 ff0f 	bl	8003040 <HAL_I2CEx_ConfigAnalogFilter>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001228:	f000 f8d8 	bl	80013dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_I2C1_Init+0x74>)
 8001230:	f001 ff51 	bl	80030d6 <HAL_I2CEx_ConfigDigitalFilter>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800123a:	f000 f8cf 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000024c 	.word	0x2000024c
 8001248:	40005400 	.word	0x40005400
 800124c:	10909cec 	.word	0x10909cec

08001250 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_USART1_UART_Init+0x58>)
 8001256:	4a15      	ldr	r2, [pc, #84]	; (80012ac <MX_USART1_UART_Init+0x5c>)
 8001258:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <MX_USART1_UART_Init+0x58>)
 800125c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001260:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_USART1_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_USART1_UART_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_USART1_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_USART1_UART_Init+0x58>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <MX_USART1_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_USART1_UART_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <MX_USART1_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_USART1_UART_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_USART1_UART_Init+0x58>)
 8001294:	f003 fa8c 	bl	80047b0 <HAL_UART_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800129e:	f000 f89d 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200002a0 	.word	0x200002a0
 80012ac:	40013800 	.word	0x40013800

080012b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012b6:	4a15      	ldr	r2, [pc, #84]	; (800130c <MX_USART2_UART_Init+0x5c>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012f4:	f003 fa5c 	bl	80047b0 <HAL_UART_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012fe:	f000 f86d 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000324 	.word	0x20000324
 800130c:	40004400 	.word	0x40004400

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <MX_GPIO_Init+0xc4>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_GPIO_Init+0xc4>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <MX_GPIO_Init+0xc4>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_GPIO_Init+0xc4>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2120      	movs	r1, #32
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f001 fabd 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001398:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	480b      	ldr	r0, [pc, #44]	; (80013d8 <MX_GPIO_Init+0xc8>)
 80013aa:	f001 f905 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013ae:	2320      	movs	r3, #32
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c8:	f001 f8f6 	bl	80025b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021000 	.word	0x40021000
 80013d8:	48000800 	.word	0x48000800

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <Error_Handler+0x8>
	...

080013e8 <ssd1315_Init>:
  * @brief  Initialise the ssd1315 LCD Component.
  * @param  None
  * @retval None
  */
void ssd1315_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  if(Is_ssd1315_Initialized == 0)
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <ssd1315_Init+0x60>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d11f      	bne.n	8001434 <ssd1315_Init+0x4c>
  {
    Is_ssd1315_Initialized = 1;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <ssd1315_Init+0x60>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
    /* Initialise ssd1315 low level bus layer --------------------------------*/
    LCD_IO_Init();
 80013fa:	f000 f93d 	bl	8001678 <LCD_IO_Init>

    /* Driving ability setting */
    /* Initialisation sequence */
    LCD_IO_WriteCommand(0x80);
 80013fe:	2080      	movs	r0, #128	; 0x80
 8001400:	f000 f96e 	bl	80016e0 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x8D);  /* Disable charge pump regulator */
 8001404:	208d      	movs	r0, #141	; 0x8d
 8001406:	f000 f96b 	bl	80016e0 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x14);
 800140a:	2014      	movs	r0, #20
 800140c:	f000 f968 	bl	80016e0 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x20);  /* Set Memory Addressing Mode */
 8001410:	2020      	movs	r0, #32
 8001412:	f000 f965 	bl	80016e0 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x00);  /* 00b: Horizontal Addressing Mode */
 8001416:	2000      	movs	r0, #0
 8001418:	f000 f962 	bl	80016e0 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x40);  /* 00b: Horizontal Addressing Mode */
 800141c:	2040      	movs	r0, #64	; 0x40
 800141e:	f000 f95f 	bl	80016e0 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0xC8);  /* c8:flip the 64 rows */
 8001422:	20c8      	movs	r0, #200	; 0xc8
 8001424:	f000 f95c 	bl	80016e0 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0xA1);  /* a1:flip the 128 columns */
 8001428:	20a1      	movs	r0, #161	; 0xa1
 800142a:	f000 f959 	bl	80016e0 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0xAF);  /* Display On */
 800142e:	20af      	movs	r0, #175	; 0xaf
 8001430:	f000 f956 	bl	80016e0 <LCD_IO_WriteCommand>
  }

  ssd1315_Clear(SSD1315_COLOR_BLACK);
 8001434:	2000      	movs	r0, #0
 8001436:	f000 f80b 	bl	8001450 <ssd1315_Clear>

  LCD_IO_WriteMultipleData((uint8_t*)PhysFrameBuffer, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800143a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <ssd1315_Init+0x64>)
 8001440:	f000 f96c 	bl	800171c <LCD_IO_WriteMultipleData>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200003a8 	.word	0x200003a8
 800144c:	200003b0 	.word	0x200003b0

08001450 <ssd1315_Clear>:
  * @brief  Clear Display screen.
  * @param  ColorCode: the color use to clear the screen (SSD1315_COLOR_WHITE or SSD1315_COLOR_BLACK)
  * @retval None
  */
void ssd1315_Clear(uint16_t ColorCode)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
  /* Check color */
  if (ColorCode == SSD1315_COLOR_WHITE) 
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	2bff      	cmp	r3, #255	; 0xff
 800145e:	d106      	bne.n	800146e <ssd1315_Clear+0x1e>
  {
    memset(PhysFrameBuffer, 0xFF, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 8001460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001464:	21ff      	movs	r1, #255	; 0xff
 8001466:	4807      	ldr	r0, [pc, #28]	; (8001484 <ssd1315_Clear+0x34>)
 8001468:	f004 f8f0 	bl	800564c <memset>
  }
  else
  {
    memset(PhysFrameBuffer, 0x00, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
  }
}
 800146c:	e005      	b.n	800147a <ssd1315_Clear+0x2a>
    memset(PhysFrameBuffer, 0x00, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800146e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001472:	2100      	movs	r1, #0
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <ssd1315_Clear+0x34>)
 8001476:	f004 f8e9 	bl	800564c <memset>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200003b0 	.word	0x200003b0

08001488 <ssd1315_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  ColorCode: the pixel color (SSD1315_COLOR_WHITE or SSD1315_COLOR_BLACK)
  * @retval None
  */
void ssd1315_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t ColorCode)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
 8001492:	460b      	mov	r3, r1
 8001494:	80bb      	strh	r3, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	807b      	strh	r3, [r7, #2]
  /* Set color */
  if (ColorCode == SSD1315_COLOR_WHITE) {
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	2bff      	cmp	r3, #255	; 0xff
 800149e:	d11a      	bne.n	80014d6 <ssd1315_WritePixel+0x4e>
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] |= 1 << (Ypos % 8);
 80014a0:	88fa      	ldrh	r2, [r7, #6]
 80014a2:	88bb      	ldrh	r3, [r7, #4]
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	b298      	uxth	r0, r3
 80014a8:	4603      	mov	r3, r0
 80014aa:	01db      	lsls	r3, r3, #7
 80014ac:	4413      	add	r3, r2
 80014ae:	4a1b      	ldr	r2, [pc, #108]	; (800151c <ssd1315_WritePixel+0x94>)
 80014b0:	5cd3      	ldrb	r3, [r2, r3]
 80014b2:	b25a      	sxtb	r2, r3
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	2101      	movs	r1, #1
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b259      	sxtb	r1, r3
 80014c6:	88fa      	ldrh	r2, [r7, #6]
 80014c8:	4603      	mov	r3, r0
 80014ca:	01db      	lsls	r3, r3, #7
 80014cc:	4413      	add	r3, r2
 80014ce:	b2c9      	uxtb	r1, r1
 80014d0:	4a12      	ldr	r2, [pc, #72]	; (800151c <ssd1315_WritePixel+0x94>)
 80014d2:	54d1      	strb	r1, [r2, r3]
  } else {
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] &= ~(1 << (Ypos % 8));
  }
}
 80014d4:	e01b      	b.n	800150e <ssd1315_WritePixel+0x86>
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] &= ~(1 << (Ypos % 8));
 80014d6:	88fa      	ldrh	r2, [r7, #6]
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	08db      	lsrs	r3, r3, #3
 80014dc:	b298      	uxth	r0, r3
 80014de:	4603      	mov	r3, r0
 80014e0:	01db      	lsls	r3, r3, #7
 80014e2:	4413      	add	r3, r2
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <ssd1315_WritePixel+0x94>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	b25a      	sxtb	r2, r3
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	4013      	ands	r3, r2
 80014fe:	b259      	sxtb	r1, r3
 8001500:	88fa      	ldrh	r2, [r7, #6]
 8001502:	4603      	mov	r3, r0
 8001504:	01db      	lsls	r3, r3, #7
 8001506:	4413      	add	r3, r2
 8001508:	b2c9      	uxtb	r1, r1
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <ssd1315_WritePixel+0x94>)
 800150c:	54d1      	strb	r1, [r2, r3]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	200003b0 	.word	0x200003b0

08001520 <ssd1315_Refresh>:
  * @brief  Refresh Displays.
  * @param  None
  * @retval None
  */
void ssd1315_Refresh(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Set Display Start Line to 0*/
  LCD_IO_WriteCommand(0x40);
 8001524:	2040      	movs	r0, #64	; 0x40
 8001526:	f000 f8db 	bl	80016e0 <LCD_IO_WriteCommand>
  /* Set Column Address Setup column start(0) and end address (127)*/
  LCD_IO_WriteCommand(0x21);
 800152a:	2021      	movs	r0, #33	; 0x21
 800152c:	f000 f8d8 	bl	80016e0 <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x00);
 8001530:	2000      	movs	r0, #0
 8001532:	f000 f8d5 	bl	80016e0 <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x7F);
 8001536:	207f      	movs	r0, #127	; 0x7f
 8001538:	f000 f8d2 	bl	80016e0 <LCD_IO_WriteCommand>
  /* Set Page Address Setup page start (0)  and end address (7)*/
  LCD_IO_WriteCommand(0x22);
 800153c:	2022      	movs	r0, #34	; 0x22
 800153e:	f000 f8cf 	bl	80016e0 <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x00);
 8001542:	2000      	movs	r0, #0
 8001544:	f000 f8cc 	bl	80016e0 <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x07);
 8001548:	2007      	movs	r0, #7
 800154a:	f000 f8c9 	bl	80016e0 <LCD_IO_WriteCommand>
  /* Fill Buffer in GDDRAM of LCD */
  LCD_IO_WriteMultipleData(PhysFrameBuffer, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800154e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001552:	4802      	ldr	r0, [pc, #8]	; (800155c <ssd1315_Refresh+0x3c>)
 8001554:	f000 f8e2 	bl	800171c <LCD_IO_WriteMultipleData>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200003b0 	.word	0x200003b0

08001560 <ssd1315_DrawChar>:

/**
* @}
*/
void ssd1315_DrawChar(uint8_t X, uint8_t Y, char c, FontDef_t * font){
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	460b      	mov	r3, r1
 800156e:	71bb      	strb	r3, [r7, #6]
 8001570:	4613      	mov	r3, r2
 8001572:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<font->FontHeight;i++){
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	e047      	b.n	800160a <ssd1315_DrawChar+0xaa>
		uint16_t line = (font->data)[((c-32)*font->FontHeight)+i];
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	797b      	ldrb	r3, [r7, #5]
 8001580:	3b20      	subs	r3, #32
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	7849      	ldrb	r1, [r1, #1]
 8001586:	fb03 f101 	mul.w	r1, r3, r1
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	440b      	add	r3, r1
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	81fb      	strh	r3, [r7, #14]
		for (int j=0;j<font->FontWidth;j++){
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	e02d      	b.n	80015f8 <ssd1315_DrawChar+0x98>
			if (((line>>(15-j))&1)==1)
 800159c:	89fa      	ldrh	r2, [r7, #14]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	f1c3 030f 	rsb	r3, r3, #15
 80015a4:	fa42 f303 	asr.w	r3, r2, r3
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d010      	beq.n	80015d2 <ssd1315_DrawChar+0x72>
				ssd1315_WritePixel(X+j,Y+i,SSD1315_COLOR_WHITE);
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	b298      	uxth	r0, r3
 80015bc:	79bb      	ldrb	r3, [r7, #6]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	22ff      	movs	r2, #255	; 0xff
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff ff5c 	bl	8001488 <ssd1315_WritePixel>
 80015d0:	e00f      	b.n	80015f2 <ssd1315_DrawChar+0x92>
			else{ssd1315_WritePixel(X+j,Y+i,SSD1315_COLOR_BLACK);}
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4413      	add	r3, r2
 80015dc:	b298      	uxth	r0, r3
 80015de:	79bb      	ldrb	r3, [r7, #6]
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff ff4b 	bl	8001488 <ssd1315_WritePixel>
		for (int j=0;j<font->FontWidth;j++){
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	3301      	adds	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4293      	cmp	r3, r2
 8001602:	dbcb      	blt.n	800159c <ssd1315_DrawChar+0x3c>
	for(int i=0;i<font->FontHeight;i++){
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	461a      	mov	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	4293      	cmp	r3, r2
 8001614:	dbb1      	blt.n	800157a <ssd1315_DrawChar+0x1a>
		}
	}
}
 8001616:	bf00      	nop
 8001618:	bf00      	nop
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <ssd1315_DrawString>:

void ssd1315_DrawString(uint8_t X, uint8_t Y, char * s, FontDef_t * font){
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60ba      	str	r2, [r7, #8]
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4603      	mov	r3, r0
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	460b      	mov	r3, r1
 8001630:	73bb      	strb	r3, [r7, #14]
	int column=0;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
	while (*s!='\0'){
 8001636:	e015      	b.n	8001664 <ssd1315_DrawString+0x44>
		ssd1315_DrawChar(X+(column*font->FontWidth),Y,*s,font);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	fb12 f303 	smulbb	r3, r2, r3
 8001644:	b2da      	uxtb	r2, r3
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	4413      	add	r3, r2
 800164a:	b2d8      	uxtb	r0, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	7bb9      	ldrb	r1, [r7, #14]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f7ff ff84 	bl	8001560 <ssd1315_DrawChar>
		s++;
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	3301      	adds	r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
		column++;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
	while (*s!='\0'){
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1e5      	bne.n	8001638 <ssd1315_DrawString+0x18>
	}
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <LCD_IO_Init>:

extern I2C_HandleTypeDef hi2c1;

int ssd1315_i2c_adress;

void LCD_IO_Init(){
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af02      	add	r7, sp, #8
	int status;
	HAL_I2C_Init(&hi2c1);
 800167e:	4814      	ldr	r0, [pc, #80]	; (80016d0 <LCD_IO_Init+0x58>)
 8001680:	f001 f95c 	bl	800293c <HAL_I2C_Init>
		for (int i=0;i<255;i++){
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	e018      	b.n	80016bc <LCD_IO_Init+0x44>
			status=HAL_I2C_Master_Transmit(&hi2c1,i,NULL,0,10);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	b299      	uxth	r1, r3
 800168e:	230a      	movs	r3, #10
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2300      	movs	r3, #0
 8001694:	2200      	movs	r2, #0
 8001696:	480e      	ldr	r0, [pc, #56]	; (80016d0 <LCD_IO_Init+0x58>)
 8001698:	f001 f9e0 	bl	8002a5c <HAL_I2C_Master_Transmit>
 800169c:	4603      	mov	r3, r0
 800169e:	603b      	str	r3, [r7, #0]
			if(status==HAL_OK){
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d107      	bne.n	80016b6 <LCD_IO_Init+0x3e>
				printf("Found one display at 0x%x\r\n",i);
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	480a      	ldr	r0, [pc, #40]	; (80016d4 <LCD_IO_Init+0x5c>)
 80016aa:	f004 fc41 	bl	8005f30 <iprintf>
				ssd1315_i2c_adress=i;
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <LCD_IO_Init+0x60>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6013      	str	r3, [r2, #0]
				return;
 80016b4:	e008      	b.n	80016c8 <LCD_IO_Init+0x50>
		for (int i=0;i<255;i++){
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3301      	adds	r3, #1
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2bfe      	cmp	r3, #254	; 0xfe
 80016c0:	dde3      	ble.n	800168a <LCD_IO_Init+0x12>
			}
		}
	printf("Found no LCD in I2C bus \r\n");
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <LCD_IO_Init+0x64>)
 80016c4:	f004 fcba 	bl	800603c <puts>
}
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000024c 	.word	0x2000024c
 80016d4:	0800a314 	.word	0x0800a314
 80016d8:	200007b0 	.word	0x200007b0
 80016dc:	0800a330 	.word	0x0800a330

080016e0 <LCD_IO_WriteCommand>:
void LCD_IO_WriteCommand(uint8_t Value){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
	uint8_t command_buffer[2]={0x80,0};
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	81bb      	strh	r3, [r7, #12]
	command_buffer[1]=Value;
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,ssd1315_i2c_adress,command_buffer,2,-1);
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <LCD_IO_WriteCommand+0x34>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	b299      	uxth	r1, r3
 80016f8:	f107 020c 	add.w	r2, r7, #12
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2302      	movs	r3, #2
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <LCD_IO_WriteCommand+0x38>)
 8001706:	f001 f9a9 	bl	8002a5c <HAL_I2C_Master_Transmit>
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200007b0 	.word	0x200007b0
 8001718:	2000024c 	.word	0x2000024c

0800171c <LCD_IO_WriteMultipleData>:
void    LCD_IO_WriteData(uint8_t Value){
	uint8_t data_buffer[2]={0xc0,0};
	data_buffer[1]=Value;
	HAL_I2C_Master_Transmit(&hi2c1,ssd1315_i2c_adress,data_buffer,2,-1);
}
void    LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size){
 800171c:	b580      	push	{r7, lr}
 800171e:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8001722:	af02      	add	r7, sp, #8
 8001724:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001728:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800172c:	6018      	str	r0, [r3, #0]
 800172e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001732:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001736:	6019      	str	r1, [r3, #0]
	uint8_t data_buffer[1025];
	data_buffer[0]=0x40;
 8001738:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800173c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001740:	2240      	movs	r2, #64	; 0x40
 8001742:	701a      	strb	r2, [r3, #0]
	memcpy(data_buffer+1,pData,Size+1);
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	3301      	adds	r3, #1
 800174a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800174e:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	3201      	adds	r2, #1
 8001756:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800175a:	f2a1 410c 	subw	r1, r1, #1036	; 0x40c
 800175e:	6809      	ldr	r1, [r1, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f003 ff65 	bl	8005630 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c1,ssd1315_i2c_adress,data_buffer,Size+1,-1);
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <LCD_IO_WriteMultipleData+0x7c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	b299      	uxth	r1, r3
 800176c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001770:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	3301      	adds	r3, #1
 800177a:	b29b      	uxth	r3, r3
 800177c:	f107 020c 	add.w	r2, r7, #12
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	9000      	str	r0, [sp, #0]
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <LCD_IO_WriteMultipleData+0x80>)
 8001788:	f001 f968 	bl	8002a5c <HAL_I2C_Master_Transmit>

}
 800178c:	bf00      	nop
 800178e:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200007b0 	.word	0x200007b0
 800179c:	2000024c 	.word	0x2000024c

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_MspInit+0x44>)
 80017a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_MspInit+0x44>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6613      	str	r3, [r2, #96]	; 0x60
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_MspInit+0x44>)
 80017b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_MspInit+0x44>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <HAL_MspInit+0x44>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_MspInit+0x44>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0ac      	sub	sp, #176	; 0xb0
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2288      	movs	r2, #136	; 0x88
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f003 ff1f 	bl	800564c <memset>
  if(hi2c->Instance==I2C1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a21      	ldr	r2, [pc, #132]	; (8001898 <HAL_I2C_MspInit+0xb0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d13b      	bne.n	8001890 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001818:	2340      	movs	r3, #64	; 0x40
 800181a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800181c:	2300      	movs	r3, #0
 800181e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4618      	mov	r0, r3
 8001826:	f002 fb07 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001830:	f7ff fdd4 	bl	80013dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_I2C_MspInit+0xb4>)
 8001836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001838:	4a18      	ldr	r2, [pc, #96]	; (800189c <HAL_I2C_MspInit+0xb4>)
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_I2C_MspInit+0xb4>)
 8001842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800184c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001854:	2312      	movs	r3, #18
 8001856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001866:	2304      	movs	r3, #4
 8001868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001870:	4619      	mov	r1, r3
 8001872:	480b      	ldr	r0, [pc, #44]	; (80018a0 <HAL_I2C_MspInit+0xb8>)
 8001874:	f000 fea0 	bl	80025b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_I2C_MspInit+0xb4>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_I2C_MspInit+0xb4>)
 800187e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001882:	6593      	str	r3, [r2, #88]	; 0x58
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_I2C_MspInit+0xb4>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	37b0      	adds	r7, #176	; 0xb0
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40005400 	.word	0x40005400
 800189c:	40021000 	.word	0x40021000
 80018a0:	48000400 	.word	0x48000400

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0ae      	sub	sp, #184	; 0xb8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	2288      	movs	r2, #136	; 0x88
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 fec1 	bl	800564c <memset>
  if(huart->Instance==USART1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a43      	ldr	r2, [pc, #268]	; (80019dc <HAL_UART_MspInit+0x138>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d13d      	bne.n	8001950 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018d8:	2300      	movs	r3, #0
 80018da:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 faa9 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018ec:	f7ff fd76 	bl	80013dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f0:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <HAL_UART_MspInit+0x13c>)
 80018f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f4:	4a3a      	ldr	r2, [pc, #232]	; (80019e0 <HAL_UART_MspInit+0x13c>)
 80018f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fa:	6613      	str	r3, [r2, #96]	; 0x60
 80018fc:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <HAL_UART_MspInit+0x13c>)
 80018fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <HAL_UART_MspInit+0x13c>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190c:	4a34      	ldr	r2, [pc, #208]	; (80019e0 <HAL_UART_MspInit+0x13c>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001914:	4b32      	ldr	r3, [pc, #200]	; (80019e0 <HAL_UART_MspInit+0x13c>)
 8001916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001920:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001924:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800193a:	2307      	movs	r3, #7
 800193c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001944:	4619      	mov	r1, r3
 8001946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194a:	f000 fe35 	bl	80025b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800194e:	e040      	b.n	80019d2 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a23      	ldr	r2, [pc, #140]	; (80019e4 <HAL_UART_MspInit+0x140>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d13b      	bne.n	80019d2 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800195a:	2302      	movs	r3, #2
 800195c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800195e:	2300      	movs	r3, #0
 8001960:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4618      	mov	r0, r3
 8001968:	f002 fa66 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001972:	f7ff fd33 	bl	80013dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <HAL_UART_MspInit+0x13c>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <HAL_UART_MspInit+0x13c>)
 800197c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001980:	6593      	str	r3, [r2, #88]	; 0x58
 8001982:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_UART_MspInit+0x13c>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <HAL_UART_MspInit+0x13c>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <HAL_UART_MspInit+0x13c>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_UART_MspInit+0x13c>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019a6:	230c      	movs	r3, #12
 80019a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019be:	2307      	movs	r3, #7
 80019c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ce:	f000 fdf3 	bl	80025b8 <HAL_GPIO_Init>
}
 80019d2:	bf00      	nop
 80019d4:	37b8      	adds	r7, #184	; 0xb8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40013800 	.word	0x40013800
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40004400 	.word	0x40004400

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 fc70 	bl	8002318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return 1;
 8001a40:	2301      	movs	r3, #1
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_kill>:

int _kill(int pid, int sig)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a56:	f003 fdc1 	bl	80055dc <__errno>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2216      	movs	r2, #22
 8001a5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_exit>:

void _exit (int status)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ffe7 	bl	8001a4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a7e:	e7fe      	b.n	8001a7e <_exit+0x12>

08001a80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	e00a      	b.n	8001aa8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a92:	f3af 8000 	nop.w
 8001a96:	4601      	mov	r1, r0
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	60ba      	str	r2, [r7, #8]
 8001a9e:	b2ca      	uxtb	r2, r1
 8001aa0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	dbf0      	blt.n	8001a92 <_read+0x12>
  }

  return len;
 8001ab0:	687b      	ldr	r3, [r7, #4]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e009      	b.n	8001ae0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	60ba      	str	r2, [r7, #8]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fb05 	bl	80010e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	dbf1      	blt.n	8001acc <_write+0x12>
  }
  return len;
 8001ae8:	687b      	ldr	r3, [r7, #4]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_close>:

int _close(int file)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_isatty>:

int _isatty(int file)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b64:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <_sbrk+0x5c>)
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <_sbrk+0x60>)
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d102      	bne.n	8001b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <_sbrk+0x64>)
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <_sbrk+0x68>)
 8001b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d207      	bcs.n	8001b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b8c:	f003 fd26 	bl	80055dc <__errno>
 8001b90:	4603      	mov	r3, r0
 8001b92:	220c      	movs	r2, #12
 8001b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9a:	e009      	b.n	8001bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <_sbrk+0x64>)
 8001bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bae:	68fb      	ldr	r3, [r7, #12]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20018000 	.word	0x20018000
 8001bbc:	00000400 	.word	0x00000400
 8001bc0:	200007b4 	.word	0x200007b4
 8001bc4:	200008d0 	.word	0x200008d0

08001bc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <SystemInit+0x20>)
 8001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <SystemInit+0x20>)
 8001bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <setup>:

void ssd1315_DrawChar(uint8_t X, uint8_t Y, char c, FontDef_t * font);
void ssd1315_DrawString(uint8_t X, uint8_t Y, char * s, FontDef_t * font);


void setup(){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	printf ("TP1 ENSEA by A.T. \r\n");
 8001bf0:	4808      	ldr	r0, [pc, #32]	; (8001c14 <setup+0x28>)
 8001bf2:	f004 fa23 	bl	800603c <puts>
	ssd1315_Init();
 8001bf6:	f7ff fbf7 	bl	80013e8 <ssd1315_Init>
	ssd1315_Clear(SSD1315_COLOR_BLACK);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff fc28 	bl	8001450 <ssd1315_Clear>
	ssd1315_DrawString(0,0,"NMEA @ v2.0",&Font_11x18);
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <setup+0x2c>)
 8001c02:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <setup+0x30>)
 8001c04:	2100      	movs	r1, #0
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff fd0a 	bl	8001620 <ssd1315_DrawString>
	ssd1315_Refresh();
 8001c0c:	f7ff fc88 	bl	8001520 <ssd1315_Refresh>
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	0800a34c 	.word	0x0800a34c
 8001c18:	20000048 	.word	0x20000048
 8001c1c:	0800a360 	.word	0x0800a360

08001c20 <loop>:

char buffer[BUFFER_SIZE];

void loop(){
 8001c20:	b5b0      	push	{r4, r5, r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af02      	add	r7, sp, #8
	int size = fillBuffer(buffer);
 8001c26:	4846      	ldr	r0, [pc, #280]	; (8001d40 <loop+0x120>)
 8001c28:	f000 f8a0 	bl	8001d6c <fillBuffer>
 8001c2c:	61f8      	str	r0, [r7, #28]
//	printf("Just received %d bytes \r\n",size);
	if (isGPGGA(buffer)==1 && (calculateChecksum(buffer)==extractChecksum(buffer)) ){
 8001c2e:	4844      	ldr	r0, [pc, #272]	; (8001d40 <loop+0x120>)
 8001c30:	f000 fac6 	bl	80021c0 <isGPGGA>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d178      	bne.n	8001d2c <loop+0x10c>
 8001c3a:	4841      	ldr	r0, [pc, #260]	; (8001d40 <loop+0x120>)
 8001c3c:	f000 f8f7 	bl	8001e2e <calculateChecksum>
 8001c40:	4604      	mov	r4, r0
 8001c42:	483f      	ldr	r0, [pc, #252]	; (8001d40 <loop+0x120>)
 8001c44:	f000 f8d6 	bl	8001df4 <extractChecksum>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	429c      	cmp	r4, r3
 8001c4c:	d16e      	bne.n	8001d2c <loop+0x10c>
		float latitude = getLattitude(buffer);
 8001c4e:	483c      	ldr	r0, [pc, #240]	; (8001d40 <loop+0x120>)
 8001c50:	f000 f90c 	bl	8001e6c <getLattitude>
 8001c54:	ed87 0a06 	vstr	s0, [r7, #24]
		float longitude = getLongitude(buffer);
 8001c58:	4839      	ldr	r0, [pc, #228]	; (8001d40 <loop+0x120>)
 8001c5a:	f000 f9d7 	bl	800200c <getLongitude>
 8001c5e:	ed87 0a05 	vstr	s0, [r7, #20]
		printf("Trame OK %d b\tLattitude : %f \tLongitude : %f\r\n",size,latitude,longitude);
 8001c62:	69b8      	ldr	r0, [r7, #24]
 8001c64:	f7fe fc70 	bl	8000548 <__aeabi_f2d>
 8001c68:	4604      	mov	r4, r0
 8001c6a:	460d      	mov	r5, r1
 8001c6c:	6978      	ldr	r0, [r7, #20]
 8001c6e:	f7fe fc6b 	bl	8000548 <__aeabi_f2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	e9cd 2300 	strd	r2, r3, [sp]
 8001c7a:	4622      	mov	r2, r4
 8001c7c:	462b      	mov	r3, r5
 8001c7e:	69f9      	ldr	r1, [r7, #28]
 8001c80:	4830      	ldr	r0, [pc, #192]	; (8001d44 <loop+0x124>)
 8001c82:	f004 f955 	bl	8005f30 <iprintf>

		CITY * found = findNearestCity(latitude,longitude);
 8001c86:	edd7 0a05 	vldr	s1, [r7, #20]
 8001c8a:	ed97 0a06 	vldr	s0, [r7, #24]
 8001c8e:	f7ff f95d 	bl	8000f4c <findNearestCity>
 8001c92:	6138      	str	r0, [r7, #16]

		printf("City of %s\r\n",found->name);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	482b      	ldr	r0, [pc, #172]	; (8001d48 <loop+0x128>)
 8001c9c:	f004 f948 	bl	8005f30 <iprintf>

		char stringBuf[16];
		ssd1315_Clear(SSD1315_COLOR_BLACK);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff fbd5 	bl	8001450 <ssd1315_Clear>
		ssd1315_DrawString(0,0,"NMEA @ v2.0",&Font_11x18);
 8001ca6:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <loop+0x12c>)
 8001ca8:	4a29      	ldr	r2, [pc, #164]	; (8001d50 <loop+0x130>)
 8001caa:	2100      	movs	r1, #0
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff fcb7 	bl	8001620 <ssd1315_DrawString>
		sprintf(stringBuf,"Lat = %3.2f",latitude);
 8001cb2:	69b8      	ldr	r0, [r7, #24]
 8001cb4:	f7fe fc48 	bl	8000548 <__aeabi_f2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4638      	mov	r0, r7
 8001cbe:	4925      	ldr	r1, [pc, #148]	; (8001d54 <loop+0x134>)
 8001cc0:	f004 f9c4 	bl	800604c <siprintf>
		ssd1315_DrawString(0,19,stringBuf,&Font_7x10);
 8001cc4:	463a      	mov	r2, r7
 8001cc6:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <loop+0x138>)
 8001cc8:	2113      	movs	r1, #19
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7ff fca8 	bl	8001620 <ssd1315_DrawString>
		sprintf(stringBuf,"Lon = %3.2f",longitude);
 8001cd0:	6978      	ldr	r0, [r7, #20]
 8001cd2:	f7fe fc39 	bl	8000548 <__aeabi_f2d>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4638      	mov	r0, r7
 8001cdc:	491f      	ldr	r1, [pc, #124]	; (8001d5c <loop+0x13c>)
 8001cde:	f004 f9b5 	bl	800604c <siprintf>
		ssd1315_DrawString(0,29,stringBuf,&Font_7x10);
 8001ce2:	463a      	mov	r2, r7
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <loop+0x138>)
 8001ce6:	211d      	movs	r1, #29
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f7ff fc99 	bl	8001620 <ssd1315_DrawString>
		ssd1315_Refresh();
 8001cee:	f7ff fc17 	bl	8001520 <ssd1315_Refresh>
		sprintf(stringBuf,"Welcome in");
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	491a      	ldr	r1, [pc, #104]	; (8001d60 <loop+0x140>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 f9a8 	bl	800604c <siprintf>
		ssd1315_DrawString(0,39,stringBuf,&Font_7x10);
 8001cfc:	463a      	mov	r2, r7
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <loop+0x138>)
 8001d00:	2127      	movs	r1, #39	; 0x27
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7ff fc8c 	bl	8001620 <ssd1315_DrawString>
		ssd1315_Refresh();
 8001d08:	f7ff fc0a 	bl	8001520 <ssd1315_Refresh>
		sprintf(stringBuf,"%s",found->name);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	463b      	mov	r3, r7
 8001d12:	4914      	ldr	r1, [pc, #80]	; (8001d64 <loop+0x144>)
 8001d14:	4618      	mov	r0, r3
 8001d16:	f004 f999 	bl	800604c <siprintf>
		ssd1315_DrawString(0,49,stringBuf,&Font_7x10);
 8001d1a:	463a      	mov	r2, r7
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <loop+0x138>)
 8001d1e:	2131      	movs	r1, #49	; 0x31
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7ff fc7d 	bl	8001620 <ssd1315_DrawString>
		ssd1315_Refresh();
 8001d26:	f7ff fbfb 	bl	8001520 <ssd1315_Refresh>
	if (isGPGGA(buffer)==1 && (calculateChecksum(buffer)==extractChecksum(buffer)) ){
 8001d2a:	e004      	b.n	8001d36 <loop+0x116>
	}
	else{
		printf("Trame NOK : %s\r\n",buffer);
 8001d2c:	4904      	ldr	r1, [pc, #16]	; (8001d40 <loop+0x120>)
 8001d2e:	480e      	ldr	r0, [pc, #56]	; (8001d68 <loop+0x148>)
 8001d30:	f004 f8fe 	bl	8005f30 <iprintf>
	}

}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3720      	adds	r7, #32
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200007b8 	.word	0x200007b8
 8001d44:	0800a36c 	.word	0x0800a36c
 8001d48:	0800a39c 	.word	0x0800a39c
 8001d4c:	20000048 	.word	0x20000048
 8001d50:	0800a360 	.word	0x0800a360
 8001d54:	0800a3ac 	.word	0x0800a3ac
 8001d58:	20000040 	.word	0x20000040
 8001d5c:	0800a3b8 	.word	0x0800a3b8
 8001d60:	0800a3c4 	.word	0x0800a3c4
 8001d64:	0800a3d0 	.word	0x0800a3d0
 8001d68:	0800a3d4 	.word	0x0800a3d4

08001d6c <fillBuffer>:
#include "main.h"
#include "utils.h"
#include "tp1.h"
#include <string.h>

int fillBuffer(char * buffer){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	char received_char;
	int total=0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
	for (int i=0;i<BUFFER_SIZE;i++){
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e007      	b.n	8001d8e <fillBuffer+0x22>
		buffer[i]=0;
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<BUFFER_SIZE;i++){
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2bff      	cmp	r3, #255	; 0xff
 8001d92:	ddf4      	ble.n	8001d7e <fillBuffer+0x12>
	}
	do{
		HAL_UART_Receive(&huart1, (uint8_t *)&received_char, 1, -1);
 8001d94:	f107 010f 	add.w	r1, r7, #15
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4814      	ldr	r0, [pc, #80]	; (8001df0 <fillBuffer+0x84>)
 8001da0:	f002 fde8 	bl	8004974 <HAL_UART_Receive>
	}while(received_char!='$');
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b24      	cmp	r3, #36	; 0x24
 8001da8:	d1f4      	bne.n	8001d94 <fillBuffer+0x28>

	HAL_UART_Abort(&huart1);
 8001daa:	4811      	ldr	r0, [pc, #68]	; (8001df0 <fillBuffer+0x84>)
 8001dac:	f002 feb3 	bl	8004b16 <HAL_UART_Abort>

	*buffer='$';
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2224      	movs	r2, #36	; 0x24
 8001db4:	701a      	strb	r2, [r3, #0]
	buffer++;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3301      	adds	r3, #1
 8001dba:	607b      	str	r3, [r7, #4]
//	printf("$\n");
	do{
		HAL_UART_Receive(&huart1, (uint8_t *)&received_char, 1, -1);
 8001dbc:	f107 010f 	add.w	r1, r7, #15
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	480a      	ldr	r0, [pc, #40]	; (8001df0 <fillBuffer+0x84>)
 8001dc8:	f002 fdd4 	bl	8004974 <HAL_UART_Receive>
//		HAL_UART_Transmit(&huart2,(uint8_t *)&received_char, 1, 1);
		*buffer=received_char;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	701a      	strb	r2, [r3, #0]
		buffer++;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	607b      	str	r3, [r7, #4]
		total++;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
	}while(received_char!='\n');
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	2b0a      	cmp	r3, #10
 8001de2:	d1eb      	bne.n	8001dbc <fillBuffer+0x50>

	return total;
 8001de4:	697b      	ldr	r3, [r7, #20]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200002a0 	.word	0x200002a0

08001df4 <extractChecksum>:

int extractChecksum(char * frame){
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	while(*frame!='*'){
 8001dfc:	e002      	b.n	8001e04 <extractChecksum+0x10>
		frame++;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3301      	adds	r3, #1
 8001e02:	607b      	str	r3, [r7, #4]
	while(*frame!='*'){
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b2a      	cmp	r3, #42	; 0x2a
 8001e0a:	d1f8      	bne.n	8001dfe <extractChecksum+0xa>
	}
	return ((frame[1]&0xf)<<4)+(frame[2]&0xf);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3302      	adds	r3, #2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	4413      	add	r3, r2
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <calculateChecksum>:

int calculateChecksum(char * frame){
 8001e2e:	b480      	push	{r7}
 8001e30:	b085      	sub	sp, #20
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
	int checksum=0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
	frame++;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	607b      	str	r3, [r7, #4]
	while(*frame!='*'){
 8001e40:	e008      	b.n	8001e54 <calculateChecksum+0x26>
		checksum^=*frame;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4053      	eors	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
		frame++;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3301      	adds	r3, #1
 8001e52:	607b      	str	r3, [r7, #4]
	while(*frame!='*'){
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b2a      	cmp	r3, #42	; 0x2a
 8001e5a:	d1f2      	bne.n	8001e42 <calculateChecksum+0x14>
	}
	return checksum;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <getLattitude>:

float getLattitude(char * frame){
 8001e6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e70:	b088      	sub	sp, #32
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
	float lattitude;
	for (int i=0;i<2;i++){
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	e00c      	b.n	8001e96 <getLattitude+0x2a>
		while(*frame!=','){
			frame++;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	607b      	str	r3, [r7, #4]
		while(*frame!=','){
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b2c      	cmp	r3, #44	; 0x2c
 8001e88:	d1f8      	bne.n	8001e7c <getLattitude+0x10>
		}
		frame++;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
	for (int i=0;i<2;i++){
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	3301      	adds	r3, #1
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	ddf2      	ble.n	8001e82 <getLattitude+0x16>
	}

	float signe = (frame[9]=='N')?+1:-1;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3309      	adds	r3, #9
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b4e      	cmp	r3, #78	; 0x4e
 8001ea4:	d102      	bne.n	8001eac <getLattitude+0x40>
 8001ea6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001eaa:	e000      	b.n	8001eae <getLattitude+0x42>
 8001eac:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <getLattitude+0x18c>)
 8001eae:	61bb      	str	r3, [r7, #24]
	float degre = 10*(frame[0]&0xf)+(frame[1]&0xf);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	f003 020f 	and.w	r2, r3, #15
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	4413      	add	r3, r2
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed6:	edc7 7a05 	vstr	s15, [r7, #20]
	float minute = 10*(frame[2]&0xf)+(frame[3]&0xf);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3302      	adds	r3, #2
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	f003 020f 	and.w	r2, r3, #15
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	461a      	mov	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3303      	adds	r3, #3
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	4413      	add	r3, r2
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f02:	edc7 7a04 	vstr	s15, [r7, #16]
	float minute_decimal = 100.0*(frame[5]&0xf)+10.0*(frame[6]&0xf)+(frame[7]&0x0f);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3305      	adds	r3, #5
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fb07 	bl	8000524 <__aeabi_i2d>
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <getLattitude+0x190>)
 8001f1c:	f7fe fb6c 	bl	80005f8 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4614      	mov	r4, r2
 8001f26:	461d      	mov	r5, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3306      	adds	r3, #6
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe faf6 	bl	8000524 <__aeabi_i2d>
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	4b30      	ldr	r3, [pc, #192]	; (8002000 <getLattitude+0x194>)
 8001f3e:	f7fe fb5b 	bl	80005f8 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4620      	mov	r0, r4
 8001f48:	4629      	mov	r1, r5
 8001f4a:	f7fe f99f 	bl	800028c <__adddf3>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4614      	mov	r4, r2
 8001f54:	461d      	mov	r5, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3307      	adds	r3, #7
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fadf 	bl	8000524 <__aeabi_i2d>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	f7fe f98d 	bl	800028c <__adddf3>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7fe fe15 	bl	8000ba8 <__aeabi_d2f>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	60fb      	str	r3, [r7, #12]
	lattitude = signe*(degre+(((float) minute)+(float)(minute_decimal/1000.0))/60.0);
 8001f82:	69b8      	ldr	r0, [r7, #24]
 8001f84:	f7fe fae0 	bl	8000548 <__aeabi_f2d>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	460d      	mov	r5, r1
 8001f8c:	6978      	ldr	r0, [r7, #20]
 8001f8e:	f7fe fadb 	bl	8000548 <__aeabi_f2d>
 8001f92:	4680      	mov	r8, r0
 8001f94:	4689      	mov	r9, r1
 8001f96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f9a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002004 <getLattitude+0x198>
 8001f9e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fa2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001faa:	ee17 0a90 	vmov	r0, s15
 8001fae:	f7fe facb 	bl	8000548 <__aeabi_f2d>
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <getLattitude+0x19c>)
 8001fb8:	f7fe fc48 	bl	800084c <__aeabi_ddiv>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4640      	mov	r0, r8
 8001fc2:	4649      	mov	r1, r9
 8001fc4:	f7fe f962 	bl	800028c <__adddf3>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4620      	mov	r0, r4
 8001fce:	4629      	mov	r1, r5
 8001fd0:	f7fe fb12 	bl	80005f8 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f7fe fde4 	bl	8000ba8 <__aeabi_d2f>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60bb      	str	r3, [r7, #8]
	return lattitude;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	ee07 3a90 	vmov	s15, r3
}
 8001fea:	eeb0 0a67 	vmov.f32	s0, s15
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ff6:	bf00      	nop
 8001ff8:	bf800000 	.word	0xbf800000
 8001ffc:	40590000 	.word	0x40590000
 8002000:	40240000 	.word	0x40240000
 8002004:	447a0000 	.word	0x447a0000
 8002008:	404e0000 	.word	0x404e0000

0800200c <getLongitude>:

float getLongitude(char * frame){
 800200c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002010:	b088      	sub	sp, #32
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
	float longitude=0;
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
	for (int i=0;i<4;i++){
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	e00c      	b.n	800203c <getLongitude+0x30>
		while(*frame!=','){
			frame++;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3301      	adds	r3, #1
 8002026:	607b      	str	r3, [r7, #4]
		while(*frame!=','){
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b2c      	cmp	r3, #44	; 0x2c
 800202e:	d1f8      	bne.n	8002022 <getLongitude+0x16>
		}
		frame++;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3301      	adds	r3, #1
 8002034:	607b      	str	r3, [r7, #4]
	for (int i=0;i<4;i++){
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3301      	adds	r3, #1
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	2b03      	cmp	r3, #3
 8002040:	ddf2      	ble.n	8002028 <getLongitude+0x1c>
	}

	float signe = (frame[10]=='E')?+1:-1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	330a      	adds	r3, #10
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b45      	cmp	r3, #69	; 0x45
 800204a:	d102      	bne.n	8002052 <getLongitude+0x46>
 800204c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002050:	e000      	b.n	8002054 <getLongitude+0x48>
 8002052:	4b56      	ldr	r3, [pc, #344]	; (80021ac <getLongitude+0x1a0>)
 8002054:	617b      	str	r3, [r7, #20]
	float degre = 100*(frame[0]&0xf)+10*(frame[1]&0xf)+(frame[2]&0xf);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	2264      	movs	r2, #100	; 0x64
 8002060:	fb02 f103 	mul.w	r1, r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3301      	adds	r3, #1
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	f003 020f 	and.w	r2, r3, #15
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	18ca      	adds	r2, r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3302      	adds	r3, #2
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	4413      	add	r3, r2
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208c:	edc7 7a04 	vstr	s15, [r7, #16]
	float minute = 10*(frame[3]&0xf)+(frame[4]&0xf);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3303      	adds	r3, #3
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	f003 020f 	and.w	r2, r3, #15
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3304      	adds	r3, #4
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	4413      	add	r3, r2
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b8:	edc7 7a03 	vstr	s15, [r7, #12]
	float minute_decimal = 100.0*(frame[6]&0xf)+10.0*(frame[7]&0xf)+(frame[8]&0x0f);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3306      	adds	r3, #6
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fa2c 	bl	8000524 <__aeabi_i2d>
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	4b37      	ldr	r3, [pc, #220]	; (80021b0 <getLongitude+0x1a4>)
 80020d2:	f7fe fa91 	bl	80005f8 <__aeabi_dmul>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4614      	mov	r4, r2
 80020dc:	461d      	mov	r5, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3307      	adds	r3, #7
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fa1b 	bl	8000524 <__aeabi_i2d>
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <getLongitude+0x1a8>)
 80020f4:	f7fe fa80 	bl	80005f8 <__aeabi_dmul>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4620      	mov	r0, r4
 80020fe:	4629      	mov	r1, r5
 8002100:	f7fe f8c4 	bl	800028c <__adddf3>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4614      	mov	r4, r2
 800210a:	461d      	mov	r5, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3308      	adds	r3, #8
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fa04 	bl	8000524 <__aeabi_i2d>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4620      	mov	r0, r4
 8002122:	4629      	mov	r1, r5
 8002124:	f7fe f8b2 	bl	800028c <__adddf3>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	f7fe fd3a 	bl	8000ba8 <__aeabi_d2f>
 8002134:	4603      	mov	r3, r0
 8002136:	60bb      	str	r3, [r7, #8]
	longitude = signe*(degre+(((float) minute)+(float)(minute_decimal/1000.0))/60.0);
 8002138:	6978      	ldr	r0, [r7, #20]
 800213a:	f7fe fa05 	bl	8000548 <__aeabi_f2d>
 800213e:	4604      	mov	r4, r0
 8002140:	460d      	mov	r5, r1
 8002142:	6938      	ldr	r0, [r7, #16]
 8002144:	f7fe fa00 	bl	8000548 <__aeabi_f2d>
 8002148:	4680      	mov	r8, r0
 800214a:	4689      	mov	r9, r1
 800214c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002150:	eddf 6a19 	vldr	s13, [pc, #100]	; 80021b8 <getLongitude+0x1ac>
 8002154:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002158:	edd7 7a03 	vldr	s15, [r7, #12]
 800215c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002160:	ee17 0a90 	vmov	r0, s15
 8002164:	f7fe f9f0 	bl	8000548 <__aeabi_f2d>
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <getLongitude+0x1b0>)
 800216e:	f7fe fb6d 	bl	800084c <__aeabi_ddiv>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4640      	mov	r0, r8
 8002178:	4649      	mov	r1, r9
 800217a:	f7fe f887 	bl	800028c <__adddf3>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4620      	mov	r0, r4
 8002184:	4629      	mov	r1, r5
 8002186:	f7fe fa37 	bl	80005f8 <__aeabi_dmul>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
 8002192:	f7fe fd09 	bl	8000ba8 <__aeabi_d2f>
 8002196:	4603      	mov	r3, r0
 8002198:	61bb      	str	r3, [r7, #24]

	return longitude;
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	ee07 3a90 	vmov	s15, r3
}
 80021a0:	eeb0 0a67 	vmov.f32	s0, s15
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021ac:	bf800000 	.word	0xbf800000
 80021b0:	40590000 	.word	0x40590000
 80021b4:	40240000 	.word	0x40240000
 80021b8:	447a0000 	.word	0x447a0000
 80021bc:	404e0000 	.word	0x404e0000

080021c0 <isGPGGA>:

int isGPGGA (char * frame){
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	const char * header="$GPGGA";
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <isGPGGA+0x48>)
 80021ca:	60bb      	str	r3, [r7, #8]
	for (int i=0;i<6;i++){
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e00f      	b.n	80021f2 <isGPGGA+0x32>
		if (header[i]!=frame[i]) return -1;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	4413      	add	r3, r2
 80021d8:	781a      	ldrb	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	440b      	add	r3, r1
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d002      	beq.n	80021ec <isGPGGA+0x2c>
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	e006      	b.n	80021fa <isGPGGA+0x3a>
	for (int i=0;i<6;i++){
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3301      	adds	r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	ddec      	ble.n	80021d2 <isGPGGA+0x12>
	}
	return 1;
 80021f8:	2301      	movs	r3, #1
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	0800a3e8 	.word	0x0800a3e8

0800220c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800220c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002244 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002210:	f7ff fcda 	bl	8001bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <LoopForever+0x6>)
  ldr r1, =_edata
 8002216:	490d      	ldr	r1, [pc, #52]	; (800224c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <LoopForever+0xe>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800222c:	4c0a      	ldr	r4, [pc, #40]	; (8002258 <LoopForever+0x16>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800223a:	f003 f9d5 	bl	80055e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800223e:	f7fe ff63 	bl	8001108 <main>

08002242 <LoopForever>:

LoopForever:
    b LoopForever
 8002242:	e7fe      	b.n	8002242 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002244:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800224c:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8002250:	0800bef8 	.word	0x0800bef8
  ldr r2, =_sbss
 8002254:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8002258:	200008cc 	.word	0x200008cc

0800225c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC1_2_IRQHandler>
	...

08002260 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_Init+0x3c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <HAL_Init+0x3c>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002276:	2003      	movs	r0, #3
 8002278:	f000 f920 	bl	80024bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800227c:	2000      	movs	r0, #0
 800227e:	f000 f80f 	bl	80022a0 <HAL_InitTick>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	71fb      	strb	r3, [r7, #7]
 800228c:	e001      	b.n	8002292 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800228e:	f7ff fa87 	bl	80017a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002292:	79fb      	ldrb	r3, [r7, #7]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40022000 	.word	0x40022000

080022a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022ac:	4b17      	ldr	r3, [pc, #92]	; (800230c <HAL_InitTick+0x6c>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d023      	beq.n	80022fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_InitTick+0x70>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_InitTick+0x6c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f91d 	bl	800250a <HAL_SYSTICK_Config>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10f      	bne.n	80022f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b0f      	cmp	r3, #15
 80022da:	d809      	bhi.n	80022f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022dc:	2200      	movs	r2, #0
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f000 f8f5 	bl	80024d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022e8:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <HAL_InitTick+0x74>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e007      	b.n	8002300 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	e004      	b.n	8002300 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e001      	b.n	8002300 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000058 	.word	0x20000058
 8002310:	20000050 	.word	0x20000050
 8002314:	20000054 	.word	0x20000054

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_IncTick+0x20>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x24>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <HAL_IncTick+0x24>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000058 	.word	0x20000058
 800233c:	200008b8 	.word	0x200008b8

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_GetTick+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	200008b8 	.word	0x200008b8

08002358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238a:	4a04      	ldr	r2, [pc, #16]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	60d3      	str	r3, [r2, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <__NVIC_GetPriorityGrouping+0x18>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0307 	and.w	r3, r3, #7
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	db0a      	blt.n	80023e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	490c      	ldr	r1, [pc, #48]	; (8002408 <__NVIC_SetPriority+0x4c>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	0112      	lsls	r2, r2, #4
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	440b      	add	r3, r1
 80023e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e4:	e00a      	b.n	80023fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4908      	ldr	r1, [pc, #32]	; (800240c <__NVIC_SetPriority+0x50>)
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	3b04      	subs	r3, #4
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	440b      	add	r3, r1
 80023fa:	761a      	strb	r2, [r3, #24]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000e100 	.word	0xe000e100
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f1c3 0307 	rsb	r3, r3, #7
 800242a:	2b04      	cmp	r3, #4
 800242c:	bf28      	it	cs
 800242e:	2304      	movcs	r3, #4
 8002430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3304      	adds	r3, #4
 8002436:	2b06      	cmp	r3, #6
 8002438:	d902      	bls.n	8002440 <NVIC_EncodePriority+0x30>
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3b03      	subs	r3, #3
 800243e:	e000      	b.n	8002442 <NVIC_EncodePriority+0x32>
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	f04f 32ff 	mov.w	r2, #4294967295
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	401a      	ands	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002458:	f04f 31ff 	mov.w	r1, #4294967295
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	43d9      	mvns	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	4313      	orrs	r3, r2
         );
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002488:	d301      	bcc.n	800248e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248a:	2301      	movs	r3, #1
 800248c:	e00f      	b.n	80024ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <SysTick_Config+0x40>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002496:	210f      	movs	r1, #15
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f7ff ff8e 	bl	80023bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <SysTick_Config+0x40>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a6:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <SysTick_Config+0x40>)
 80024a8:	2207      	movs	r2, #7
 80024aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	e000e010 	.word	0xe000e010

080024bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff47 	bl	8002358 <__NVIC_SetPriorityGrouping>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024e4:	f7ff ff5c 	bl	80023a0 <__NVIC_GetPriorityGrouping>
 80024e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f7ff ff8e 	bl	8002410 <NVIC_EncodePriority>
 80024f4:	4602      	mov	r2, r0
 80024f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff5d 	bl	80023bc <__NVIC_SetPriority>
}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ffb0 	bl	8002478 <SysTick_Config>
 8002518:	4603      	mov	r3, r0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d008      	beq.n	800254c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2204      	movs	r2, #4
 800253e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e022      	b.n	8002592 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 020e 	bic.w	r2, r2, #14
 800255a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	f003 021c 	and.w	r2, r3, #28
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f202 	lsl.w	r2, r1, r2
 800257e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c6:	e17f      	b.n	80028c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2101      	movs	r1, #1
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	4013      	ands	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8171 	beq.w	80028c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d005      	beq.n	80025f8 <HAL_GPIO_Init+0x40>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d130      	bne.n	800265a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800262e:	2201      	movs	r2, #1
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	f003 0201 	and.w	r2, r3, #1
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b03      	cmp	r3, #3
 8002664:	d118      	bne.n	8002698 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800266c:	2201      	movs	r2, #1
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	08db      	lsrs	r3, r3, #3
 8002682:	f003 0201 	and.w	r2, r3, #1
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d017      	beq.n	80026d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d123      	bne.n	8002728 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	6939      	ldr	r1, [r7, #16]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80ac 	beq.w	80028c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	4b5f      	ldr	r3, [pc, #380]	; (80028e8 <HAL_GPIO_Init+0x330>)
 800276c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276e:	4a5e      	ldr	r2, [pc, #376]	; (80028e8 <HAL_GPIO_Init+0x330>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6613      	str	r3, [r2, #96]	; 0x60
 8002776:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <HAL_GPIO_Init+0x330>)
 8002778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002782:	4a5a      	ldr	r2, [pc, #360]	; (80028ec <HAL_GPIO_Init+0x334>)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4013      	ands	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027ac:	d025      	beq.n	80027fa <HAL_GPIO_Init+0x242>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4f      	ldr	r2, [pc, #316]	; (80028f0 <HAL_GPIO_Init+0x338>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01f      	beq.n	80027f6 <HAL_GPIO_Init+0x23e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4e      	ldr	r2, [pc, #312]	; (80028f4 <HAL_GPIO_Init+0x33c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d019      	beq.n	80027f2 <HAL_GPIO_Init+0x23a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4d      	ldr	r2, [pc, #308]	; (80028f8 <HAL_GPIO_Init+0x340>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <HAL_GPIO_Init+0x236>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4c      	ldr	r2, [pc, #304]	; (80028fc <HAL_GPIO_Init+0x344>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00d      	beq.n	80027ea <HAL_GPIO_Init+0x232>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4b      	ldr	r2, [pc, #300]	; (8002900 <HAL_GPIO_Init+0x348>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <HAL_GPIO_Init+0x22e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4a      	ldr	r2, [pc, #296]	; (8002904 <HAL_GPIO_Init+0x34c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d101      	bne.n	80027e2 <HAL_GPIO_Init+0x22a>
 80027de:	2306      	movs	r3, #6
 80027e0:	e00c      	b.n	80027fc <HAL_GPIO_Init+0x244>
 80027e2:	2307      	movs	r3, #7
 80027e4:	e00a      	b.n	80027fc <HAL_GPIO_Init+0x244>
 80027e6:	2305      	movs	r3, #5
 80027e8:	e008      	b.n	80027fc <HAL_GPIO_Init+0x244>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x244>
 80027ee:	2303      	movs	r3, #3
 80027f0:	e004      	b.n	80027fc <HAL_GPIO_Init+0x244>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_Init+0x244>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_GPIO_Init+0x244>
 80027fa:	2300      	movs	r3, #0
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	f002 0203 	and.w	r2, r2, #3
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	4093      	lsls	r3, r2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800280c:	4937      	ldr	r1, [pc, #220]	; (80028ec <HAL_GPIO_Init+0x334>)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800281a:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_GPIO_Init+0x350>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800283e:	4a32      	ldr	r2, [pc, #200]	; (8002908 <HAL_GPIO_Init+0x350>)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002844:	4b30      	ldr	r3, [pc, #192]	; (8002908 <HAL_GPIO_Init+0x350>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	43db      	mvns	r3, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002868:	4a27      	ldr	r2, [pc, #156]	; (8002908 <HAL_GPIO_Init+0x350>)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800286e:	4b26      	ldr	r3, [pc, #152]	; (8002908 <HAL_GPIO_Init+0x350>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_GPIO_Init+0x350>)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_GPIO_Init+0x350>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028bc:	4a12      	ldr	r2, [pc, #72]	; (8002908 <HAL_GPIO_Init+0x350>)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	3301      	adds	r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f47f ae78 	bne.w	80025c8 <HAL_GPIO_Init+0x10>
  }
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40010000 	.word	0x40010000
 80028f0:	48000400 	.word	0x48000400
 80028f4:	48000800 	.word	0x48000800
 80028f8:	48000c00 	.word	0x48000c00
 80028fc:	48001000 	.word	0x48001000
 8002900:	48001400 	.word	0x48001400
 8002904:	48001800 	.word	0x48001800
 8002908:	40010400 	.word	0x40010400

0800290c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800291c:	787b      	ldrb	r3, [r7, #1]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002922:	887a      	ldrh	r2, [r7, #2]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002928:	e002      	b.n	8002930 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e081      	b.n	8002a52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe ff40 	bl	80017e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800298c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800299c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d107      	bne.n	80029b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	e006      	b.n	80029c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d104      	bne.n	80029d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69d9      	ldr	r1, [r3, #28]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1a      	ldr	r2, [r3, #32]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	461a      	mov	r2, r3
 8002a68:	460b      	mov	r3, r1
 8002a6a:	817b      	strh	r3, [r7, #10]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	f040 80da 	bne.w	8002c32 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_I2C_Master_Transmit+0x30>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e0d3      	b.n	8002c34 <HAL_I2C_Master_Transmit+0x1d8>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a94:	f7ff fc54 	bl	8002340 <HAL_GetTick>
 8002a98:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	2319      	movs	r3, #25
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f8f0 	bl	8002c8c <I2C_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0be      	b.n	8002c34 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2221      	movs	r2, #33	; 0x21
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	893a      	ldrh	r2, [r7, #8]
 8002ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2bff      	cmp	r3, #255	; 0xff
 8002ae6:	d90e      	bls.n	8002b06 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	22ff      	movs	r2, #255	; 0xff
 8002aec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	8979      	ldrh	r1, [r7, #10]
 8002af6:	4b51      	ldr	r3, [pc, #324]	; (8002c3c <HAL_I2C_Master_Transmit+0x1e0>)
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fa6c 	bl	8002fdc <I2C_TransferConfig>
 8002b04:	e06c      	b.n	8002be0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	8979      	ldrh	r1, [r7, #10]
 8002b18:	4b48      	ldr	r3, [pc, #288]	; (8002c3c <HAL_I2C_Master_Transmit+0x1e0>)
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fa5b 	bl	8002fdc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002b26:	e05b      	b.n	8002be0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	6a39      	ldr	r1, [r7, #32]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f8ed 	bl	8002d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e07b      	b.n	8002c34 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	781a      	ldrb	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d034      	beq.n	8002be0 <HAL_I2C_Master_Transmit+0x184>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d130      	bne.n	8002be0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	2200      	movs	r2, #0
 8002b86:	2180      	movs	r1, #128	; 0x80
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f87f 	bl	8002c8c <I2C_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e04d      	b.n	8002c34 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2bff      	cmp	r3, #255	; 0xff
 8002ba0:	d90e      	bls.n	8002bc0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	22ff      	movs	r2, #255	; 0xff
 8002ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	8979      	ldrh	r1, [r7, #10]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 fa0f 	bl	8002fdc <I2C_TransferConfig>
 8002bbe:	e00f      	b.n	8002be0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	8979      	ldrh	r1, [r7, #10]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f9fe 	bl	8002fdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d19e      	bne.n	8002b28 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	6a39      	ldr	r1, [r7, #32]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f8cc 	bl	8002d8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e01a      	b.n	8002c34 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2220      	movs	r2, #32
 8002c04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_I2C_Master_Transmit+0x1e4>)
 8002c12:	400b      	ands	r3, r1
 8002c14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e000      	b.n	8002c34 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c32:	2302      	movs	r3, #2
  }
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	80002000 	.word	0x80002000
 8002c40:	fe00e800 	.word	0xfe00e800

08002c44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d103      	bne.n	8002c62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d007      	beq.n	8002c80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	619a      	str	r2, [r3, #24]
  }
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c9c:	e022      	b.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d01e      	beq.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca6:	f7ff fb4b 	bl	8002340 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d302      	bcc.n	8002cbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d113      	bne.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e00f      	b.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d0cd      	beq.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d18:	e02c      	b.n	8002d74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f870 	bl	8002e04 <I2C_IsErrorOccurred>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e02a      	b.n	8002d84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d01e      	beq.n	8002d74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d36:	f7ff fb03 	bl	8002340 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d302      	bcc.n	8002d4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d113      	bne.n	8002d74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e007      	b.n	8002d84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d1cb      	bne.n	8002d1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d98:	e028      	b.n	8002dec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f830 	bl	8002e04 <I2C_IsErrorOccurred>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e026      	b.n	8002dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dae:	f7ff fac7 	bl	8002340 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d113      	bne.n	8002dec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc8:	f043 0220 	orr.w	r2, r3, #32
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e007      	b.n	8002dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d1cf      	bne.n	8002d9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d075      	beq.n	8002f1c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2210      	movs	r2, #16
 8002e36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e38:	e056      	b.n	8002ee8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d052      	beq.n	8002ee8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e42:	f7ff fa7d 	bl	8002340 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d302      	bcc.n	8002e58 <I2C_IsErrorOccurred+0x54>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d147      	bne.n	8002ee8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e7a:	d12e      	bne.n	8002eda <I2C_IsErrorOccurred+0xd6>
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e82:	d02a      	beq.n	8002eda <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d027      	beq.n	8002eda <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e9a:	f7ff fa51 	bl	8002340 <HAL_GetTick>
 8002e9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ea0:	e01b      	b.n	8002eda <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ea2:	f7ff fa4d 	bl	8002340 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b19      	cmp	r3, #25
 8002eae:	d914      	bls.n	8002eda <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	f043 0220 	orr.w	r2, r3, #32
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d1dc      	bne.n	8002ea2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d003      	beq.n	8002efe <I2C_IsErrorOccurred+0xfa>
 8002ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d09d      	beq.n	8002e3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	f043 0308 	orr.w	r3, r3, #8
 8002f56:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	f043 0302 	orr.w	r3, r3, #2
 8002f78:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01c      	beq.n	8002fcc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f7ff fe56 	bl	8002c44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6859      	ldr	r1, [r3, #4]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <I2C_IsErrorOccurred+0x1d4>)
 8002fa4:	400b      	ands	r3, r1
 8002fa6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3728      	adds	r7, #40	; 0x28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	fe00e800 	.word	0xfe00e800

08002fdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	817b      	strh	r3, [r7, #10]
 8002fea:	4613      	mov	r3, r2
 8002fec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fee:	897b      	ldrh	r3, [r7, #10]
 8002ff0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ff4:	7a7b      	ldrb	r3, [r7, #9]
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ffc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	4313      	orrs	r3, r2
 8003006:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800300a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	0d5b      	lsrs	r3, r3, #21
 8003016:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <I2C_TransferConfig+0x60>)
 800301c:	430b      	orrs	r3, r1
 800301e:	43db      	mvns	r3, r3
 8003020:	ea02 0103 	and.w	r1, r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	03ff63ff 	.word	0x03ff63ff

08003040 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b20      	cmp	r3, #32
 8003054:	d138      	bne.n	80030c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003060:	2302      	movs	r3, #2
 8003062:	e032      	b.n	80030ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2224      	movs	r2, #36	; 0x24
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003092:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6819      	ldr	r1, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e000      	b.n	80030ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
  }
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b085      	sub	sp, #20
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d139      	bne.n	8003160 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e033      	b.n	8003162 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2224      	movs	r2, #36	; 0x24
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0201 	bic.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003128:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <HAL_PWREx_GetVoltageRange+0x18>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40007000 	.word	0x40007000

0800318c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800319a:	d130      	bne.n	80031fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800319c:	4b23      	ldr	r3, [pc, #140]	; (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a8:	d038      	beq.n	800321c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031b2:	4a1e      	ldr	r2, [pc, #120]	; (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2232      	movs	r2, #50	; 0x32
 80031c0:	fb02 f303 	mul.w	r3, r2, r3
 80031c4:	4a1b      	ldr	r2, [pc, #108]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	0c9b      	lsrs	r3, r3, #18
 80031cc:	3301      	adds	r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d0:	e002      	b.n	80031d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d8:	4b14      	ldr	r3, [pc, #80]	; (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e4:	d102      	bne.n	80031ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f2      	bne.n	80031d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f8:	d110      	bne.n	800321c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e00f      	b.n	800321e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320a:	d007      	beq.n	800321c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800320c:	4b07      	ldr	r3, [pc, #28]	; (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003214:	4a05      	ldr	r2, [pc, #20]	; (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800321a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40007000 	.word	0x40007000
 8003230:	20000050 	.word	0x20000050
 8003234:	431bde83 	.word	0x431bde83

08003238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e3ca      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800324a:	4b97      	ldr	r3, [pc, #604]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003254:	4b94      	ldr	r3, [pc, #592]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80e4 	beq.w	8003434 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_RCC_OscConfig+0x4a>
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	f040 808b 	bne.w	8003390 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b01      	cmp	r3, #1
 800327e:	f040 8087 	bne.w	8003390 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003282:	4b89      	ldr	r3, [pc, #548]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_RCC_OscConfig+0x62>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e3a2      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1a      	ldr	r2, [r3, #32]
 800329e:	4b82      	ldr	r3, [pc, #520]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d004      	beq.n	80032b4 <HAL_RCC_OscConfig+0x7c>
 80032aa:	4b7f      	ldr	r3, [pc, #508]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b2:	e005      	b.n	80032c0 <HAL_RCC_OscConfig+0x88>
 80032b4:	4b7c      	ldr	r3, [pc, #496]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d223      	bcs.n	800330c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fd55 	bl	8003d78 <RCC_SetFlashLatencyFromMSIRange>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e383      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d8:	4b73      	ldr	r3, [pc, #460]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a72      	ldr	r2, [pc, #456]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032de:	f043 0308 	orr.w	r3, r3, #8
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	4b70      	ldr	r3, [pc, #448]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	496d      	ldr	r1, [pc, #436]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032f6:	4b6c      	ldr	r3, [pc, #432]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	4968      	ldr	r1, [pc, #416]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
 800330a:	e025      	b.n	8003358 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800330c:	4b66      	ldr	r3, [pc, #408]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a65      	ldr	r2, [pc, #404]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003312:	f043 0308 	orr.w	r3, r3, #8
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b63      	ldr	r3, [pc, #396]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	4960      	ldr	r1, [pc, #384]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800332a:	4b5f      	ldr	r3, [pc, #380]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	495b      	ldr	r1, [pc, #364]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d109      	bne.n	8003358 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fd15 	bl	8003d78 <RCC_SetFlashLatencyFromMSIRange>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e343      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003358:	f000 fc4a 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b52      	ldr	r3, [pc, #328]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	4950      	ldr	r1, [pc, #320]	; (80034ac <HAL_RCC_OscConfig+0x274>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
 8003374:	4a4e      	ldr	r2, [pc, #312]	; (80034b0 <HAL_RCC_OscConfig+0x278>)
 8003376:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003378:	4b4e      	ldr	r3, [pc, #312]	; (80034b4 <HAL_RCC_OscConfig+0x27c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe ff8f 	bl	80022a0 <HAL_InitTick>
 8003382:	4603      	mov	r3, r0
 8003384:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d052      	beq.n	8003432 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800338c:	7bfb      	ldrb	r3, [r7, #15]
 800338e:	e327      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d032      	beq.n	80033fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003398:	4b43      	ldr	r3, [pc, #268]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a42      	ldr	r2, [pc, #264]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033a4:	f7fe ffcc 	bl	8002340 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033ac:	f7fe ffc8 	bl	8002340 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e310      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033be:	4b3a      	ldr	r3, [pc, #232]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ca:	4b37      	ldr	r3, [pc, #220]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a36      	ldr	r2, [pc, #216]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033d0:	f043 0308 	orr.w	r3, r3, #8
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b34      	ldr	r3, [pc, #208]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	4931      	ldr	r1, [pc, #196]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e8:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	492c      	ldr	r1, [pc, #176]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
 80033fc:	e01a      	b.n	8003434 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033fe:	4b2a      	ldr	r3, [pc, #168]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a29      	ldr	r2, [pc, #164]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800340a:	f7fe ff99 	bl	8002340 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003412:	f7fe ff95 	bl	8002340 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e2dd      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003424:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x1da>
 8003430:	e000      	b.n	8003434 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003432:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d074      	beq.n	800352a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b08      	cmp	r3, #8
 8003444:	d005      	beq.n	8003452 <HAL_RCC_OscConfig+0x21a>
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b0c      	cmp	r3, #12
 800344a:	d10e      	bne.n	800346a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d10b      	bne.n	800346a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d064      	beq.n	8003528 <HAL_RCC_OscConfig+0x2f0>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d160      	bne.n	8003528 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e2ba      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x24a>
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a0b      	ldr	r2, [pc, #44]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800347a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	e026      	b.n	80034d0 <HAL_RCC_OscConfig+0x298>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800348a:	d115      	bne.n	80034b8 <HAL_RCC_OscConfig+0x280>
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a05      	ldr	r2, [pc, #20]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003492:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a02      	ldr	r2, [pc, #8]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800349e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	e014      	b.n	80034d0 <HAL_RCC_OscConfig+0x298>
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000
 80034ac:	0800b8b8 	.word	0x0800b8b8
 80034b0:	20000050 	.word	0x20000050
 80034b4:	20000054 	.word	0x20000054
 80034b8:	4ba0      	ldr	r3, [pc, #640]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a9f      	ldr	r2, [pc, #636]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80034be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	4b9d      	ldr	r3, [pc, #628]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a9c      	ldr	r2, [pc, #624]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80034ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d013      	beq.n	8003500 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fe ff32 	bl	8002340 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e0:	f7fe ff2e 	bl	8002340 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e276      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034f2:	4b92      	ldr	r3, [pc, #584]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x2a8>
 80034fe:	e014      	b.n	800352a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe ff1e 	bl	8002340 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003508:	f7fe ff1a 	bl	8002340 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e262      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800351a:	4b88      	ldr	r3, [pc, #544]	; (800373c <HAL_RCC_OscConfig+0x504>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x2d0>
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d060      	beq.n	80035f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b04      	cmp	r3, #4
 800353a:	d005      	beq.n	8003548 <HAL_RCC_OscConfig+0x310>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b0c      	cmp	r3, #12
 8003540:	d119      	bne.n	8003576 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d116      	bne.n	8003576 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003548:	4b7c      	ldr	r3, [pc, #496]	; (800373c <HAL_RCC_OscConfig+0x504>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_OscConfig+0x328>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e23f      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003560:	4b76      	ldr	r3, [pc, #472]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	061b      	lsls	r3, r3, #24
 800356e:	4973      	ldr	r1, [pc, #460]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003574:	e040      	b.n	80035f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d023      	beq.n	80035c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800357e:	4b6f      	ldr	r3, [pc, #444]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6e      	ldr	r2, [pc, #440]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fe fed9 	bl	8002340 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003592:	f7fe fed5 	bl	8002340 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e21d      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a4:	4b65      	ldr	r3, [pc, #404]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b0:	4b62      	ldr	r3, [pc, #392]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	495f      	ldr	r1, [pc, #380]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
 80035c4:	e018      	b.n	80035f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c6:	4b5d      	ldr	r3, [pc, #372]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5c      	ldr	r2, [pc, #368]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80035cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d2:	f7fe feb5 	bl	8002340 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035da:	f7fe feb1 	bl	8002340 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e1f9      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035ec:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f0      	bne.n	80035da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d03c      	beq.n	800367e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01c      	beq.n	8003646 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360c:	4b4b      	ldr	r3, [pc, #300]	; (800373c <HAL_RCC_OscConfig+0x504>)
 800360e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003612:	4a4a      	ldr	r2, [pc, #296]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fe fe90 	bl	8002340 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003624:	f7fe fe8c 	bl	8002340 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e1d4      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0ef      	beq.n	8003624 <HAL_RCC_OscConfig+0x3ec>
 8003644:	e01b      	b.n	800367e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003646:	4b3d      	ldr	r3, [pc, #244]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364c:	4a3b      	ldr	r2, [pc, #236]	; (800373c <HAL_RCC_OscConfig+0x504>)
 800364e:	f023 0301 	bic.w	r3, r3, #1
 8003652:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003656:	f7fe fe73 	bl	8002340 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365e:	f7fe fe6f 	bl	8002340 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e1b7      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003670:	4b32      	ldr	r3, [pc, #200]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1ef      	bne.n	800365e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80a6 	beq.w	80037d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368c:	2300      	movs	r3, #0
 800368e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003690:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10d      	bne.n	80036b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369c:	4b27      	ldr	r3, [pc, #156]	; (800373c <HAL_RCC_OscConfig+0x504>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	4a26      	ldr	r2, [pc, #152]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80036a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a6:	6593      	str	r3, [r2, #88]	; 0x58
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b4:	2301      	movs	r3, #1
 80036b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b8:	4b21      	ldr	r3, [pc, #132]	; (8003740 <HAL_RCC_OscConfig+0x508>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d118      	bne.n	80036f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c4:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <HAL_RCC_OscConfig+0x508>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1d      	ldr	r2, [pc, #116]	; (8003740 <HAL_RCC_OscConfig+0x508>)
 80036ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d0:	f7fe fe36 	bl	8002340 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d8:	f7fe fe32 	bl	8002340 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e17a      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <HAL_RCC_OscConfig+0x508>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d108      	bne.n	8003710 <HAL_RCC_OscConfig+0x4d8>
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	4a0d      	ldr	r2, [pc, #52]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800370e:	e029      	b.n	8003764 <HAL_RCC_OscConfig+0x52c>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b05      	cmp	r3, #5
 8003716:	d115      	bne.n	8003744 <HAL_RCC_OscConfig+0x50c>
 8003718:	4b08      	ldr	r3, [pc, #32]	; (800373c <HAL_RCC_OscConfig+0x504>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	4a07      	ldr	r2, [pc, #28]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <HAL_RCC_OscConfig+0x504>)
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372e:	4a03      	ldr	r2, [pc, #12]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003738:	e014      	b.n	8003764 <HAL_RCC_OscConfig+0x52c>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	40007000 	.word	0x40007000
 8003744:	4b9c      	ldr	r3, [pc, #624]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	4a9b      	ldr	r2, [pc, #620]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003754:	4b98      	ldr	r3, [pc, #608]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	4a97      	ldr	r2, [pc, #604]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 800375c:	f023 0304 	bic.w	r3, r3, #4
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d016      	beq.n	800379a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376c:	f7fe fde8 	bl	8002340 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003772:	e00a      	b.n	800378a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003774:	f7fe fde4 	bl	8002340 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e12a      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378a:	4b8b      	ldr	r3, [pc, #556]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0ed      	beq.n	8003774 <HAL_RCC_OscConfig+0x53c>
 8003798:	e015      	b.n	80037c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379a:	f7fe fdd1 	bl	8002340 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f7fe fdcd 	bl	8002340 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e113      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b8:	4b7f      	ldr	r3, [pc, #508]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ed      	bne.n	80037a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c6:	7ffb      	ldrb	r3, [r7, #31]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d105      	bne.n	80037d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037cc:	4b7a      	ldr	r3, [pc, #488]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	4a79      	ldr	r2, [pc, #484]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 80037d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80fe 	beq.w	80039de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	f040 80d0 	bne.w	800398c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037ec:	4b72      	ldr	r3, [pc, #456]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f003 0203 	and.w	r2, r3, #3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d130      	bne.n	8003862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	3b01      	subs	r3, #1
 800380c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d127      	bne.n	8003862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d11f      	bne.n	8003862 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800382c:	2a07      	cmp	r2, #7
 800382e:	bf14      	ite	ne
 8003830:	2201      	movne	r2, #1
 8003832:	2200      	moveq	r2, #0
 8003834:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003836:	4293      	cmp	r3, r2
 8003838:	d113      	bne.n	8003862 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	3b01      	subs	r3, #1
 8003848:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d109      	bne.n	8003862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	085b      	lsrs	r3, r3, #1
 800385a:	3b01      	subs	r3, #1
 800385c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d06e      	beq.n	8003940 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b0c      	cmp	r3, #12
 8003866:	d069      	beq.n	800393c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003868:	4b53      	ldr	r3, [pc, #332]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d105      	bne.n	8003880 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003874:	4b50      	ldr	r3, [pc, #320]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0ad      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003884:	4b4c      	ldr	r3, [pc, #304]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a4b      	ldr	r2, [pc, #300]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 800388a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800388e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003890:	f7fe fd56 	bl	8002340 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003898:	f7fe fd52 	bl	8002340 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e09a      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038aa:	4b43      	ldr	r3, [pc, #268]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b6:	4b40      	ldr	r3, [pc, #256]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	4b40      	ldr	r3, [pc, #256]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038c6:	3a01      	subs	r2, #1
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	4311      	orrs	r1, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038d0:	0212      	lsls	r2, r2, #8
 80038d2:	4311      	orrs	r1, r2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038d8:	0852      	lsrs	r2, r2, #1
 80038da:	3a01      	subs	r2, #1
 80038dc:	0552      	lsls	r2, r2, #21
 80038de:	4311      	orrs	r1, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038e4:	0852      	lsrs	r2, r2, #1
 80038e6:	3a01      	subs	r2, #1
 80038e8:	0652      	lsls	r2, r2, #25
 80038ea:	4311      	orrs	r1, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038f0:	0912      	lsrs	r2, r2, #4
 80038f2:	0452      	lsls	r2, r2, #17
 80038f4:	430a      	orrs	r2, r1
 80038f6:	4930      	ldr	r1, [pc, #192]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038fc:	4b2e      	ldr	r3, [pc, #184]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2d      	ldr	r2, [pc, #180]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003906:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003908:	4b2b      	ldr	r3, [pc, #172]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a2a      	ldr	r2, [pc, #168]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 800390e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003912:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003914:	f7fe fd14 	bl	8002340 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe fd10 	bl	8002340 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e058      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392e:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800393a:	e050      	b.n	80039de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e04f      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003940:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d148      	bne.n	80039de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800394c:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a19      	ldr	r2, [pc, #100]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003956:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003958:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 800395e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003962:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003964:	f7fe fcec 	bl	8002340 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396c:	f7fe fce8 	bl	8002340 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e030      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397e:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x734>
 800398a:	e028      	b.n	80039de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d023      	beq.n	80039da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a08      	ldr	r2, [pc, #32]	; (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800399c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fe fccf 	bl	8002340 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a4:	e00c      	b.n	80039c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fe fccb 	bl	8002340 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d905      	bls.n	80039c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e013      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
 80039b8:	40021000 	.word	0x40021000
 80039bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <HAL_RCC_OscConfig+0x7b0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ec      	bne.n	80039a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_RCC_OscConfig+0x7b0>)
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	4905      	ldr	r1, [pc, #20]	; (80039e8 <HAL_RCC_OscConfig+0x7b0>)
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_RCC_OscConfig+0x7b4>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	60cb      	str	r3, [r1, #12]
 80039d8:	e001      	b.n	80039de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000
 80039ec:	feeefffc 	.word	0xfeeefffc

080039f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0e7      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b75      	ldr	r3, [pc, #468]	; (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d910      	bls.n	8003a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b72      	ldr	r3, [pc, #456]	; (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 0207 	bic.w	r2, r3, #7
 8003a1a:	4970      	ldr	r1, [pc, #448]	; (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b6e      	ldr	r3, [pc, #440]	; (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0cf      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d010      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	4b66      	ldr	r3, [pc, #408]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d908      	bls.n	8003a62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a50:	4b63      	ldr	r3, [pc, #396]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4960      	ldr	r1, [pc, #384]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d04c      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a76:	4b5a      	ldr	r3, [pc, #360]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d121      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e0a6      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a8e:	4b54      	ldr	r3, [pc, #336]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d115      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e09a      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa6:	4b4e      	ldr	r3, [pc, #312]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e08e      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e086      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ac6:	4b46      	ldr	r3, [pc, #280]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4943      	ldr	r1, [pc, #268]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad8:	f7fe fc32 	bl	8002340 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7fe fc2e 	bl	8002340 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e06e      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	4b3a      	ldr	r3, [pc, #232]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 020c 	and.w	r2, r3, #12
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d1eb      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d010      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d208      	bcs.n	8003b36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b24:	4b2e      	ldr	r3, [pc, #184]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	492b      	ldr	r1, [pc, #172]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b36:	4b29      	ldr	r3, [pc, #164]	; (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d210      	bcs.n	8003b66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b44:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f023 0207 	bic.w	r2, r3, #7
 8003b4c:	4923      	ldr	r1, [pc, #140]	; (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b54:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d001      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e036      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b72:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	4918      	ldr	r1, [pc, #96]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b90:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4910      	ldr	r1, [pc, #64]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ba4:	f000 f824 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	490b      	ldr	r1, [pc, #44]	; (8003be4 <HAL_RCC_ClockConfig+0x1f4>)
 8003bb6:	5ccb      	ldrb	r3, [r1, r3]
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc0:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003bc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bc4:	4b09      	ldr	r3, [pc, #36]	; (8003bec <HAL_RCC_ClockConfig+0x1fc>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe fb69 	bl	80022a0 <HAL_InitTick>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bd2:	7afb      	ldrb	r3, [r7, #11]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40022000 	.word	0x40022000
 8003be0:	40021000 	.word	0x40021000
 8003be4:	0800b8b8 	.word	0x0800b8b8
 8003be8:	20000050 	.word	0x20000050
 8003bec:	20000054 	.word	0x20000054

08003bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b089      	sub	sp, #36	; 0x24
 8003bf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bfe:	4b3e      	ldr	r3, [pc, #248]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c08:	4b3b      	ldr	r3, [pc, #236]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x34>
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d121      	bne.n	8003c62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d11e      	bne.n	8003c62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c24:	4b34      	ldr	r3, [pc, #208]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c30:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	e005      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c40:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c4c:	4a2b      	ldr	r2, [pc, #172]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10d      	bne.n	8003c78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d102      	bne.n	8003c6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	e004      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c74:	4b23      	ldr	r3, [pc, #140]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	d134      	bne.n	8003ce8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c7e:	4b1e      	ldr	r3, [pc, #120]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d003      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0xac>
 8003c94:	e005      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c96:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c98:	617b      	str	r3, [r7, #20]
      break;
 8003c9a:	e005      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c9c:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c9e:	617b      	str	r3, [r7, #20]
      break;
 8003ca0:	e002      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	617b      	str	r3, [r7, #20]
      break;
 8003ca6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca8:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cb6:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	0a1b      	lsrs	r3, r3, #8
 8003cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	fb03 f202 	mul.w	r2, r3, r2
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cce:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	0e5b      	lsrs	r3, r3, #25
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	3301      	adds	r3, #1
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ce8:	69bb      	ldr	r3, [r7, #24]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3724      	adds	r7, #36	; 0x24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	0800b8d0 	.word	0x0800b8d0
 8003d00:	00f42400 	.word	0x00f42400
 8003d04:	007a1200 	.word	0x007a1200

08003d08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000050 	.word	0x20000050

08003d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d24:	f7ff fff0 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	0a1b      	lsrs	r3, r3, #8
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	4904      	ldr	r1, [pc, #16]	; (8003d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000
 8003d48:	0800b8c8 	.word	0x0800b8c8

08003d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d50:	f7ff ffda 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	0adb      	lsrs	r3, r3, #11
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4904      	ldr	r1, [pc, #16]	; (8003d74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	0800b8c8 	.word	0x0800b8c8

08003d78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d84:	4b2a      	ldr	r3, [pc, #168]	; (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d90:	f7ff f9ee 	bl	8003170 <HAL_PWREx_GetVoltageRange>
 8003d94:	6178      	str	r0, [r7, #20]
 8003d96:	e014      	b.n	8003dc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d98:	4b25      	ldr	r3, [pc, #148]	; (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	4a24      	ldr	r2, [pc, #144]	; (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da2:	6593      	str	r3, [r2, #88]	; 0x58
 8003da4:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003db0:	f7ff f9de 	bl	8003170 <HAL_PWREx_GetVoltageRange>
 8003db4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003db6:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dba:	4a1d      	ldr	r2, [pc, #116]	; (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc8:	d10b      	bne.n	8003de2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b80      	cmp	r3, #128	; 0x80
 8003dce:	d919      	bls.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2ba0      	cmp	r3, #160	; 0xa0
 8003dd4:	d902      	bls.n	8003ddc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	e013      	b.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ddc:	2301      	movs	r3, #1
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	e010      	b.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b80      	cmp	r3, #128	; 0x80
 8003de6:	d902      	bls.n	8003dee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003de8:	2303      	movs	r3, #3
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	e00a      	b.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b80      	cmp	r3, #128	; 0x80
 8003df2:	d102      	bne.n	8003dfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003df4:	2302      	movs	r3, #2
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	e004      	b.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b70      	cmp	r3, #112	; 0x70
 8003dfe:	d101      	bne.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e00:	2301      	movs	r3, #1
 8003e02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f023 0207 	bic.w	r2, r3, #7
 8003e0c:	4909      	ldr	r1, [pc, #36]	; (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e14:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d001      	beq.n	8003e26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40022000 	.word	0x40022000

08003e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e40:	2300      	movs	r3, #0
 8003e42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e44:	2300      	movs	r3, #0
 8003e46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d041      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e5c:	d02a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e62:	d824      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e68:	d008      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e6e:	d81e      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e78:	d010      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e7a:	e018      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e7c:	4b86      	ldr	r3, [pc, #536]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a85      	ldr	r2, [pc, #532]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e88:	e015      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fabb 	bl	800440c <RCCEx_PLLSAI1_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e9a:	e00c      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3320      	adds	r3, #32
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fba6 	bl	80045f4 <RCCEx_PLLSAI2_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eac:	e003      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	74fb      	strb	r3, [r7, #19]
      break;
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10b      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ebc:	4b76      	ldr	r3, [pc, #472]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eca:	4973      	ldr	r1, [pc, #460]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ed2:	e001      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d041      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003eec:	d02a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003eee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ef2:	d824      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003efa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003efe:	d81e      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f08:	d010      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f0a:	e018      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f0c:	4b62      	ldr	r3, [pc, #392]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a61      	ldr	r2, [pc, #388]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f18:	e015      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fa73 	bl	800440c <RCCEx_PLLSAI1_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f2a:	e00c      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3320      	adds	r3, #32
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fb5e 	bl	80045f4 <RCCEx_PLLSAI2_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f3c:	e003      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	74fb      	strb	r3, [r7, #19]
      break;
 8003f42:	e000      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f46:	7cfb      	ldrb	r3, [r7, #19]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f4c:	4b52      	ldr	r3, [pc, #328]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f5a:	494f      	ldr	r1, [pc, #316]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f62:	e001      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	7cfb      	ldrb	r3, [r7, #19]
 8003f66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80a0 	beq.w	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f7a:	4b47      	ldr	r3, [pc, #284]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f90:	4b41      	ldr	r3, [pc, #260]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f94:	4a40      	ldr	r2, [pc, #256]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f9c:	4b3e      	ldr	r3, [pc, #248]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fac:	4b3b      	ldr	r3, [pc, #236]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a3a      	ldr	r2, [pc, #232]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb8:	f7fe f9c2 	bl	8002340 <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fbe:	e009      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc0:	f7fe f9be 	bl	8002340 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d902      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	74fb      	strb	r3, [r7, #19]
        break;
 8003fd2:	e005      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fd4:	4b31      	ldr	r3, [pc, #196]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ef      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d15c      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fe6:	4b2c      	ldr	r3, [pc, #176]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01f      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	429a      	cmp	r2, r3
 8004002:	d019      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004004:	4b24      	ldr	r3, [pc, #144]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004010:	4b21      	ldr	r3, [pc, #132]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004016:	4a20      	ldr	r2, [pc, #128]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004020:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004042:	f7fe f97d 	bl	8002340 <HAL_GetTick>
 8004046:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004048:	e00b      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fe f979 	bl	8002340 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	; 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d902      	bls.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	74fb      	strb	r3, [r7, #19]
            break;
 8004060:	e006      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0ec      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10c      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004086:	4904      	ldr	r1, [pc, #16]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800408e:	e009      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	74bb      	strb	r3, [r7, #18]
 8004094:	e006      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000
 800409c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a4:	7c7b      	ldrb	r3, [r7, #17]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040aa:	4b9e      	ldr	r3, [pc, #632]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	4a9d      	ldr	r2, [pc, #628]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040c2:	4b98      	ldr	r3, [pc, #608]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c8:	f023 0203 	bic.w	r2, r3, #3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	4994      	ldr	r1, [pc, #592]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040e4:	4b8f      	ldr	r3, [pc, #572]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	f023 020c 	bic.w	r2, r3, #12
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	498c      	ldr	r1, [pc, #560]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004106:	4b87      	ldr	r3, [pc, #540]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	4983      	ldr	r1, [pc, #524]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004128:	4b7e      	ldr	r3, [pc, #504]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	497b      	ldr	r1, [pc, #492]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800414a:	4b76      	ldr	r3, [pc, #472]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004158:	4972      	ldr	r1, [pc, #456]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800416c:	4b6d      	ldr	r3, [pc, #436]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	496a      	ldr	r1, [pc, #424]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800418e:	4b65      	ldr	r3, [pc, #404]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	4961      	ldr	r1, [pc, #388]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041b0:	4b5c      	ldr	r3, [pc, #368]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041be:	4959      	ldr	r1, [pc, #356]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041d2:	4b54      	ldr	r3, [pc, #336]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e0:	4950      	ldr	r1, [pc, #320]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041f4:	4b4b      	ldr	r3, [pc, #300]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	4948      	ldr	r1, [pc, #288]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004216:	4b43      	ldr	r3, [pc, #268]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004224:	493f      	ldr	r1, [pc, #252]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d028      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004238:	4b3a      	ldr	r3, [pc, #232]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004246:	4937      	ldr	r1, [pc, #220]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004256:	d106      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004258:	4b32      	ldr	r3, [pc, #200]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a31      	ldr	r2, [pc, #196]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004262:	60d3      	str	r3, [r2, #12]
 8004264:	e011      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800426e:	d10c      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	2101      	movs	r1, #1
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f8c8 	bl	800440c <RCCEx_PLLSAI1_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d028      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004296:	4b23      	ldr	r3, [pc, #140]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a4:	491f      	ldr	r1, [pc, #124]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b4:	d106      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b6:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042c0:	60d3      	str	r3, [r2, #12]
 80042c2:	e011      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3304      	adds	r3, #4
 80042d2:	2101      	movs	r1, #1
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 f899 	bl	800440c <RCCEx_PLLSAI1_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
 80042e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d02b      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004302:	4908      	ldr	r1, [pc, #32]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004312:	d109      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004314:	4b03      	ldr	r3, [pc, #12]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a02      	ldr	r2, [pc, #8]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800431e:	60d3      	str	r3, [r2, #12]
 8004320:	e014      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004330:	d10c      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3304      	adds	r3, #4
 8004336:	2101      	movs	r1, #1
 8004338:	4618      	mov	r0, r3
 800433a:	f000 f867 	bl	800440c <RCCEx_PLLSAI1_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004348:	7cfb      	ldrb	r3, [r7, #19]
 800434a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d02f      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004358:	4b2b      	ldr	r3, [pc, #172]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004366:	4928      	ldr	r1, [pc, #160]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004376:	d10d      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3304      	adds	r3, #4
 800437c:	2102      	movs	r1, #2
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f844 	bl	800440c <RCCEx_PLLSAI1_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d014      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	74bb      	strb	r3, [r7, #18]
 8004392:	e011      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3320      	adds	r3, #32
 80043a2:	2102      	movs	r1, #2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 f925 	bl	80045f4 <RCCEx_PLLSAI2_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043c4:	4b10      	ldr	r3, [pc, #64]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d2:	490d      	ldr	r1, [pc, #52]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043e6:	4b08      	ldr	r3, [pc, #32]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f6:	4904      	ldr	r1, [pc, #16]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000

0800440c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800441a:	4b75      	ldr	r3, [pc, #468]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d018      	beq.n	8004458 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004426:	4b72      	ldr	r3, [pc, #456]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f003 0203 	and.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d10d      	bne.n	8004452 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
       ||
 800443a:	2b00      	cmp	r3, #0
 800443c:	d009      	beq.n	8004452 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800443e:	4b6c      	ldr	r3, [pc, #432]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	091b      	lsrs	r3, r3, #4
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
       ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d047      	beq.n	80044e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
 8004456:	e044      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b03      	cmp	r3, #3
 800445e:	d018      	beq.n	8004492 <RCCEx_PLLSAI1_Config+0x86>
 8004460:	2b03      	cmp	r3, #3
 8004462:	d825      	bhi.n	80044b0 <RCCEx_PLLSAI1_Config+0xa4>
 8004464:	2b01      	cmp	r3, #1
 8004466:	d002      	beq.n	800446e <RCCEx_PLLSAI1_Config+0x62>
 8004468:	2b02      	cmp	r3, #2
 800446a:	d009      	beq.n	8004480 <RCCEx_PLLSAI1_Config+0x74>
 800446c:	e020      	b.n	80044b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800446e:	4b60      	ldr	r3, [pc, #384]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d11d      	bne.n	80044b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800447e:	e01a      	b.n	80044b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004480:	4b5b      	ldr	r3, [pc, #364]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004488:	2b00      	cmp	r3, #0
 800448a:	d116      	bne.n	80044ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004490:	e013      	b.n	80044ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004492:	4b57      	ldr	r3, [pc, #348]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10f      	bne.n	80044be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800449e:	4b54      	ldr	r3, [pc, #336]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ae:	e006      	b.n	80044be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      break;
 80044b4:	e004      	b.n	80044c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044b6:	bf00      	nop
 80044b8:	e002      	b.n	80044c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ba:	bf00      	nop
 80044bc:	e000      	b.n	80044c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044be:	bf00      	nop
    }

    if(status == HAL_OK)
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10d      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044c6:	4b4a      	ldr	r3, [pc, #296]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6819      	ldr	r1, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	430b      	orrs	r3, r1
 80044dc:	4944      	ldr	r1, [pc, #272]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d17d      	bne.n	80045e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044e8:	4b41      	ldr	r3, [pc, #260]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a40      	ldr	r2, [pc, #256]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f4:	f7fd ff24 	bl	8002340 <HAL_GetTick>
 80044f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044fa:	e009      	b.n	8004510 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044fc:	f7fd ff20 	bl	8002340 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d902      	bls.n	8004510 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	73fb      	strb	r3, [r7, #15]
        break;
 800450e:	e005      	b.n	800451c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004510:	4b37      	ldr	r3, [pc, #220]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ef      	bne.n	80044fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d160      	bne.n	80045e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d111      	bne.n	800454c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004528:	4b31      	ldr	r3, [pc, #196]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6892      	ldr	r2, [r2, #8]
 8004538:	0211      	lsls	r1, r2, #8
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68d2      	ldr	r2, [r2, #12]
 800453e:	0912      	lsrs	r2, r2, #4
 8004540:	0452      	lsls	r2, r2, #17
 8004542:	430a      	orrs	r2, r1
 8004544:	492a      	ldr	r1, [pc, #168]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004546:	4313      	orrs	r3, r2
 8004548:	610b      	str	r3, [r1, #16]
 800454a:	e027      	b.n	800459c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d112      	bne.n	8004578 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004552:	4b27      	ldr	r3, [pc, #156]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800455a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6892      	ldr	r2, [r2, #8]
 8004562:	0211      	lsls	r1, r2, #8
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6912      	ldr	r2, [r2, #16]
 8004568:	0852      	lsrs	r2, r2, #1
 800456a:	3a01      	subs	r2, #1
 800456c:	0552      	lsls	r2, r2, #21
 800456e:	430a      	orrs	r2, r1
 8004570:	491f      	ldr	r1, [pc, #124]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	610b      	str	r3, [r1, #16]
 8004576:	e011      	b.n	800459c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004578:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004580:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6892      	ldr	r2, [r2, #8]
 8004588:	0211      	lsls	r1, r2, #8
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6952      	ldr	r2, [r2, #20]
 800458e:	0852      	lsrs	r2, r2, #1
 8004590:	3a01      	subs	r2, #1
 8004592:	0652      	lsls	r2, r2, #25
 8004594:	430a      	orrs	r2, r1
 8004596:	4916      	ldr	r1, [pc, #88]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004598:	4313      	orrs	r3, r2
 800459a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800459c:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fd feca 	bl	8002340 <HAL_GetTick>
 80045ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045ae:	e009      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045b0:	f7fd fec6 	bl	8002340 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d902      	bls.n	80045c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	73fb      	strb	r3, [r7, #15]
          break;
 80045c2:	e005      	b.n	80045d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ef      	beq.n	80045b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	4904      	ldr	r1, [pc, #16]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000

080045f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004602:	4b6a      	ldr	r3, [pc, #424]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d018      	beq.n	8004640 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800460e:	4b67      	ldr	r3, [pc, #412]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0203 	and.w	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d10d      	bne.n	800463a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
       ||
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004626:	4b61      	ldr	r3, [pc, #388]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
       ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d047      	beq.n	80046ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	e044      	b.n	80046ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d018      	beq.n	800467a <RCCEx_PLLSAI2_Config+0x86>
 8004648:	2b03      	cmp	r3, #3
 800464a:	d825      	bhi.n	8004698 <RCCEx_PLLSAI2_Config+0xa4>
 800464c:	2b01      	cmp	r3, #1
 800464e:	d002      	beq.n	8004656 <RCCEx_PLLSAI2_Config+0x62>
 8004650:	2b02      	cmp	r3, #2
 8004652:	d009      	beq.n	8004668 <RCCEx_PLLSAI2_Config+0x74>
 8004654:	e020      	b.n	8004698 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004656:	4b55      	ldr	r3, [pc, #340]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d11d      	bne.n	800469e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004666:	e01a      	b.n	800469e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004668:	4b50      	ldr	r3, [pc, #320]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d116      	bne.n	80046a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004678:	e013      	b.n	80046a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800467a:	4b4c      	ldr	r3, [pc, #304]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10f      	bne.n	80046a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004686:	4b49      	ldr	r3, [pc, #292]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004696:	e006      	b.n	80046a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
      break;
 800469c:	e004      	b.n	80046a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800469e:	bf00      	nop
 80046a0:	e002      	b.n	80046a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046a2:	bf00      	nop
 80046a4:	e000      	b.n	80046a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ae:	4b3f      	ldr	r3, [pc, #252]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6819      	ldr	r1, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	3b01      	subs	r3, #1
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	430b      	orrs	r3, r1
 80046c4:	4939      	ldr	r1, [pc, #228]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d167      	bne.n	80047a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046d0:	4b36      	ldr	r3, [pc, #216]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a35      	ldr	r2, [pc, #212]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046dc:	f7fd fe30 	bl	8002340 <HAL_GetTick>
 80046e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046e2:	e009      	b.n	80046f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046e4:	f7fd fe2c 	bl	8002340 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d902      	bls.n	80046f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	73fb      	strb	r3, [r7, #15]
        break;
 80046f6:	e005      	b.n	8004704 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046f8:	4b2c      	ldr	r3, [pc, #176]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1ef      	bne.n	80046e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d14a      	bne.n	80047a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d111      	bne.n	8004734 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004710:	4b26      	ldr	r3, [pc, #152]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6892      	ldr	r2, [r2, #8]
 8004720:	0211      	lsls	r1, r2, #8
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68d2      	ldr	r2, [r2, #12]
 8004726:	0912      	lsrs	r2, r2, #4
 8004728:	0452      	lsls	r2, r2, #17
 800472a:	430a      	orrs	r2, r1
 800472c:	491f      	ldr	r1, [pc, #124]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800472e:	4313      	orrs	r3, r2
 8004730:	614b      	str	r3, [r1, #20]
 8004732:	e011      	b.n	8004758 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004734:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800473c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6892      	ldr	r2, [r2, #8]
 8004744:	0211      	lsls	r1, r2, #8
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6912      	ldr	r2, [r2, #16]
 800474a:	0852      	lsrs	r2, r2, #1
 800474c:	3a01      	subs	r2, #1
 800474e:	0652      	lsls	r2, r2, #25
 8004750:	430a      	orrs	r2, r1
 8004752:	4916      	ldr	r1, [pc, #88]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004754:	4313      	orrs	r3, r2
 8004756:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004758:	4b14      	ldr	r3, [pc, #80]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a13      	ldr	r2, [pc, #76]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800475e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004762:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fd fdec 	bl	8002340 <HAL_GetTick>
 8004768:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800476a:	e009      	b.n	8004780 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800476c:	f7fd fde8 	bl	8002340 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d902      	bls.n	8004780 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	73fb      	strb	r3, [r7, #15]
          break;
 800477e:	e005      	b.n	800478c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ef      	beq.n	800476c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004792:	4b06      	ldr	r3, [pc, #24]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	4904      	ldr	r1, [pc, #16]	; (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800479c:	4313      	orrs	r3, r2
 800479e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000

080047b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e040      	b.n	8004844 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fd f866 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2224      	movs	r2, #36	; 0x24
 80047dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fa8c 	bl	8004d0c <UART_SetConfig>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e022      	b.n	8004844 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fd38 	bl	800527c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800481a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800482a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fdbf 	bl	80053c0 <UART_CheckIdleState>
 8004842:	4603      	mov	r3, r0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004860:	2b20      	cmp	r3, #32
 8004862:	f040 8082 	bne.w	800496a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_UART_Transmit+0x26>
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e07a      	b.n	800496c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_UART_Transmit+0x38>
 8004880:	2302      	movs	r3, #2
 8004882:	e073      	b.n	800496c <HAL_UART_Transmit+0x120>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2221      	movs	r2, #33	; 0x21
 8004898:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800489a:	f7fd fd51 	bl	8002340 <HAL_GetTick>
 800489e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	88fa      	ldrh	r2, [r7, #6]
 80048a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	88fa      	ldrh	r2, [r7, #6]
 80048ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b8:	d108      	bne.n	80048cc <HAL_UART_Transmit+0x80>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d104      	bne.n	80048cc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	e003      	b.n	80048d4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80048dc:	e02d      	b.n	800493a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2200      	movs	r2, #0
 80048e6:	2180      	movs	r1, #128	; 0x80
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fdb2 	bl	8005452 <UART_WaitOnFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e039      	b.n	800496c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10b      	bne.n	8004916 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	881a      	ldrh	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800490a:	b292      	uxth	r2, r2
 800490c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	3302      	adds	r3, #2
 8004912:	61bb      	str	r3, [r7, #24]
 8004914:	e008      	b.n	8004928 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	781a      	ldrb	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	b292      	uxth	r2, r2
 8004920:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3301      	adds	r3, #1
 8004926:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1cb      	bne.n	80048de <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2200      	movs	r2, #0
 800494e:	2140      	movs	r1, #64	; 0x40
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 fd7e 	bl	8005452 <UART_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e005      	b.n	800496c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	e000      	b.n	800496c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800496a:	2302      	movs	r3, #2
  }
}
 800496c:	4618      	mov	r0, r3
 800496e:	3720      	adds	r7, #32
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	; 0x28
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	4613      	mov	r3, r2
 8004982:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004988:	2b20      	cmp	r3, #32
 800498a:	f040 80bf 	bne.w	8004b0c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_UART_Receive+0x26>
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e0b7      	b.n	8004b0e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_UART_Receive+0x38>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e0b0      	b.n	8004b0e <HAL_UART_Receive+0x19a>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2222      	movs	r2, #34	; 0x22
 80049c0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049c8:	f7fd fcba 	bl	8002340 <HAL_GetTick>
 80049cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	88fa      	ldrh	r2, [r7, #6]
 80049d2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	88fa      	ldrh	r2, [r7, #6]
 80049da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e6:	d10e      	bne.n	8004a06 <HAL_UART_Receive+0x92>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <HAL_UART_Receive+0x88>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80049f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049fa:	e02d      	b.n	8004a58 <HAL_UART_Receive+0xe4>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	22ff      	movs	r2, #255	; 0xff
 8004a00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a04:	e028      	b.n	8004a58 <HAL_UART_Receive+0xe4>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10d      	bne.n	8004a2a <HAL_UART_Receive+0xb6>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <HAL_UART_Receive+0xac>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	22ff      	movs	r2, #255	; 0xff
 8004a1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a1e:	e01b      	b.n	8004a58 <HAL_UART_Receive+0xe4>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	227f      	movs	r2, #127	; 0x7f
 8004a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a28:	e016      	b.n	8004a58 <HAL_UART_Receive+0xe4>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a32:	d10d      	bne.n	8004a50 <HAL_UART_Receive+0xdc>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d104      	bne.n	8004a46 <HAL_UART_Receive+0xd2>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	227f      	movs	r2, #127	; 0x7f
 8004a40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a44:	e008      	b.n	8004a58 <HAL_UART_Receive+0xe4>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	223f      	movs	r2, #63	; 0x3f
 8004a4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a4e:	e003      	b.n	8004a58 <HAL_UART_Receive+0xe4>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a5e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a68:	d108      	bne.n	8004a7c <HAL_UART_Receive+0x108>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d104      	bne.n	8004a7c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	e003      	b.n	8004a84 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a8c:	e033      	b.n	8004af6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2200      	movs	r2, #0
 8004a96:	2120      	movs	r1, #32
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fcda 	bl	8005452 <UART_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e032      	b.n	8004b0e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10c      	bne.n	8004ac8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	8a7b      	ldrh	r3, [r7, #18]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	3302      	adds	r3, #2
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	e00d      	b.n	8004ae4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	8a7b      	ldrh	r3, [r7, #18]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1c5      	bne.n	8004a8e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2220      	movs	r2, #32
 8004b06:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e000      	b.n	8004b0e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004b0c:	2302      	movs	r3, #2
  }
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3720      	adds	r7, #32
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b0a0      	sub	sp, #128	; 0x80
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004b2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b2e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8004b32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b3e:	667a      	str	r2, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004b42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e6      	bne.n	8004b1e <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3308      	adds	r3, #8
 8004b56:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b70:	657a      	str	r2, [r7, #84]	; 0x54
 8004b72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e5      	bne.n	8004b50 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d118      	bne.n	8004bbe <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	f023 0310 	bic.w	r3, r3, #16
 8004ba0:	677b      	str	r3, [r7, #116]	; 0x74
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004baa:	643b      	str	r3, [r7, #64]	; 0x40
 8004bac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bb2:	e841 2300 	strex	r3, r2, [r1]
 8004bb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1e6      	bne.n	8004b8c <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc8:	2b80      	cmp	r3, #128	; 0x80
 8004bca:	d137      	bne.n	8004c3c <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be2:	673b      	str	r3, [r7, #112]	; 0x70
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3308      	adds	r3, #8
 8004bea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004bec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e5      	bne.n	8004bcc <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d019      	beq.n	8004c3c <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fd fc84 	bl	8002522 <HAL_DMA_Abort>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00d      	beq.n	8004c3c <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fd fcba 	bl	800259e <HAL_DMA_GetError>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d105      	bne.n	8004c3c <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2210      	movs	r2, #16
 8004c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e062      	b.n	8004d02 <HAL_UART_Abort+0x1ec>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d137      	bne.n	8004cba <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3308      	adds	r3, #8
 8004c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3308      	adds	r3, #8
 8004c68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c6a:	61ba      	str	r2, [r7, #24]
 8004c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	6979      	ldr	r1, [r7, #20]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	e841 2300 	strex	r3, r2, [r1]
 8004c76:	613b      	str	r3, [r7, #16]
   return(result);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1e5      	bne.n	8004c4a <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d019      	beq.n	8004cba <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fd fc45 	bl	8002522 <HAL_DMA_Abort>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00d      	beq.n	8004cba <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fd fc7b 	bl	800259e <HAL_DMA_GetError>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d105      	bne.n	8004cba <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2210      	movs	r2, #16
 8004cb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e023      	b.n	8004d02 <HAL_UART_Abort+0x1ec>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	220f      	movs	r2, #15
 8004cd0:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	8b1b      	ldrh	r3, [r3, #24]
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0208 	orr.w	r2, r2, #8
 8004ce2:	b292      	uxth	r2, r2
 8004ce4:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3780      	adds	r7, #128	; 0x80
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d10:	b08a      	sub	sp, #40	; 0x28
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	431a      	orrs	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4ba4      	ldr	r3, [pc, #656]	; (8004fcc <UART_SetConfig+0x2c0>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a99      	ldr	r2, [pc, #612]	; (8004fd0 <UART_SetConfig+0x2c4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d74:	4313      	orrs	r3, r2
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a90      	ldr	r2, [pc, #576]	; (8004fd4 <UART_SetConfig+0x2c8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d126      	bne.n	8004de4 <UART_SetConfig+0xd8>
 8004d96:	4b90      	ldr	r3, [pc, #576]	; (8004fd8 <UART_SetConfig+0x2cc>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d81b      	bhi.n	8004ddc <UART_SetConfig+0xd0>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <UART_SetConfig+0xa0>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004dbd 	.word	0x08004dbd
 8004db0:	08004dcd 	.word	0x08004dcd
 8004db4:	08004dc5 	.word	0x08004dc5
 8004db8:	08004dd5 	.word	0x08004dd5
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc2:	e116      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dca:	e112      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd2:	e10e      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dda:	e10a      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de2:	e106      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a7c      	ldr	r2, [pc, #496]	; (8004fdc <UART_SetConfig+0x2d0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d138      	bne.n	8004e60 <UART_SetConfig+0x154>
 8004dee:	4b7a      	ldr	r3, [pc, #488]	; (8004fd8 <UART_SetConfig+0x2cc>)
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b0c      	cmp	r3, #12
 8004dfa:	d82d      	bhi.n	8004e58 <UART_SetConfig+0x14c>
 8004dfc:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <UART_SetConfig+0xf8>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e39 	.word	0x08004e39
 8004e08:	08004e59 	.word	0x08004e59
 8004e0c:	08004e59 	.word	0x08004e59
 8004e10:	08004e59 	.word	0x08004e59
 8004e14:	08004e49 	.word	0x08004e49
 8004e18:	08004e59 	.word	0x08004e59
 8004e1c:	08004e59 	.word	0x08004e59
 8004e20:	08004e59 	.word	0x08004e59
 8004e24:	08004e41 	.word	0x08004e41
 8004e28:	08004e59 	.word	0x08004e59
 8004e2c:	08004e59 	.word	0x08004e59
 8004e30:	08004e59 	.word	0x08004e59
 8004e34:	08004e51 	.word	0x08004e51
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e0d8      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004e40:	2302      	movs	r3, #2
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e46:	e0d4      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004e48:	2304      	movs	r3, #4
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	e0d0      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004e50:	2308      	movs	r3, #8
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	e0cc      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004e58:	2310      	movs	r3, #16
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5e:	e0c8      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a5e      	ldr	r2, [pc, #376]	; (8004fe0 <UART_SetConfig+0x2d4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d125      	bne.n	8004eb6 <UART_SetConfig+0x1aa>
 8004e6a:	4b5b      	ldr	r3, [pc, #364]	; (8004fd8 <UART_SetConfig+0x2cc>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e74:	2b30      	cmp	r3, #48	; 0x30
 8004e76:	d016      	beq.n	8004ea6 <UART_SetConfig+0x19a>
 8004e78:	2b30      	cmp	r3, #48	; 0x30
 8004e7a:	d818      	bhi.n	8004eae <UART_SetConfig+0x1a2>
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d00a      	beq.n	8004e96 <UART_SetConfig+0x18a>
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d814      	bhi.n	8004eae <UART_SetConfig+0x1a2>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <UART_SetConfig+0x182>
 8004e88:	2b10      	cmp	r3, #16
 8004e8a:	d008      	beq.n	8004e9e <UART_SetConfig+0x192>
 8004e8c:	e00f      	b.n	8004eae <UART_SetConfig+0x1a2>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e94:	e0ad      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004e96:	2302      	movs	r3, #2
 8004e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9c:	e0a9      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004e9e:	2304      	movs	r3, #4
 8004ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea4:	e0a5      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eac:	e0a1      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004eae:	2310      	movs	r3, #16
 8004eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb4:	e09d      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a4a      	ldr	r2, [pc, #296]	; (8004fe4 <UART_SetConfig+0x2d8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d125      	bne.n	8004f0c <UART_SetConfig+0x200>
 8004ec0:	4b45      	ldr	r3, [pc, #276]	; (8004fd8 <UART_SetConfig+0x2cc>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004eca:	2bc0      	cmp	r3, #192	; 0xc0
 8004ecc:	d016      	beq.n	8004efc <UART_SetConfig+0x1f0>
 8004ece:	2bc0      	cmp	r3, #192	; 0xc0
 8004ed0:	d818      	bhi.n	8004f04 <UART_SetConfig+0x1f8>
 8004ed2:	2b80      	cmp	r3, #128	; 0x80
 8004ed4:	d00a      	beq.n	8004eec <UART_SetConfig+0x1e0>
 8004ed6:	2b80      	cmp	r3, #128	; 0x80
 8004ed8:	d814      	bhi.n	8004f04 <UART_SetConfig+0x1f8>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <UART_SetConfig+0x1d8>
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	d008      	beq.n	8004ef4 <UART_SetConfig+0x1e8>
 8004ee2:	e00f      	b.n	8004f04 <UART_SetConfig+0x1f8>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eea:	e082      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004eec:	2302      	movs	r3, #2
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef2:	e07e      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efa:	e07a      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004efc:	2308      	movs	r3, #8
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f02:	e076      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004f04:	2310      	movs	r3, #16
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0a:	e072      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a35      	ldr	r2, [pc, #212]	; (8004fe8 <UART_SetConfig+0x2dc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d12a      	bne.n	8004f6c <UART_SetConfig+0x260>
 8004f16:	4b30      	ldr	r3, [pc, #192]	; (8004fd8 <UART_SetConfig+0x2cc>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f24:	d01a      	beq.n	8004f5c <UART_SetConfig+0x250>
 8004f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f2a:	d81b      	bhi.n	8004f64 <UART_SetConfig+0x258>
 8004f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f30:	d00c      	beq.n	8004f4c <UART_SetConfig+0x240>
 8004f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f36:	d815      	bhi.n	8004f64 <UART_SetConfig+0x258>
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <UART_SetConfig+0x238>
 8004f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f40:	d008      	beq.n	8004f54 <UART_SetConfig+0x248>
 8004f42:	e00f      	b.n	8004f64 <UART_SetConfig+0x258>
 8004f44:	2300      	movs	r3, #0
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4a:	e052      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f52:	e04e      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004f54:	2304      	movs	r3, #4
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5a:	e04a      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004f5c:	2308      	movs	r3, #8
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f62:	e046      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004f64:	2310      	movs	r3, #16
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6a:	e042      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a17      	ldr	r2, [pc, #92]	; (8004fd0 <UART_SetConfig+0x2c4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d13a      	bne.n	8004fec <UART_SetConfig+0x2e0>
 8004f76:	4b18      	ldr	r3, [pc, #96]	; (8004fd8 <UART_SetConfig+0x2cc>)
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f84:	d01a      	beq.n	8004fbc <UART_SetConfig+0x2b0>
 8004f86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f8a:	d81b      	bhi.n	8004fc4 <UART_SetConfig+0x2b8>
 8004f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f90:	d00c      	beq.n	8004fac <UART_SetConfig+0x2a0>
 8004f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f96:	d815      	bhi.n	8004fc4 <UART_SetConfig+0x2b8>
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <UART_SetConfig+0x298>
 8004f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa0:	d008      	beq.n	8004fb4 <UART_SetConfig+0x2a8>
 8004fa2:	e00f      	b.n	8004fc4 <UART_SetConfig+0x2b8>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004faa:	e022      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004fac:	2302      	movs	r3, #2
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb2:	e01e      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fba:	e01a      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004fbc:	2308      	movs	r3, #8
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc2:	e016      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fca:	e012      	b.n	8004ff2 <UART_SetConfig+0x2e6>
 8004fcc:	efff69f3 	.word	0xefff69f3
 8004fd0:	40008000 	.word	0x40008000
 8004fd4:	40013800 	.word	0x40013800
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	40004400 	.word	0x40004400
 8004fe0:	40004800 	.word	0x40004800
 8004fe4:	40004c00 	.word	0x40004c00
 8004fe8:	40005000 	.word	0x40005000
 8004fec:	2310      	movs	r3, #16
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a9f      	ldr	r2, [pc, #636]	; (8005274 <UART_SetConfig+0x568>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d17a      	bne.n	80050f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005000:	2b08      	cmp	r3, #8
 8005002:	d824      	bhi.n	800504e <UART_SetConfig+0x342>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0x300>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	08005031 	.word	0x08005031
 8005010:	0800504f 	.word	0x0800504f
 8005014:	08005039 	.word	0x08005039
 8005018:	0800504f 	.word	0x0800504f
 800501c:	0800503f 	.word	0x0800503f
 8005020:	0800504f 	.word	0x0800504f
 8005024:	0800504f 	.word	0x0800504f
 8005028:	0800504f 	.word	0x0800504f
 800502c:	08005047 	.word	0x08005047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005030:	f7fe fe76 	bl	8003d20 <HAL_RCC_GetPCLK1Freq>
 8005034:	61f8      	str	r0, [r7, #28]
        break;
 8005036:	e010      	b.n	800505a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005038:	4b8f      	ldr	r3, [pc, #572]	; (8005278 <UART_SetConfig+0x56c>)
 800503a:	61fb      	str	r3, [r7, #28]
        break;
 800503c:	e00d      	b.n	800505a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800503e:	f7fe fdd7 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8005042:	61f8      	str	r0, [r7, #28]
        break;
 8005044:	e009      	b.n	800505a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504a:	61fb      	str	r3, [r7, #28]
        break;
 800504c:	e005      	b.n	800505a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005058:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80fb 	beq.w	8005258 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	4413      	add	r3, r2
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	429a      	cmp	r2, r3
 8005070:	d305      	bcc.n	800507e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	429a      	cmp	r2, r3
 800507c:	d903      	bls.n	8005086 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005084:	e0e8      	b.n	8005258 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	2200      	movs	r2, #0
 800508a:	461c      	mov	r4, r3
 800508c:	4615      	mov	r5, r2
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	022b      	lsls	r3, r5, #8
 8005098:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800509c:	0222      	lsls	r2, r4, #8
 800509e:	68f9      	ldr	r1, [r7, #12]
 80050a0:	6849      	ldr	r1, [r1, #4]
 80050a2:	0849      	lsrs	r1, r1, #1
 80050a4:	2000      	movs	r0, #0
 80050a6:	4688      	mov	r8, r1
 80050a8:	4681      	mov	r9, r0
 80050aa:	eb12 0a08 	adds.w	sl, r2, r8
 80050ae:	eb43 0b09 	adc.w	fp, r3, r9
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	603b      	str	r3, [r7, #0]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050c0:	4650      	mov	r0, sl
 80050c2:	4659      	mov	r1, fp
 80050c4:	f7fb fdc0 	bl	8000c48 <__aeabi_uldivmod>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4613      	mov	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d6:	d308      	bcc.n	80050ea <UART_SetConfig+0x3de>
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050de:	d204      	bcs.n	80050ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	60da      	str	r2, [r3, #12]
 80050e8:	e0b6      	b.n	8005258 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050f0:	e0b2      	b.n	8005258 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050fa:	d15e      	bne.n	80051ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80050fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005100:	2b08      	cmp	r3, #8
 8005102:	d828      	bhi.n	8005156 <UART_SetConfig+0x44a>
 8005104:	a201      	add	r2, pc, #4	; (adr r2, 800510c <UART_SetConfig+0x400>)
 8005106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510a:	bf00      	nop
 800510c:	08005131 	.word	0x08005131
 8005110:	08005139 	.word	0x08005139
 8005114:	08005141 	.word	0x08005141
 8005118:	08005157 	.word	0x08005157
 800511c:	08005147 	.word	0x08005147
 8005120:	08005157 	.word	0x08005157
 8005124:	08005157 	.word	0x08005157
 8005128:	08005157 	.word	0x08005157
 800512c:	0800514f 	.word	0x0800514f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005130:	f7fe fdf6 	bl	8003d20 <HAL_RCC_GetPCLK1Freq>
 8005134:	61f8      	str	r0, [r7, #28]
        break;
 8005136:	e014      	b.n	8005162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005138:	f7fe fe08 	bl	8003d4c <HAL_RCC_GetPCLK2Freq>
 800513c:	61f8      	str	r0, [r7, #28]
        break;
 800513e:	e010      	b.n	8005162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005140:	4b4d      	ldr	r3, [pc, #308]	; (8005278 <UART_SetConfig+0x56c>)
 8005142:	61fb      	str	r3, [r7, #28]
        break;
 8005144:	e00d      	b.n	8005162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005146:	f7fe fd53 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 800514a:	61f8      	str	r0, [r7, #28]
        break;
 800514c:	e009      	b.n	8005162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005152:	61fb      	str	r3, [r7, #28]
        break;
 8005154:	e005      	b.n	8005162 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d077      	beq.n	8005258 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	005a      	lsls	r2, r3, #1
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	085b      	lsrs	r3, r3, #1
 8005172:	441a      	add	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	fbb2 f3f3 	udiv	r3, r2, r3
 800517c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b0f      	cmp	r3, #15
 8005182:	d916      	bls.n	80051b2 <UART_SetConfig+0x4a6>
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518a:	d212      	bcs.n	80051b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	b29b      	uxth	r3, r3
 8005190:	f023 030f 	bic.w	r3, r3, #15
 8005194:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	b29b      	uxth	r3, r3
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	8afb      	ldrh	r3, [r7, #22]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	8afa      	ldrh	r2, [r7, #22]
 80051ae:	60da      	str	r2, [r3, #12]
 80051b0:	e052      	b.n	8005258 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051b8:	e04e      	b.n	8005258 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d827      	bhi.n	8005212 <UART_SetConfig+0x506>
 80051c2:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <UART_SetConfig+0x4bc>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	080051ed 	.word	0x080051ed
 80051cc:	080051f5 	.word	0x080051f5
 80051d0:	080051fd 	.word	0x080051fd
 80051d4:	08005213 	.word	0x08005213
 80051d8:	08005203 	.word	0x08005203
 80051dc:	08005213 	.word	0x08005213
 80051e0:	08005213 	.word	0x08005213
 80051e4:	08005213 	.word	0x08005213
 80051e8:	0800520b 	.word	0x0800520b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ec:	f7fe fd98 	bl	8003d20 <HAL_RCC_GetPCLK1Freq>
 80051f0:	61f8      	str	r0, [r7, #28]
        break;
 80051f2:	e014      	b.n	800521e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f4:	f7fe fdaa 	bl	8003d4c <HAL_RCC_GetPCLK2Freq>
 80051f8:	61f8      	str	r0, [r7, #28]
        break;
 80051fa:	e010      	b.n	800521e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051fc:	4b1e      	ldr	r3, [pc, #120]	; (8005278 <UART_SetConfig+0x56c>)
 80051fe:	61fb      	str	r3, [r7, #28]
        break;
 8005200:	e00d      	b.n	800521e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005202:	f7fe fcf5 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8005206:	61f8      	str	r0, [r7, #28]
        break;
 8005208:	e009      	b.n	800521e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520e:	61fb      	str	r3, [r7, #28]
        break;
 8005210:	e005      	b.n	800521e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800521c:	bf00      	nop
    }

    if (pclk != 0U)
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d019      	beq.n	8005258 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	085a      	lsrs	r2, r3, #1
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	441a      	add	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	2b0f      	cmp	r3, #15
 800523c:	d909      	bls.n	8005252 <UART_SetConfig+0x546>
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005244:	d205      	bcs.n	8005252 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60da      	str	r2, [r3, #12]
 8005250:	e002      	b.n	8005258 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005264:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005268:	4618      	mov	r0, r3
 800526a:	3728      	adds	r7, #40	; 0x28
 800526c:	46bd      	mov	sp, r7
 800526e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005272:	bf00      	nop
 8005274:	40008000 	.word	0x40008000
 8005278:	00f42400 	.word	0x00f42400

0800527c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01a      	beq.n	8005392 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800537a:	d10a      	bne.n	8005392 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	605a      	str	r2, [r3, #4]
  }
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053d0:	f7fc ffb6 	bl	8002340 <HAL_GetTick>
 80053d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d10e      	bne.n	8005402 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f82d 	bl	8005452 <UART_WaitOnFlagUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e023      	b.n	800544a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d10e      	bne.n	800542e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f817 	bl	8005452 <UART_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e00d      	b.n	800544a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2220      	movs	r2, #32
 8005438:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b09c      	sub	sp, #112	; 0x70
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	603b      	str	r3, [r7, #0]
 800545e:	4613      	mov	r3, r2
 8005460:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005462:	e0a5      	b.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546a:	f000 80a1 	beq.w	80055b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546e:	f7fc ff67 	bl	8002340 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <UART_WaitOnFlagUntilTimeout+0x32>
 800547e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005480:	2b00      	cmp	r3, #0
 8005482:	d13e      	bne.n	8005502 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005494:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005498:	667b      	str	r3, [r7, #100]	; 0x64
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054aa:	e841 2300 	strex	r3, r2, [r1]
 80054ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1e6      	bne.n	8005484 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3308      	adds	r3, #8
 80054bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	f023 0301 	bic.w	r3, r3, #1
 80054cc:	663b      	str	r3, [r7, #96]	; 0x60
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3308      	adds	r3, #8
 80054d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80054d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e5      	bne.n	80054b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e067      	b.n	80055d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d04f      	beq.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551e:	d147      	bne.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005528:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800553e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
 800554a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800554e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e6      	bne.n	800552a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3308      	adds	r3, #8
 8005562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	613b      	str	r3, [r7, #16]
   return(result);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	66bb      	str	r3, [r7, #104]	; 0x68
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3308      	adds	r3, #8
 800557a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800557c:	623a      	str	r2, [r7, #32]
 800557e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	69f9      	ldr	r1, [r7, #28]
 8005582:	6a3a      	ldr	r2, [r7, #32]
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	61bb      	str	r3, [r7, #24]
   return(result);
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e5      	bne.n	800555c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2220      	movs	r2, #32
 8005594:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2220      	movs	r2, #32
 800559a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e010      	b.n	80055d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69da      	ldr	r2, [r3, #28]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4013      	ands	r3, r2
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	429a      	cmp	r2, r3
 80055be:	bf0c      	ite	eq
 80055c0:	2301      	moveq	r3, #1
 80055c2:	2300      	movne	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	f43f af4a 	beq.w	8005464 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3770      	adds	r7, #112	; 0x70
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <__errno>:
 80055dc:	4b01      	ldr	r3, [pc, #4]	; (80055e4 <__errno+0x8>)
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	2000005c 	.word	0x2000005c

080055e8 <__libc_init_array>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	4d0d      	ldr	r5, [pc, #52]	; (8005620 <__libc_init_array+0x38>)
 80055ec:	4c0d      	ldr	r4, [pc, #52]	; (8005624 <__libc_init_array+0x3c>)
 80055ee:	1b64      	subs	r4, r4, r5
 80055f0:	10a4      	asrs	r4, r4, #2
 80055f2:	2600      	movs	r6, #0
 80055f4:	42a6      	cmp	r6, r4
 80055f6:	d109      	bne.n	800560c <__libc_init_array+0x24>
 80055f8:	4d0b      	ldr	r5, [pc, #44]	; (8005628 <__libc_init_array+0x40>)
 80055fa:	4c0c      	ldr	r4, [pc, #48]	; (800562c <__libc_init_array+0x44>)
 80055fc:	f004 fe6a 	bl	800a2d4 <_init>
 8005600:	1b64      	subs	r4, r4, r5
 8005602:	10a4      	asrs	r4, r4, #2
 8005604:	2600      	movs	r6, #0
 8005606:	42a6      	cmp	r6, r4
 8005608:	d105      	bne.n	8005616 <__libc_init_array+0x2e>
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005610:	4798      	blx	r3
 8005612:	3601      	adds	r6, #1
 8005614:	e7ee      	b.n	80055f4 <__libc_init_array+0xc>
 8005616:	f855 3b04 	ldr.w	r3, [r5], #4
 800561a:	4798      	blx	r3
 800561c:	3601      	adds	r6, #1
 800561e:	e7f2      	b.n	8005606 <__libc_init_array+0x1e>
 8005620:	0800bef0 	.word	0x0800bef0
 8005624:	0800bef0 	.word	0x0800bef0
 8005628:	0800bef0 	.word	0x0800bef0
 800562c:	0800bef4 	.word	0x0800bef4

08005630 <memcpy>:
 8005630:	440a      	add	r2, r1
 8005632:	4291      	cmp	r1, r2
 8005634:	f100 33ff 	add.w	r3, r0, #4294967295
 8005638:	d100      	bne.n	800563c <memcpy+0xc>
 800563a:	4770      	bx	lr
 800563c:	b510      	push	{r4, lr}
 800563e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005646:	4291      	cmp	r1, r2
 8005648:	d1f9      	bne.n	800563e <memcpy+0xe>
 800564a:	bd10      	pop	{r4, pc}

0800564c <memset>:
 800564c:	4402      	add	r2, r0
 800564e:	4603      	mov	r3, r0
 8005650:	4293      	cmp	r3, r2
 8005652:	d100      	bne.n	8005656 <memset+0xa>
 8005654:	4770      	bx	lr
 8005656:	f803 1b01 	strb.w	r1, [r3], #1
 800565a:	e7f9      	b.n	8005650 <memset+0x4>

0800565c <__cvt>:
 800565c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005660:	ec55 4b10 	vmov	r4, r5, d0
 8005664:	2d00      	cmp	r5, #0
 8005666:	460e      	mov	r6, r1
 8005668:	4619      	mov	r1, r3
 800566a:	462b      	mov	r3, r5
 800566c:	bfbb      	ittet	lt
 800566e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005672:	461d      	movlt	r5, r3
 8005674:	2300      	movge	r3, #0
 8005676:	232d      	movlt	r3, #45	; 0x2d
 8005678:	700b      	strb	r3, [r1, #0]
 800567a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800567c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005680:	4691      	mov	r9, r2
 8005682:	f023 0820 	bic.w	r8, r3, #32
 8005686:	bfbc      	itt	lt
 8005688:	4622      	movlt	r2, r4
 800568a:	4614      	movlt	r4, r2
 800568c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005690:	d005      	beq.n	800569e <__cvt+0x42>
 8005692:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005696:	d100      	bne.n	800569a <__cvt+0x3e>
 8005698:	3601      	adds	r6, #1
 800569a:	2102      	movs	r1, #2
 800569c:	e000      	b.n	80056a0 <__cvt+0x44>
 800569e:	2103      	movs	r1, #3
 80056a0:	ab03      	add	r3, sp, #12
 80056a2:	9301      	str	r3, [sp, #4]
 80056a4:	ab02      	add	r3, sp, #8
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	ec45 4b10 	vmov	d0, r4, r5
 80056ac:	4653      	mov	r3, sl
 80056ae:	4632      	mov	r2, r6
 80056b0:	f000 fe3a 	bl	8006328 <_dtoa_r>
 80056b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056b8:	4607      	mov	r7, r0
 80056ba:	d102      	bne.n	80056c2 <__cvt+0x66>
 80056bc:	f019 0f01 	tst.w	r9, #1
 80056c0:	d022      	beq.n	8005708 <__cvt+0xac>
 80056c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056c6:	eb07 0906 	add.w	r9, r7, r6
 80056ca:	d110      	bne.n	80056ee <__cvt+0x92>
 80056cc:	783b      	ldrb	r3, [r7, #0]
 80056ce:	2b30      	cmp	r3, #48	; 0x30
 80056d0:	d10a      	bne.n	80056e8 <__cvt+0x8c>
 80056d2:	2200      	movs	r2, #0
 80056d4:	2300      	movs	r3, #0
 80056d6:	4620      	mov	r0, r4
 80056d8:	4629      	mov	r1, r5
 80056da:	f7fb f9f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80056de:	b918      	cbnz	r0, 80056e8 <__cvt+0x8c>
 80056e0:	f1c6 0601 	rsb	r6, r6, #1
 80056e4:	f8ca 6000 	str.w	r6, [sl]
 80056e8:	f8da 3000 	ldr.w	r3, [sl]
 80056ec:	4499      	add	r9, r3
 80056ee:	2200      	movs	r2, #0
 80056f0:	2300      	movs	r3, #0
 80056f2:	4620      	mov	r0, r4
 80056f4:	4629      	mov	r1, r5
 80056f6:	f7fb f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80056fa:	b108      	cbz	r0, 8005700 <__cvt+0xa4>
 80056fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005700:	2230      	movs	r2, #48	; 0x30
 8005702:	9b03      	ldr	r3, [sp, #12]
 8005704:	454b      	cmp	r3, r9
 8005706:	d307      	bcc.n	8005718 <__cvt+0xbc>
 8005708:	9b03      	ldr	r3, [sp, #12]
 800570a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800570c:	1bdb      	subs	r3, r3, r7
 800570e:	4638      	mov	r0, r7
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	b004      	add	sp, #16
 8005714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005718:	1c59      	adds	r1, r3, #1
 800571a:	9103      	str	r1, [sp, #12]
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	e7f0      	b.n	8005702 <__cvt+0xa6>

08005720 <__exponent>:
 8005720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005722:	4603      	mov	r3, r0
 8005724:	2900      	cmp	r1, #0
 8005726:	bfb8      	it	lt
 8005728:	4249      	neglt	r1, r1
 800572a:	f803 2b02 	strb.w	r2, [r3], #2
 800572e:	bfb4      	ite	lt
 8005730:	222d      	movlt	r2, #45	; 0x2d
 8005732:	222b      	movge	r2, #43	; 0x2b
 8005734:	2909      	cmp	r1, #9
 8005736:	7042      	strb	r2, [r0, #1]
 8005738:	dd2a      	ble.n	8005790 <__exponent+0x70>
 800573a:	f10d 0407 	add.w	r4, sp, #7
 800573e:	46a4      	mov	ip, r4
 8005740:	270a      	movs	r7, #10
 8005742:	46a6      	mov	lr, r4
 8005744:	460a      	mov	r2, r1
 8005746:	fb91 f6f7 	sdiv	r6, r1, r7
 800574a:	fb07 1516 	mls	r5, r7, r6, r1
 800574e:	3530      	adds	r5, #48	; 0x30
 8005750:	2a63      	cmp	r2, #99	; 0x63
 8005752:	f104 34ff 	add.w	r4, r4, #4294967295
 8005756:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800575a:	4631      	mov	r1, r6
 800575c:	dcf1      	bgt.n	8005742 <__exponent+0x22>
 800575e:	3130      	adds	r1, #48	; 0x30
 8005760:	f1ae 0502 	sub.w	r5, lr, #2
 8005764:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005768:	1c44      	adds	r4, r0, #1
 800576a:	4629      	mov	r1, r5
 800576c:	4561      	cmp	r1, ip
 800576e:	d30a      	bcc.n	8005786 <__exponent+0x66>
 8005770:	f10d 0209 	add.w	r2, sp, #9
 8005774:	eba2 020e 	sub.w	r2, r2, lr
 8005778:	4565      	cmp	r5, ip
 800577a:	bf88      	it	hi
 800577c:	2200      	movhi	r2, #0
 800577e:	4413      	add	r3, r2
 8005780:	1a18      	subs	r0, r3, r0
 8005782:	b003      	add	sp, #12
 8005784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005786:	f811 2b01 	ldrb.w	r2, [r1], #1
 800578a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800578e:	e7ed      	b.n	800576c <__exponent+0x4c>
 8005790:	2330      	movs	r3, #48	; 0x30
 8005792:	3130      	adds	r1, #48	; 0x30
 8005794:	7083      	strb	r3, [r0, #2]
 8005796:	70c1      	strb	r1, [r0, #3]
 8005798:	1d03      	adds	r3, r0, #4
 800579a:	e7f1      	b.n	8005780 <__exponent+0x60>

0800579c <_printf_float>:
 800579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	ed2d 8b02 	vpush	{d8}
 80057a4:	b08d      	sub	sp, #52	; 0x34
 80057a6:	460c      	mov	r4, r1
 80057a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80057ac:	4616      	mov	r6, r2
 80057ae:	461f      	mov	r7, r3
 80057b0:	4605      	mov	r5, r0
 80057b2:	f001 fd5f 	bl	8007274 <_localeconv_r>
 80057b6:	f8d0 a000 	ldr.w	sl, [r0]
 80057ba:	4650      	mov	r0, sl
 80057bc:	f7fa fd08 	bl	80001d0 <strlen>
 80057c0:	2300      	movs	r3, #0
 80057c2:	930a      	str	r3, [sp, #40]	; 0x28
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	9305      	str	r3, [sp, #20]
 80057c8:	f8d8 3000 	ldr.w	r3, [r8]
 80057cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80057d0:	3307      	adds	r3, #7
 80057d2:	f023 0307 	bic.w	r3, r3, #7
 80057d6:	f103 0208 	add.w	r2, r3, #8
 80057da:	f8c8 2000 	str.w	r2, [r8]
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80057ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057ee:	9307      	str	r3, [sp, #28]
 80057f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80057f4:	ee08 0a10 	vmov	s16, r0
 80057f8:	4b9f      	ldr	r3, [pc, #636]	; (8005a78 <_printf_float+0x2dc>)
 80057fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005802:	f7fb f993 	bl	8000b2c <__aeabi_dcmpun>
 8005806:	bb88      	cbnz	r0, 800586c <_printf_float+0xd0>
 8005808:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800580c:	4b9a      	ldr	r3, [pc, #616]	; (8005a78 <_printf_float+0x2dc>)
 800580e:	f04f 32ff 	mov.w	r2, #4294967295
 8005812:	f7fb f96d 	bl	8000af0 <__aeabi_dcmple>
 8005816:	bb48      	cbnz	r0, 800586c <_printf_float+0xd0>
 8005818:	2200      	movs	r2, #0
 800581a:	2300      	movs	r3, #0
 800581c:	4640      	mov	r0, r8
 800581e:	4649      	mov	r1, r9
 8005820:	f7fb f95c 	bl	8000adc <__aeabi_dcmplt>
 8005824:	b110      	cbz	r0, 800582c <_printf_float+0x90>
 8005826:	232d      	movs	r3, #45	; 0x2d
 8005828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800582c:	4b93      	ldr	r3, [pc, #588]	; (8005a7c <_printf_float+0x2e0>)
 800582e:	4894      	ldr	r0, [pc, #592]	; (8005a80 <_printf_float+0x2e4>)
 8005830:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005834:	bf94      	ite	ls
 8005836:	4698      	movls	r8, r3
 8005838:	4680      	movhi	r8, r0
 800583a:	2303      	movs	r3, #3
 800583c:	6123      	str	r3, [r4, #16]
 800583e:	9b05      	ldr	r3, [sp, #20]
 8005840:	f023 0204 	bic.w	r2, r3, #4
 8005844:	6022      	str	r2, [r4, #0]
 8005846:	f04f 0900 	mov.w	r9, #0
 800584a:	9700      	str	r7, [sp, #0]
 800584c:	4633      	mov	r3, r6
 800584e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005850:	4621      	mov	r1, r4
 8005852:	4628      	mov	r0, r5
 8005854:	f000 f9d8 	bl	8005c08 <_printf_common>
 8005858:	3001      	adds	r0, #1
 800585a:	f040 8090 	bne.w	800597e <_printf_float+0x1e2>
 800585e:	f04f 30ff 	mov.w	r0, #4294967295
 8005862:	b00d      	add	sp, #52	; 0x34
 8005864:	ecbd 8b02 	vpop	{d8}
 8005868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800586c:	4642      	mov	r2, r8
 800586e:	464b      	mov	r3, r9
 8005870:	4640      	mov	r0, r8
 8005872:	4649      	mov	r1, r9
 8005874:	f7fb f95a 	bl	8000b2c <__aeabi_dcmpun>
 8005878:	b140      	cbz	r0, 800588c <_printf_float+0xf0>
 800587a:	464b      	mov	r3, r9
 800587c:	2b00      	cmp	r3, #0
 800587e:	bfbc      	itt	lt
 8005880:	232d      	movlt	r3, #45	; 0x2d
 8005882:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005886:	487f      	ldr	r0, [pc, #508]	; (8005a84 <_printf_float+0x2e8>)
 8005888:	4b7f      	ldr	r3, [pc, #508]	; (8005a88 <_printf_float+0x2ec>)
 800588a:	e7d1      	b.n	8005830 <_printf_float+0x94>
 800588c:	6863      	ldr	r3, [r4, #4]
 800588e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005892:	9206      	str	r2, [sp, #24]
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	d13f      	bne.n	8005918 <_printf_float+0x17c>
 8005898:	2306      	movs	r3, #6
 800589a:	6063      	str	r3, [r4, #4]
 800589c:	9b05      	ldr	r3, [sp, #20]
 800589e:	6861      	ldr	r1, [r4, #4]
 80058a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058a4:	2300      	movs	r3, #0
 80058a6:	9303      	str	r3, [sp, #12]
 80058a8:	ab0a      	add	r3, sp, #40	; 0x28
 80058aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80058ae:	ab09      	add	r3, sp, #36	; 0x24
 80058b0:	ec49 8b10 	vmov	d0, r8, r9
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	6022      	str	r2, [r4, #0]
 80058b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058bc:	4628      	mov	r0, r5
 80058be:	f7ff fecd 	bl	800565c <__cvt>
 80058c2:	9b06      	ldr	r3, [sp, #24]
 80058c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058c6:	2b47      	cmp	r3, #71	; 0x47
 80058c8:	4680      	mov	r8, r0
 80058ca:	d108      	bne.n	80058de <_printf_float+0x142>
 80058cc:	1cc8      	adds	r0, r1, #3
 80058ce:	db02      	blt.n	80058d6 <_printf_float+0x13a>
 80058d0:	6863      	ldr	r3, [r4, #4]
 80058d2:	4299      	cmp	r1, r3
 80058d4:	dd41      	ble.n	800595a <_printf_float+0x1be>
 80058d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80058da:	fa5f fb8b 	uxtb.w	fp, fp
 80058de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058e2:	d820      	bhi.n	8005926 <_printf_float+0x18a>
 80058e4:	3901      	subs	r1, #1
 80058e6:	465a      	mov	r2, fp
 80058e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058ec:	9109      	str	r1, [sp, #36]	; 0x24
 80058ee:	f7ff ff17 	bl	8005720 <__exponent>
 80058f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058f4:	1813      	adds	r3, r2, r0
 80058f6:	2a01      	cmp	r2, #1
 80058f8:	4681      	mov	r9, r0
 80058fa:	6123      	str	r3, [r4, #16]
 80058fc:	dc02      	bgt.n	8005904 <_printf_float+0x168>
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	07d2      	lsls	r2, r2, #31
 8005902:	d501      	bpl.n	8005908 <_printf_float+0x16c>
 8005904:	3301      	adds	r3, #1
 8005906:	6123      	str	r3, [r4, #16]
 8005908:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800590c:	2b00      	cmp	r3, #0
 800590e:	d09c      	beq.n	800584a <_printf_float+0xae>
 8005910:	232d      	movs	r3, #45	; 0x2d
 8005912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005916:	e798      	b.n	800584a <_printf_float+0xae>
 8005918:	9a06      	ldr	r2, [sp, #24]
 800591a:	2a47      	cmp	r2, #71	; 0x47
 800591c:	d1be      	bne.n	800589c <_printf_float+0x100>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1bc      	bne.n	800589c <_printf_float+0x100>
 8005922:	2301      	movs	r3, #1
 8005924:	e7b9      	b.n	800589a <_printf_float+0xfe>
 8005926:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800592a:	d118      	bne.n	800595e <_printf_float+0x1c2>
 800592c:	2900      	cmp	r1, #0
 800592e:	6863      	ldr	r3, [r4, #4]
 8005930:	dd0b      	ble.n	800594a <_printf_float+0x1ae>
 8005932:	6121      	str	r1, [r4, #16]
 8005934:	b913      	cbnz	r3, 800593c <_printf_float+0x1a0>
 8005936:	6822      	ldr	r2, [r4, #0]
 8005938:	07d0      	lsls	r0, r2, #31
 800593a:	d502      	bpl.n	8005942 <_printf_float+0x1a6>
 800593c:	3301      	adds	r3, #1
 800593e:	440b      	add	r3, r1
 8005940:	6123      	str	r3, [r4, #16]
 8005942:	65a1      	str	r1, [r4, #88]	; 0x58
 8005944:	f04f 0900 	mov.w	r9, #0
 8005948:	e7de      	b.n	8005908 <_printf_float+0x16c>
 800594a:	b913      	cbnz	r3, 8005952 <_printf_float+0x1b6>
 800594c:	6822      	ldr	r2, [r4, #0]
 800594e:	07d2      	lsls	r2, r2, #31
 8005950:	d501      	bpl.n	8005956 <_printf_float+0x1ba>
 8005952:	3302      	adds	r3, #2
 8005954:	e7f4      	b.n	8005940 <_printf_float+0x1a4>
 8005956:	2301      	movs	r3, #1
 8005958:	e7f2      	b.n	8005940 <_printf_float+0x1a4>
 800595a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800595e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005960:	4299      	cmp	r1, r3
 8005962:	db05      	blt.n	8005970 <_printf_float+0x1d4>
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	6121      	str	r1, [r4, #16]
 8005968:	07d8      	lsls	r0, r3, #31
 800596a:	d5ea      	bpl.n	8005942 <_printf_float+0x1a6>
 800596c:	1c4b      	adds	r3, r1, #1
 800596e:	e7e7      	b.n	8005940 <_printf_float+0x1a4>
 8005970:	2900      	cmp	r1, #0
 8005972:	bfd4      	ite	le
 8005974:	f1c1 0202 	rsble	r2, r1, #2
 8005978:	2201      	movgt	r2, #1
 800597a:	4413      	add	r3, r2
 800597c:	e7e0      	b.n	8005940 <_printf_float+0x1a4>
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	055a      	lsls	r2, r3, #21
 8005982:	d407      	bmi.n	8005994 <_printf_float+0x1f8>
 8005984:	6923      	ldr	r3, [r4, #16]
 8005986:	4642      	mov	r2, r8
 8005988:	4631      	mov	r1, r6
 800598a:	4628      	mov	r0, r5
 800598c:	47b8      	blx	r7
 800598e:	3001      	adds	r0, #1
 8005990:	d12c      	bne.n	80059ec <_printf_float+0x250>
 8005992:	e764      	b.n	800585e <_printf_float+0xc2>
 8005994:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005998:	f240 80e0 	bls.w	8005b5c <_printf_float+0x3c0>
 800599c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059a0:	2200      	movs	r2, #0
 80059a2:	2300      	movs	r3, #0
 80059a4:	f7fb f890 	bl	8000ac8 <__aeabi_dcmpeq>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d034      	beq.n	8005a16 <_printf_float+0x27a>
 80059ac:	4a37      	ldr	r2, [pc, #220]	; (8005a8c <_printf_float+0x2f0>)
 80059ae:	2301      	movs	r3, #1
 80059b0:	4631      	mov	r1, r6
 80059b2:	4628      	mov	r0, r5
 80059b4:	47b8      	blx	r7
 80059b6:	3001      	adds	r0, #1
 80059b8:	f43f af51 	beq.w	800585e <_printf_float+0xc2>
 80059bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059c0:	429a      	cmp	r2, r3
 80059c2:	db02      	blt.n	80059ca <_printf_float+0x22e>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	07d8      	lsls	r0, r3, #31
 80059c8:	d510      	bpl.n	80059ec <_printf_float+0x250>
 80059ca:	ee18 3a10 	vmov	r3, s16
 80059ce:	4652      	mov	r2, sl
 80059d0:	4631      	mov	r1, r6
 80059d2:	4628      	mov	r0, r5
 80059d4:	47b8      	blx	r7
 80059d6:	3001      	adds	r0, #1
 80059d8:	f43f af41 	beq.w	800585e <_printf_float+0xc2>
 80059dc:	f04f 0800 	mov.w	r8, #0
 80059e0:	f104 091a 	add.w	r9, r4, #26
 80059e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059e6:	3b01      	subs	r3, #1
 80059e8:	4543      	cmp	r3, r8
 80059ea:	dc09      	bgt.n	8005a00 <_printf_float+0x264>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	079b      	lsls	r3, r3, #30
 80059f0:	f100 8105 	bmi.w	8005bfe <_printf_float+0x462>
 80059f4:	68e0      	ldr	r0, [r4, #12]
 80059f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059f8:	4298      	cmp	r0, r3
 80059fa:	bfb8      	it	lt
 80059fc:	4618      	movlt	r0, r3
 80059fe:	e730      	b.n	8005862 <_printf_float+0xc6>
 8005a00:	2301      	movs	r3, #1
 8005a02:	464a      	mov	r2, r9
 8005a04:	4631      	mov	r1, r6
 8005a06:	4628      	mov	r0, r5
 8005a08:	47b8      	blx	r7
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	f43f af27 	beq.w	800585e <_printf_float+0xc2>
 8005a10:	f108 0801 	add.w	r8, r8, #1
 8005a14:	e7e6      	b.n	80059e4 <_printf_float+0x248>
 8005a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	dc39      	bgt.n	8005a90 <_printf_float+0x2f4>
 8005a1c:	4a1b      	ldr	r2, [pc, #108]	; (8005a8c <_printf_float+0x2f0>)
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4631      	mov	r1, r6
 8005a22:	4628      	mov	r0, r5
 8005a24:	47b8      	blx	r7
 8005a26:	3001      	adds	r0, #1
 8005a28:	f43f af19 	beq.w	800585e <_printf_float+0xc2>
 8005a2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a30:	4313      	orrs	r3, r2
 8005a32:	d102      	bne.n	8005a3a <_printf_float+0x29e>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	07d9      	lsls	r1, r3, #31
 8005a38:	d5d8      	bpl.n	80059ec <_printf_float+0x250>
 8005a3a:	ee18 3a10 	vmov	r3, s16
 8005a3e:	4652      	mov	r2, sl
 8005a40:	4631      	mov	r1, r6
 8005a42:	4628      	mov	r0, r5
 8005a44:	47b8      	blx	r7
 8005a46:	3001      	adds	r0, #1
 8005a48:	f43f af09 	beq.w	800585e <_printf_float+0xc2>
 8005a4c:	f04f 0900 	mov.w	r9, #0
 8005a50:	f104 0a1a 	add.w	sl, r4, #26
 8005a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a56:	425b      	negs	r3, r3
 8005a58:	454b      	cmp	r3, r9
 8005a5a:	dc01      	bgt.n	8005a60 <_printf_float+0x2c4>
 8005a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a5e:	e792      	b.n	8005986 <_printf_float+0x1ea>
 8005a60:	2301      	movs	r3, #1
 8005a62:	4652      	mov	r2, sl
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	47b8      	blx	r7
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f43f aef7 	beq.w	800585e <_printf_float+0xc2>
 8005a70:	f109 0901 	add.w	r9, r9, #1
 8005a74:	e7ee      	b.n	8005a54 <_printf_float+0x2b8>
 8005a76:	bf00      	nop
 8005a78:	7fefffff 	.word	0x7fefffff
 8005a7c:	0800b904 	.word	0x0800b904
 8005a80:	0800b908 	.word	0x0800b908
 8005a84:	0800b910 	.word	0x0800b910
 8005a88:	0800b90c 	.word	0x0800b90c
 8005a8c:	0800b914 	.word	0x0800b914
 8005a90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a94:	429a      	cmp	r2, r3
 8005a96:	bfa8      	it	ge
 8005a98:	461a      	movge	r2, r3
 8005a9a:	2a00      	cmp	r2, #0
 8005a9c:	4691      	mov	r9, r2
 8005a9e:	dc37      	bgt.n	8005b10 <_printf_float+0x374>
 8005aa0:	f04f 0b00 	mov.w	fp, #0
 8005aa4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aa8:	f104 021a 	add.w	r2, r4, #26
 8005aac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005aae:	9305      	str	r3, [sp, #20]
 8005ab0:	eba3 0309 	sub.w	r3, r3, r9
 8005ab4:	455b      	cmp	r3, fp
 8005ab6:	dc33      	bgt.n	8005b20 <_printf_float+0x384>
 8005ab8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005abc:	429a      	cmp	r2, r3
 8005abe:	db3b      	blt.n	8005b38 <_printf_float+0x39c>
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	07da      	lsls	r2, r3, #31
 8005ac4:	d438      	bmi.n	8005b38 <_printf_float+0x39c>
 8005ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac8:	9a05      	ldr	r2, [sp, #20]
 8005aca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005acc:	1a9a      	subs	r2, r3, r2
 8005ace:	eba3 0901 	sub.w	r9, r3, r1
 8005ad2:	4591      	cmp	r9, r2
 8005ad4:	bfa8      	it	ge
 8005ad6:	4691      	movge	r9, r2
 8005ad8:	f1b9 0f00 	cmp.w	r9, #0
 8005adc:	dc35      	bgt.n	8005b4a <_printf_float+0x3ae>
 8005ade:	f04f 0800 	mov.w	r8, #0
 8005ae2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ae6:	f104 0a1a 	add.w	sl, r4, #26
 8005aea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	eba3 0309 	sub.w	r3, r3, r9
 8005af4:	4543      	cmp	r3, r8
 8005af6:	f77f af79 	ble.w	80059ec <_printf_float+0x250>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4652      	mov	r2, sl
 8005afe:	4631      	mov	r1, r6
 8005b00:	4628      	mov	r0, r5
 8005b02:	47b8      	blx	r7
 8005b04:	3001      	adds	r0, #1
 8005b06:	f43f aeaa 	beq.w	800585e <_printf_float+0xc2>
 8005b0a:	f108 0801 	add.w	r8, r8, #1
 8005b0e:	e7ec      	b.n	8005aea <_printf_float+0x34e>
 8005b10:	4613      	mov	r3, r2
 8005b12:	4631      	mov	r1, r6
 8005b14:	4642      	mov	r2, r8
 8005b16:	4628      	mov	r0, r5
 8005b18:	47b8      	blx	r7
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	d1c0      	bne.n	8005aa0 <_printf_float+0x304>
 8005b1e:	e69e      	b.n	800585e <_printf_float+0xc2>
 8005b20:	2301      	movs	r3, #1
 8005b22:	4631      	mov	r1, r6
 8005b24:	4628      	mov	r0, r5
 8005b26:	9205      	str	r2, [sp, #20]
 8005b28:	47b8      	blx	r7
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	f43f ae97 	beq.w	800585e <_printf_float+0xc2>
 8005b30:	9a05      	ldr	r2, [sp, #20]
 8005b32:	f10b 0b01 	add.w	fp, fp, #1
 8005b36:	e7b9      	b.n	8005aac <_printf_float+0x310>
 8005b38:	ee18 3a10 	vmov	r3, s16
 8005b3c:	4652      	mov	r2, sl
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b8      	blx	r7
 8005b44:	3001      	adds	r0, #1
 8005b46:	d1be      	bne.n	8005ac6 <_printf_float+0x32a>
 8005b48:	e689      	b.n	800585e <_printf_float+0xc2>
 8005b4a:	9a05      	ldr	r2, [sp, #20]
 8005b4c:	464b      	mov	r3, r9
 8005b4e:	4442      	add	r2, r8
 8005b50:	4631      	mov	r1, r6
 8005b52:	4628      	mov	r0, r5
 8005b54:	47b8      	blx	r7
 8005b56:	3001      	adds	r0, #1
 8005b58:	d1c1      	bne.n	8005ade <_printf_float+0x342>
 8005b5a:	e680      	b.n	800585e <_printf_float+0xc2>
 8005b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b5e:	2a01      	cmp	r2, #1
 8005b60:	dc01      	bgt.n	8005b66 <_printf_float+0x3ca>
 8005b62:	07db      	lsls	r3, r3, #31
 8005b64:	d538      	bpl.n	8005bd8 <_printf_float+0x43c>
 8005b66:	2301      	movs	r3, #1
 8005b68:	4642      	mov	r2, r8
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	47b8      	blx	r7
 8005b70:	3001      	adds	r0, #1
 8005b72:	f43f ae74 	beq.w	800585e <_printf_float+0xc2>
 8005b76:	ee18 3a10 	vmov	r3, s16
 8005b7a:	4652      	mov	r2, sl
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b8      	blx	r7
 8005b82:	3001      	adds	r0, #1
 8005b84:	f43f ae6b 	beq.w	800585e <_printf_float+0xc2>
 8005b88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f7fa ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b94:	b9d8      	cbnz	r0, 8005bce <_printf_float+0x432>
 8005b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b98:	f108 0201 	add.w	r2, r8, #1
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b8      	blx	r7
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d10e      	bne.n	8005bc6 <_printf_float+0x42a>
 8005ba8:	e659      	b.n	800585e <_printf_float+0xc2>
 8005baa:	2301      	movs	r3, #1
 8005bac:	4652      	mov	r2, sl
 8005bae:	4631      	mov	r1, r6
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f43f ae52 	beq.w	800585e <_printf_float+0xc2>
 8005bba:	f108 0801 	add.w	r8, r8, #1
 8005bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	4543      	cmp	r3, r8
 8005bc4:	dcf1      	bgt.n	8005baa <_printf_float+0x40e>
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bcc:	e6dc      	b.n	8005988 <_printf_float+0x1ec>
 8005bce:	f04f 0800 	mov.w	r8, #0
 8005bd2:	f104 0a1a 	add.w	sl, r4, #26
 8005bd6:	e7f2      	b.n	8005bbe <_printf_float+0x422>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	4642      	mov	r2, r8
 8005bdc:	e7df      	b.n	8005b9e <_printf_float+0x402>
 8005bde:	2301      	movs	r3, #1
 8005be0:	464a      	mov	r2, r9
 8005be2:	4631      	mov	r1, r6
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b8      	blx	r7
 8005be8:	3001      	adds	r0, #1
 8005bea:	f43f ae38 	beq.w	800585e <_printf_float+0xc2>
 8005bee:	f108 0801 	add.w	r8, r8, #1
 8005bf2:	68e3      	ldr	r3, [r4, #12]
 8005bf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bf6:	1a5b      	subs	r3, r3, r1
 8005bf8:	4543      	cmp	r3, r8
 8005bfa:	dcf0      	bgt.n	8005bde <_printf_float+0x442>
 8005bfc:	e6fa      	b.n	80059f4 <_printf_float+0x258>
 8005bfe:	f04f 0800 	mov.w	r8, #0
 8005c02:	f104 0919 	add.w	r9, r4, #25
 8005c06:	e7f4      	b.n	8005bf2 <_printf_float+0x456>

08005c08 <_printf_common>:
 8005c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	4699      	mov	r9, r3
 8005c10:	688a      	ldr	r2, [r1, #8]
 8005c12:	690b      	ldr	r3, [r1, #16]
 8005c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	bfb8      	it	lt
 8005c1c:	4613      	movlt	r3, r2
 8005c1e:	6033      	str	r3, [r6, #0]
 8005c20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c24:	4607      	mov	r7, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	b10a      	cbz	r2, 8005c2e <_printf_common+0x26>
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	6033      	str	r3, [r6, #0]
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	0699      	lsls	r1, r3, #26
 8005c32:	bf42      	ittt	mi
 8005c34:	6833      	ldrmi	r3, [r6, #0]
 8005c36:	3302      	addmi	r3, #2
 8005c38:	6033      	strmi	r3, [r6, #0]
 8005c3a:	6825      	ldr	r5, [r4, #0]
 8005c3c:	f015 0506 	ands.w	r5, r5, #6
 8005c40:	d106      	bne.n	8005c50 <_printf_common+0x48>
 8005c42:	f104 0a19 	add.w	sl, r4, #25
 8005c46:	68e3      	ldr	r3, [r4, #12]
 8005c48:	6832      	ldr	r2, [r6, #0]
 8005c4a:	1a9b      	subs	r3, r3, r2
 8005c4c:	42ab      	cmp	r3, r5
 8005c4e:	dc26      	bgt.n	8005c9e <_printf_common+0x96>
 8005c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c54:	1e13      	subs	r3, r2, #0
 8005c56:	6822      	ldr	r2, [r4, #0]
 8005c58:	bf18      	it	ne
 8005c5a:	2301      	movne	r3, #1
 8005c5c:	0692      	lsls	r2, r2, #26
 8005c5e:	d42b      	bmi.n	8005cb8 <_printf_common+0xb0>
 8005c60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c64:	4649      	mov	r1, r9
 8005c66:	4638      	mov	r0, r7
 8005c68:	47c0      	blx	r8
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	d01e      	beq.n	8005cac <_printf_common+0xa4>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	68e5      	ldr	r5, [r4, #12]
 8005c72:	6832      	ldr	r2, [r6, #0]
 8005c74:	f003 0306 	and.w	r3, r3, #6
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	bf08      	it	eq
 8005c7c:	1aad      	subeq	r5, r5, r2
 8005c7e:	68a3      	ldr	r3, [r4, #8]
 8005c80:	6922      	ldr	r2, [r4, #16]
 8005c82:	bf0c      	ite	eq
 8005c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c88:	2500      	movne	r5, #0
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	bfc4      	itt	gt
 8005c8e:	1a9b      	subgt	r3, r3, r2
 8005c90:	18ed      	addgt	r5, r5, r3
 8005c92:	2600      	movs	r6, #0
 8005c94:	341a      	adds	r4, #26
 8005c96:	42b5      	cmp	r5, r6
 8005c98:	d11a      	bne.n	8005cd0 <_printf_common+0xc8>
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	e008      	b.n	8005cb0 <_printf_common+0xa8>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	4652      	mov	r2, sl
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	47c0      	blx	r8
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d103      	bne.n	8005cb4 <_printf_common+0xac>
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb4:	3501      	adds	r5, #1
 8005cb6:	e7c6      	b.n	8005c46 <_printf_common+0x3e>
 8005cb8:	18e1      	adds	r1, r4, r3
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	2030      	movs	r0, #48	; 0x30
 8005cbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cc2:	4422      	add	r2, r4
 8005cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ccc:	3302      	adds	r3, #2
 8005cce:	e7c7      	b.n	8005c60 <_printf_common+0x58>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	4622      	mov	r2, r4
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	47c0      	blx	r8
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d0e6      	beq.n	8005cac <_printf_common+0xa4>
 8005cde:	3601      	adds	r6, #1
 8005ce0:	e7d9      	b.n	8005c96 <_printf_common+0x8e>
	...

08005ce4 <_printf_i>:
 8005ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce8:	7e0f      	ldrb	r7, [r1, #24]
 8005cea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cec:	2f78      	cmp	r7, #120	; 0x78
 8005cee:	4691      	mov	r9, r2
 8005cf0:	4680      	mov	r8, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	469a      	mov	sl, r3
 8005cf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cfa:	d807      	bhi.n	8005d0c <_printf_i+0x28>
 8005cfc:	2f62      	cmp	r7, #98	; 0x62
 8005cfe:	d80a      	bhi.n	8005d16 <_printf_i+0x32>
 8005d00:	2f00      	cmp	r7, #0
 8005d02:	f000 80d8 	beq.w	8005eb6 <_printf_i+0x1d2>
 8005d06:	2f58      	cmp	r7, #88	; 0x58
 8005d08:	f000 80a3 	beq.w	8005e52 <_printf_i+0x16e>
 8005d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d14:	e03a      	b.n	8005d8c <_printf_i+0xa8>
 8005d16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d1a:	2b15      	cmp	r3, #21
 8005d1c:	d8f6      	bhi.n	8005d0c <_printf_i+0x28>
 8005d1e:	a101      	add	r1, pc, #4	; (adr r1, 8005d24 <_printf_i+0x40>)
 8005d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d24:	08005d7d 	.word	0x08005d7d
 8005d28:	08005d91 	.word	0x08005d91
 8005d2c:	08005d0d 	.word	0x08005d0d
 8005d30:	08005d0d 	.word	0x08005d0d
 8005d34:	08005d0d 	.word	0x08005d0d
 8005d38:	08005d0d 	.word	0x08005d0d
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005d0d 	.word	0x08005d0d
 8005d44:	08005d0d 	.word	0x08005d0d
 8005d48:	08005d0d 	.word	0x08005d0d
 8005d4c:	08005d0d 	.word	0x08005d0d
 8005d50:	08005e9d 	.word	0x08005e9d
 8005d54:	08005dc1 	.word	0x08005dc1
 8005d58:	08005e7f 	.word	0x08005e7f
 8005d5c:	08005d0d 	.word	0x08005d0d
 8005d60:	08005d0d 	.word	0x08005d0d
 8005d64:	08005ebf 	.word	0x08005ebf
 8005d68:	08005d0d 	.word	0x08005d0d
 8005d6c:	08005dc1 	.word	0x08005dc1
 8005d70:	08005d0d 	.word	0x08005d0d
 8005d74:	08005d0d 	.word	0x08005d0d
 8005d78:	08005e87 	.word	0x08005e87
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	1d1a      	adds	r2, r3, #4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	602a      	str	r2, [r5, #0]
 8005d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0a3      	b.n	8005ed8 <_printf_i+0x1f4>
 8005d90:	6820      	ldr	r0, [r4, #0]
 8005d92:	6829      	ldr	r1, [r5, #0]
 8005d94:	0606      	lsls	r6, r0, #24
 8005d96:	f101 0304 	add.w	r3, r1, #4
 8005d9a:	d50a      	bpl.n	8005db2 <_printf_i+0xce>
 8005d9c:	680e      	ldr	r6, [r1, #0]
 8005d9e:	602b      	str	r3, [r5, #0]
 8005da0:	2e00      	cmp	r6, #0
 8005da2:	da03      	bge.n	8005dac <_printf_i+0xc8>
 8005da4:	232d      	movs	r3, #45	; 0x2d
 8005da6:	4276      	negs	r6, r6
 8005da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dac:	485e      	ldr	r0, [pc, #376]	; (8005f28 <_printf_i+0x244>)
 8005dae:	230a      	movs	r3, #10
 8005db0:	e019      	b.n	8005de6 <_printf_i+0x102>
 8005db2:	680e      	ldr	r6, [r1, #0]
 8005db4:	602b      	str	r3, [r5, #0]
 8005db6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dba:	bf18      	it	ne
 8005dbc:	b236      	sxthne	r6, r6
 8005dbe:	e7ef      	b.n	8005da0 <_printf_i+0xbc>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	6820      	ldr	r0, [r4, #0]
 8005dc4:	1d19      	adds	r1, r3, #4
 8005dc6:	6029      	str	r1, [r5, #0]
 8005dc8:	0601      	lsls	r1, r0, #24
 8005dca:	d501      	bpl.n	8005dd0 <_printf_i+0xec>
 8005dcc:	681e      	ldr	r6, [r3, #0]
 8005dce:	e002      	b.n	8005dd6 <_printf_i+0xf2>
 8005dd0:	0646      	lsls	r6, r0, #25
 8005dd2:	d5fb      	bpl.n	8005dcc <_printf_i+0xe8>
 8005dd4:	881e      	ldrh	r6, [r3, #0]
 8005dd6:	4854      	ldr	r0, [pc, #336]	; (8005f28 <_printf_i+0x244>)
 8005dd8:	2f6f      	cmp	r7, #111	; 0x6f
 8005dda:	bf0c      	ite	eq
 8005ddc:	2308      	moveq	r3, #8
 8005dde:	230a      	movne	r3, #10
 8005de0:	2100      	movs	r1, #0
 8005de2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005de6:	6865      	ldr	r5, [r4, #4]
 8005de8:	60a5      	str	r5, [r4, #8]
 8005dea:	2d00      	cmp	r5, #0
 8005dec:	bfa2      	ittt	ge
 8005dee:	6821      	ldrge	r1, [r4, #0]
 8005df0:	f021 0104 	bicge.w	r1, r1, #4
 8005df4:	6021      	strge	r1, [r4, #0]
 8005df6:	b90e      	cbnz	r6, 8005dfc <_printf_i+0x118>
 8005df8:	2d00      	cmp	r5, #0
 8005dfa:	d04d      	beq.n	8005e98 <_printf_i+0x1b4>
 8005dfc:	4615      	mov	r5, r2
 8005dfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e02:	fb03 6711 	mls	r7, r3, r1, r6
 8005e06:	5dc7      	ldrb	r7, [r0, r7]
 8005e08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e0c:	4637      	mov	r7, r6
 8005e0e:	42bb      	cmp	r3, r7
 8005e10:	460e      	mov	r6, r1
 8005e12:	d9f4      	bls.n	8005dfe <_printf_i+0x11a>
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d10b      	bne.n	8005e30 <_printf_i+0x14c>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	07de      	lsls	r6, r3, #31
 8005e1c:	d508      	bpl.n	8005e30 <_printf_i+0x14c>
 8005e1e:	6923      	ldr	r3, [r4, #16]
 8005e20:	6861      	ldr	r1, [r4, #4]
 8005e22:	4299      	cmp	r1, r3
 8005e24:	bfde      	ittt	le
 8005e26:	2330      	movle	r3, #48	; 0x30
 8005e28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e30:	1b52      	subs	r2, r2, r5
 8005e32:	6122      	str	r2, [r4, #16]
 8005e34:	f8cd a000 	str.w	sl, [sp]
 8005e38:	464b      	mov	r3, r9
 8005e3a:	aa03      	add	r2, sp, #12
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	4640      	mov	r0, r8
 8005e40:	f7ff fee2 	bl	8005c08 <_printf_common>
 8005e44:	3001      	adds	r0, #1
 8005e46:	d14c      	bne.n	8005ee2 <_printf_i+0x1fe>
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4c:	b004      	add	sp, #16
 8005e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e52:	4835      	ldr	r0, [pc, #212]	; (8005f28 <_printf_i+0x244>)
 8005e54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e58:	6829      	ldr	r1, [r5, #0]
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e60:	6029      	str	r1, [r5, #0]
 8005e62:	061d      	lsls	r5, r3, #24
 8005e64:	d514      	bpl.n	8005e90 <_printf_i+0x1ac>
 8005e66:	07df      	lsls	r7, r3, #31
 8005e68:	bf44      	itt	mi
 8005e6a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e6e:	6023      	strmi	r3, [r4, #0]
 8005e70:	b91e      	cbnz	r6, 8005e7a <_printf_i+0x196>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	f023 0320 	bic.w	r3, r3, #32
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	2310      	movs	r3, #16
 8005e7c:	e7b0      	b.n	8005de0 <_printf_i+0xfc>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	f043 0320 	orr.w	r3, r3, #32
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	2378      	movs	r3, #120	; 0x78
 8005e88:	4828      	ldr	r0, [pc, #160]	; (8005f2c <_printf_i+0x248>)
 8005e8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e8e:	e7e3      	b.n	8005e58 <_printf_i+0x174>
 8005e90:	0659      	lsls	r1, r3, #25
 8005e92:	bf48      	it	mi
 8005e94:	b2b6      	uxthmi	r6, r6
 8005e96:	e7e6      	b.n	8005e66 <_printf_i+0x182>
 8005e98:	4615      	mov	r5, r2
 8005e9a:	e7bb      	b.n	8005e14 <_printf_i+0x130>
 8005e9c:	682b      	ldr	r3, [r5, #0]
 8005e9e:	6826      	ldr	r6, [r4, #0]
 8005ea0:	6961      	ldr	r1, [r4, #20]
 8005ea2:	1d18      	adds	r0, r3, #4
 8005ea4:	6028      	str	r0, [r5, #0]
 8005ea6:	0635      	lsls	r5, r6, #24
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	d501      	bpl.n	8005eb0 <_printf_i+0x1cc>
 8005eac:	6019      	str	r1, [r3, #0]
 8005eae:	e002      	b.n	8005eb6 <_printf_i+0x1d2>
 8005eb0:	0670      	lsls	r0, r6, #25
 8005eb2:	d5fb      	bpl.n	8005eac <_printf_i+0x1c8>
 8005eb4:	8019      	strh	r1, [r3, #0]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	6123      	str	r3, [r4, #16]
 8005eba:	4615      	mov	r5, r2
 8005ebc:	e7ba      	b.n	8005e34 <_printf_i+0x150>
 8005ebe:	682b      	ldr	r3, [r5, #0]
 8005ec0:	1d1a      	adds	r2, r3, #4
 8005ec2:	602a      	str	r2, [r5, #0]
 8005ec4:	681d      	ldr	r5, [r3, #0]
 8005ec6:	6862      	ldr	r2, [r4, #4]
 8005ec8:	2100      	movs	r1, #0
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f7fa f988 	bl	80001e0 <memchr>
 8005ed0:	b108      	cbz	r0, 8005ed6 <_printf_i+0x1f2>
 8005ed2:	1b40      	subs	r0, r0, r5
 8005ed4:	6060      	str	r0, [r4, #4]
 8005ed6:	6863      	ldr	r3, [r4, #4]
 8005ed8:	6123      	str	r3, [r4, #16]
 8005eda:	2300      	movs	r3, #0
 8005edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee0:	e7a8      	b.n	8005e34 <_printf_i+0x150>
 8005ee2:	6923      	ldr	r3, [r4, #16]
 8005ee4:	462a      	mov	r2, r5
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	4640      	mov	r0, r8
 8005eea:	47d0      	blx	sl
 8005eec:	3001      	adds	r0, #1
 8005eee:	d0ab      	beq.n	8005e48 <_printf_i+0x164>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	079b      	lsls	r3, r3, #30
 8005ef4:	d413      	bmi.n	8005f1e <_printf_i+0x23a>
 8005ef6:	68e0      	ldr	r0, [r4, #12]
 8005ef8:	9b03      	ldr	r3, [sp, #12]
 8005efa:	4298      	cmp	r0, r3
 8005efc:	bfb8      	it	lt
 8005efe:	4618      	movlt	r0, r3
 8005f00:	e7a4      	b.n	8005e4c <_printf_i+0x168>
 8005f02:	2301      	movs	r3, #1
 8005f04:	4632      	mov	r2, r6
 8005f06:	4649      	mov	r1, r9
 8005f08:	4640      	mov	r0, r8
 8005f0a:	47d0      	blx	sl
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d09b      	beq.n	8005e48 <_printf_i+0x164>
 8005f10:	3501      	adds	r5, #1
 8005f12:	68e3      	ldr	r3, [r4, #12]
 8005f14:	9903      	ldr	r1, [sp, #12]
 8005f16:	1a5b      	subs	r3, r3, r1
 8005f18:	42ab      	cmp	r3, r5
 8005f1a:	dcf2      	bgt.n	8005f02 <_printf_i+0x21e>
 8005f1c:	e7eb      	b.n	8005ef6 <_printf_i+0x212>
 8005f1e:	2500      	movs	r5, #0
 8005f20:	f104 0619 	add.w	r6, r4, #25
 8005f24:	e7f5      	b.n	8005f12 <_printf_i+0x22e>
 8005f26:	bf00      	nop
 8005f28:	0800b916 	.word	0x0800b916
 8005f2c:	0800b927 	.word	0x0800b927

08005f30 <iprintf>:
 8005f30:	b40f      	push	{r0, r1, r2, r3}
 8005f32:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <iprintf+0x2c>)
 8005f34:	b513      	push	{r0, r1, r4, lr}
 8005f36:	681c      	ldr	r4, [r3, #0]
 8005f38:	b124      	cbz	r4, 8005f44 <iprintf+0x14>
 8005f3a:	69a3      	ldr	r3, [r4, #24]
 8005f3c:	b913      	cbnz	r3, 8005f44 <iprintf+0x14>
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f001 f8fa 	bl	8007138 <__sinit>
 8005f44:	ab05      	add	r3, sp, #20
 8005f46:	9a04      	ldr	r2, [sp, #16]
 8005f48:	68a1      	ldr	r1, [r4, #8]
 8005f4a:	9301      	str	r3, [sp, #4]
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f002 f805 	bl	8007f5c <_vfiprintf_r>
 8005f52:	b002      	add	sp, #8
 8005f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f58:	b004      	add	sp, #16
 8005f5a:	4770      	bx	lr
 8005f5c:	2000005c 	.word	0x2000005c

08005f60 <_puts_r>:
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	460e      	mov	r6, r1
 8005f64:	4605      	mov	r5, r0
 8005f66:	b118      	cbz	r0, 8005f70 <_puts_r+0x10>
 8005f68:	6983      	ldr	r3, [r0, #24]
 8005f6a:	b90b      	cbnz	r3, 8005f70 <_puts_r+0x10>
 8005f6c:	f001 f8e4 	bl	8007138 <__sinit>
 8005f70:	69ab      	ldr	r3, [r5, #24]
 8005f72:	68ac      	ldr	r4, [r5, #8]
 8005f74:	b913      	cbnz	r3, 8005f7c <_puts_r+0x1c>
 8005f76:	4628      	mov	r0, r5
 8005f78:	f001 f8de 	bl	8007138 <__sinit>
 8005f7c:	4b2c      	ldr	r3, [pc, #176]	; (8006030 <_puts_r+0xd0>)
 8005f7e:	429c      	cmp	r4, r3
 8005f80:	d120      	bne.n	8005fc4 <_puts_r+0x64>
 8005f82:	686c      	ldr	r4, [r5, #4]
 8005f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f86:	07db      	lsls	r3, r3, #31
 8005f88:	d405      	bmi.n	8005f96 <_puts_r+0x36>
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	0598      	lsls	r0, r3, #22
 8005f8e:	d402      	bmi.n	8005f96 <_puts_r+0x36>
 8005f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f92:	f001 f974 	bl	800727e <__retarget_lock_acquire_recursive>
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	0719      	lsls	r1, r3, #28
 8005f9a:	d51d      	bpl.n	8005fd8 <_puts_r+0x78>
 8005f9c:	6923      	ldr	r3, [r4, #16]
 8005f9e:	b1db      	cbz	r3, 8005fd8 <_puts_r+0x78>
 8005fa0:	3e01      	subs	r6, #1
 8005fa2:	68a3      	ldr	r3, [r4, #8]
 8005fa4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	60a3      	str	r3, [r4, #8]
 8005fac:	bb39      	cbnz	r1, 8005ffe <_puts_r+0x9e>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	da38      	bge.n	8006024 <_puts_r+0xc4>
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	210a      	movs	r1, #10
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f000 f868 	bl	800608c <__swbuf_r>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d011      	beq.n	8005fe4 <_puts_r+0x84>
 8005fc0:	250a      	movs	r5, #10
 8005fc2:	e011      	b.n	8005fe8 <_puts_r+0x88>
 8005fc4:	4b1b      	ldr	r3, [pc, #108]	; (8006034 <_puts_r+0xd4>)
 8005fc6:	429c      	cmp	r4, r3
 8005fc8:	d101      	bne.n	8005fce <_puts_r+0x6e>
 8005fca:	68ac      	ldr	r4, [r5, #8]
 8005fcc:	e7da      	b.n	8005f84 <_puts_r+0x24>
 8005fce:	4b1a      	ldr	r3, [pc, #104]	; (8006038 <_puts_r+0xd8>)
 8005fd0:	429c      	cmp	r4, r3
 8005fd2:	bf08      	it	eq
 8005fd4:	68ec      	ldreq	r4, [r5, #12]
 8005fd6:	e7d5      	b.n	8005f84 <_puts_r+0x24>
 8005fd8:	4621      	mov	r1, r4
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f000 f8a8 	bl	8006130 <__swsetup_r>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d0dd      	beq.n	8005fa0 <_puts_r+0x40>
 8005fe4:	f04f 35ff 	mov.w	r5, #4294967295
 8005fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fea:	07da      	lsls	r2, r3, #31
 8005fec:	d405      	bmi.n	8005ffa <_puts_r+0x9a>
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	059b      	lsls	r3, r3, #22
 8005ff2:	d402      	bmi.n	8005ffa <_puts_r+0x9a>
 8005ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ff6:	f001 f943 	bl	8007280 <__retarget_lock_release_recursive>
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	bd70      	pop	{r4, r5, r6, pc}
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	da04      	bge.n	800600c <_puts_r+0xac>
 8006002:	69a2      	ldr	r2, [r4, #24]
 8006004:	429a      	cmp	r2, r3
 8006006:	dc06      	bgt.n	8006016 <_puts_r+0xb6>
 8006008:	290a      	cmp	r1, #10
 800600a:	d004      	beq.n	8006016 <_puts_r+0xb6>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	6022      	str	r2, [r4, #0]
 8006012:	7019      	strb	r1, [r3, #0]
 8006014:	e7c5      	b.n	8005fa2 <_puts_r+0x42>
 8006016:	4622      	mov	r2, r4
 8006018:	4628      	mov	r0, r5
 800601a:	f000 f837 	bl	800608c <__swbuf_r>
 800601e:	3001      	adds	r0, #1
 8006020:	d1bf      	bne.n	8005fa2 <_puts_r+0x42>
 8006022:	e7df      	b.n	8005fe4 <_puts_r+0x84>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	250a      	movs	r5, #10
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	6022      	str	r2, [r4, #0]
 800602c:	701d      	strb	r5, [r3, #0]
 800602e:	e7db      	b.n	8005fe8 <_puts_r+0x88>
 8006030:	0800b9e8 	.word	0x0800b9e8
 8006034:	0800ba08 	.word	0x0800ba08
 8006038:	0800b9c8 	.word	0x0800b9c8

0800603c <puts>:
 800603c:	4b02      	ldr	r3, [pc, #8]	; (8006048 <puts+0xc>)
 800603e:	4601      	mov	r1, r0
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	f7ff bf8d 	b.w	8005f60 <_puts_r>
 8006046:	bf00      	nop
 8006048:	2000005c 	.word	0x2000005c

0800604c <siprintf>:
 800604c:	b40e      	push	{r1, r2, r3}
 800604e:	b500      	push	{lr}
 8006050:	b09c      	sub	sp, #112	; 0x70
 8006052:	ab1d      	add	r3, sp, #116	; 0x74
 8006054:	9002      	str	r0, [sp, #8]
 8006056:	9006      	str	r0, [sp, #24]
 8006058:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800605c:	4809      	ldr	r0, [pc, #36]	; (8006084 <siprintf+0x38>)
 800605e:	9107      	str	r1, [sp, #28]
 8006060:	9104      	str	r1, [sp, #16]
 8006062:	4909      	ldr	r1, [pc, #36]	; (8006088 <siprintf+0x3c>)
 8006064:	f853 2b04 	ldr.w	r2, [r3], #4
 8006068:	9105      	str	r1, [sp, #20]
 800606a:	6800      	ldr	r0, [r0, #0]
 800606c:	9301      	str	r3, [sp, #4]
 800606e:	a902      	add	r1, sp, #8
 8006070:	f001 fe4a 	bl	8007d08 <_svfiprintf_r>
 8006074:	9b02      	ldr	r3, [sp, #8]
 8006076:	2200      	movs	r2, #0
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	b01c      	add	sp, #112	; 0x70
 800607c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006080:	b003      	add	sp, #12
 8006082:	4770      	bx	lr
 8006084:	2000005c 	.word	0x2000005c
 8006088:	ffff0208 	.word	0xffff0208

0800608c <__swbuf_r>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	460e      	mov	r6, r1
 8006090:	4614      	mov	r4, r2
 8006092:	4605      	mov	r5, r0
 8006094:	b118      	cbz	r0, 800609e <__swbuf_r+0x12>
 8006096:	6983      	ldr	r3, [r0, #24]
 8006098:	b90b      	cbnz	r3, 800609e <__swbuf_r+0x12>
 800609a:	f001 f84d 	bl	8007138 <__sinit>
 800609e:	4b21      	ldr	r3, [pc, #132]	; (8006124 <__swbuf_r+0x98>)
 80060a0:	429c      	cmp	r4, r3
 80060a2:	d12b      	bne.n	80060fc <__swbuf_r+0x70>
 80060a4:	686c      	ldr	r4, [r5, #4]
 80060a6:	69a3      	ldr	r3, [r4, #24]
 80060a8:	60a3      	str	r3, [r4, #8]
 80060aa:	89a3      	ldrh	r3, [r4, #12]
 80060ac:	071a      	lsls	r2, r3, #28
 80060ae:	d52f      	bpl.n	8006110 <__swbuf_r+0x84>
 80060b0:	6923      	ldr	r3, [r4, #16]
 80060b2:	b36b      	cbz	r3, 8006110 <__swbuf_r+0x84>
 80060b4:	6923      	ldr	r3, [r4, #16]
 80060b6:	6820      	ldr	r0, [r4, #0]
 80060b8:	1ac0      	subs	r0, r0, r3
 80060ba:	6963      	ldr	r3, [r4, #20]
 80060bc:	b2f6      	uxtb	r6, r6
 80060be:	4283      	cmp	r3, r0
 80060c0:	4637      	mov	r7, r6
 80060c2:	dc04      	bgt.n	80060ce <__swbuf_r+0x42>
 80060c4:	4621      	mov	r1, r4
 80060c6:	4628      	mov	r0, r5
 80060c8:	f000 ffa2 	bl	8007010 <_fflush_r>
 80060cc:	bb30      	cbnz	r0, 800611c <__swbuf_r+0x90>
 80060ce:	68a3      	ldr	r3, [r4, #8]
 80060d0:	3b01      	subs	r3, #1
 80060d2:	60a3      	str	r3, [r4, #8]
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	6022      	str	r2, [r4, #0]
 80060da:	701e      	strb	r6, [r3, #0]
 80060dc:	6963      	ldr	r3, [r4, #20]
 80060de:	3001      	adds	r0, #1
 80060e0:	4283      	cmp	r3, r0
 80060e2:	d004      	beq.n	80060ee <__swbuf_r+0x62>
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	07db      	lsls	r3, r3, #31
 80060e8:	d506      	bpl.n	80060f8 <__swbuf_r+0x6c>
 80060ea:	2e0a      	cmp	r6, #10
 80060ec:	d104      	bne.n	80060f8 <__swbuf_r+0x6c>
 80060ee:	4621      	mov	r1, r4
 80060f0:	4628      	mov	r0, r5
 80060f2:	f000 ff8d 	bl	8007010 <_fflush_r>
 80060f6:	b988      	cbnz	r0, 800611c <__swbuf_r+0x90>
 80060f8:	4638      	mov	r0, r7
 80060fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <__swbuf_r+0x9c>)
 80060fe:	429c      	cmp	r4, r3
 8006100:	d101      	bne.n	8006106 <__swbuf_r+0x7a>
 8006102:	68ac      	ldr	r4, [r5, #8]
 8006104:	e7cf      	b.n	80060a6 <__swbuf_r+0x1a>
 8006106:	4b09      	ldr	r3, [pc, #36]	; (800612c <__swbuf_r+0xa0>)
 8006108:	429c      	cmp	r4, r3
 800610a:	bf08      	it	eq
 800610c:	68ec      	ldreq	r4, [r5, #12]
 800610e:	e7ca      	b.n	80060a6 <__swbuf_r+0x1a>
 8006110:	4621      	mov	r1, r4
 8006112:	4628      	mov	r0, r5
 8006114:	f000 f80c 	bl	8006130 <__swsetup_r>
 8006118:	2800      	cmp	r0, #0
 800611a:	d0cb      	beq.n	80060b4 <__swbuf_r+0x28>
 800611c:	f04f 37ff 	mov.w	r7, #4294967295
 8006120:	e7ea      	b.n	80060f8 <__swbuf_r+0x6c>
 8006122:	bf00      	nop
 8006124:	0800b9e8 	.word	0x0800b9e8
 8006128:	0800ba08 	.word	0x0800ba08
 800612c:	0800b9c8 	.word	0x0800b9c8

08006130 <__swsetup_r>:
 8006130:	4b32      	ldr	r3, [pc, #200]	; (80061fc <__swsetup_r+0xcc>)
 8006132:	b570      	push	{r4, r5, r6, lr}
 8006134:	681d      	ldr	r5, [r3, #0]
 8006136:	4606      	mov	r6, r0
 8006138:	460c      	mov	r4, r1
 800613a:	b125      	cbz	r5, 8006146 <__swsetup_r+0x16>
 800613c:	69ab      	ldr	r3, [r5, #24]
 800613e:	b913      	cbnz	r3, 8006146 <__swsetup_r+0x16>
 8006140:	4628      	mov	r0, r5
 8006142:	f000 fff9 	bl	8007138 <__sinit>
 8006146:	4b2e      	ldr	r3, [pc, #184]	; (8006200 <__swsetup_r+0xd0>)
 8006148:	429c      	cmp	r4, r3
 800614a:	d10f      	bne.n	800616c <__swsetup_r+0x3c>
 800614c:	686c      	ldr	r4, [r5, #4]
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006154:	0719      	lsls	r1, r3, #28
 8006156:	d42c      	bmi.n	80061b2 <__swsetup_r+0x82>
 8006158:	06dd      	lsls	r5, r3, #27
 800615a:	d411      	bmi.n	8006180 <__swsetup_r+0x50>
 800615c:	2309      	movs	r3, #9
 800615e:	6033      	str	r3, [r6, #0]
 8006160:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006164:	81a3      	strh	r3, [r4, #12]
 8006166:	f04f 30ff 	mov.w	r0, #4294967295
 800616a:	e03e      	b.n	80061ea <__swsetup_r+0xba>
 800616c:	4b25      	ldr	r3, [pc, #148]	; (8006204 <__swsetup_r+0xd4>)
 800616e:	429c      	cmp	r4, r3
 8006170:	d101      	bne.n	8006176 <__swsetup_r+0x46>
 8006172:	68ac      	ldr	r4, [r5, #8]
 8006174:	e7eb      	b.n	800614e <__swsetup_r+0x1e>
 8006176:	4b24      	ldr	r3, [pc, #144]	; (8006208 <__swsetup_r+0xd8>)
 8006178:	429c      	cmp	r4, r3
 800617a:	bf08      	it	eq
 800617c:	68ec      	ldreq	r4, [r5, #12]
 800617e:	e7e6      	b.n	800614e <__swsetup_r+0x1e>
 8006180:	0758      	lsls	r0, r3, #29
 8006182:	d512      	bpl.n	80061aa <__swsetup_r+0x7a>
 8006184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006186:	b141      	cbz	r1, 800619a <__swsetup_r+0x6a>
 8006188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800618c:	4299      	cmp	r1, r3
 800618e:	d002      	beq.n	8006196 <__swsetup_r+0x66>
 8006190:	4630      	mov	r0, r6
 8006192:	f001 fc7d 	bl	8007a90 <_free_r>
 8006196:	2300      	movs	r3, #0
 8006198:	6363      	str	r3, [r4, #52]	; 0x34
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061a0:	81a3      	strh	r3, [r4, #12]
 80061a2:	2300      	movs	r3, #0
 80061a4:	6063      	str	r3, [r4, #4]
 80061a6:	6923      	ldr	r3, [r4, #16]
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	f043 0308 	orr.w	r3, r3, #8
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	6923      	ldr	r3, [r4, #16]
 80061b4:	b94b      	cbnz	r3, 80061ca <__swsetup_r+0x9a>
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c0:	d003      	beq.n	80061ca <__swsetup_r+0x9a>
 80061c2:	4621      	mov	r1, r4
 80061c4:	4630      	mov	r0, r6
 80061c6:	f001 f881 	bl	80072cc <__smakebuf_r>
 80061ca:	89a0      	ldrh	r0, [r4, #12]
 80061cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061d0:	f010 0301 	ands.w	r3, r0, #1
 80061d4:	d00a      	beq.n	80061ec <__swsetup_r+0xbc>
 80061d6:	2300      	movs	r3, #0
 80061d8:	60a3      	str	r3, [r4, #8]
 80061da:	6963      	ldr	r3, [r4, #20]
 80061dc:	425b      	negs	r3, r3
 80061de:	61a3      	str	r3, [r4, #24]
 80061e0:	6923      	ldr	r3, [r4, #16]
 80061e2:	b943      	cbnz	r3, 80061f6 <__swsetup_r+0xc6>
 80061e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061e8:	d1ba      	bne.n	8006160 <__swsetup_r+0x30>
 80061ea:	bd70      	pop	{r4, r5, r6, pc}
 80061ec:	0781      	lsls	r1, r0, #30
 80061ee:	bf58      	it	pl
 80061f0:	6963      	ldrpl	r3, [r4, #20]
 80061f2:	60a3      	str	r3, [r4, #8]
 80061f4:	e7f4      	b.n	80061e0 <__swsetup_r+0xb0>
 80061f6:	2000      	movs	r0, #0
 80061f8:	e7f7      	b.n	80061ea <__swsetup_r+0xba>
 80061fa:	bf00      	nop
 80061fc:	2000005c 	.word	0x2000005c
 8006200:	0800b9e8 	.word	0x0800b9e8
 8006204:	0800ba08 	.word	0x0800ba08
 8006208:	0800b9c8 	.word	0x0800b9c8

0800620c <quorem>:
 800620c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006210:	6903      	ldr	r3, [r0, #16]
 8006212:	690c      	ldr	r4, [r1, #16]
 8006214:	42a3      	cmp	r3, r4
 8006216:	4607      	mov	r7, r0
 8006218:	f2c0 8081 	blt.w	800631e <quorem+0x112>
 800621c:	3c01      	subs	r4, #1
 800621e:	f101 0814 	add.w	r8, r1, #20
 8006222:	f100 0514 	add.w	r5, r0, #20
 8006226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800622a:	9301      	str	r3, [sp, #4]
 800622c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006230:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006234:	3301      	adds	r3, #1
 8006236:	429a      	cmp	r2, r3
 8006238:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800623c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006240:	fbb2 f6f3 	udiv	r6, r2, r3
 8006244:	d331      	bcc.n	80062aa <quorem+0x9e>
 8006246:	f04f 0e00 	mov.w	lr, #0
 800624a:	4640      	mov	r0, r8
 800624c:	46ac      	mov	ip, r5
 800624e:	46f2      	mov	sl, lr
 8006250:	f850 2b04 	ldr.w	r2, [r0], #4
 8006254:	b293      	uxth	r3, r2
 8006256:	fb06 e303 	mla	r3, r6, r3, lr
 800625a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800625e:	b29b      	uxth	r3, r3
 8006260:	ebaa 0303 	sub.w	r3, sl, r3
 8006264:	f8dc a000 	ldr.w	sl, [ip]
 8006268:	0c12      	lsrs	r2, r2, #16
 800626a:	fa13 f38a 	uxtah	r3, r3, sl
 800626e:	fb06 e202 	mla	r2, r6, r2, lr
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	9b00      	ldr	r3, [sp, #0]
 8006276:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800627a:	b292      	uxth	r2, r2
 800627c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006284:	f8bd 3000 	ldrh.w	r3, [sp]
 8006288:	4581      	cmp	r9, r0
 800628a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800628e:	f84c 3b04 	str.w	r3, [ip], #4
 8006292:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006296:	d2db      	bcs.n	8006250 <quorem+0x44>
 8006298:	f855 300b 	ldr.w	r3, [r5, fp]
 800629c:	b92b      	cbnz	r3, 80062aa <quorem+0x9e>
 800629e:	9b01      	ldr	r3, [sp, #4]
 80062a0:	3b04      	subs	r3, #4
 80062a2:	429d      	cmp	r5, r3
 80062a4:	461a      	mov	r2, r3
 80062a6:	d32e      	bcc.n	8006306 <quorem+0xfa>
 80062a8:	613c      	str	r4, [r7, #16]
 80062aa:	4638      	mov	r0, r7
 80062ac:	f001 fad8 	bl	8007860 <__mcmp>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	db24      	blt.n	80062fe <quorem+0xf2>
 80062b4:	3601      	adds	r6, #1
 80062b6:	4628      	mov	r0, r5
 80062b8:	f04f 0c00 	mov.w	ip, #0
 80062bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80062c0:	f8d0 e000 	ldr.w	lr, [r0]
 80062c4:	b293      	uxth	r3, r2
 80062c6:	ebac 0303 	sub.w	r3, ip, r3
 80062ca:	0c12      	lsrs	r2, r2, #16
 80062cc:	fa13 f38e 	uxtah	r3, r3, lr
 80062d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80062d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062d8:	b29b      	uxth	r3, r3
 80062da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062de:	45c1      	cmp	r9, r8
 80062e0:	f840 3b04 	str.w	r3, [r0], #4
 80062e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80062e8:	d2e8      	bcs.n	80062bc <quorem+0xb0>
 80062ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062f2:	b922      	cbnz	r2, 80062fe <quorem+0xf2>
 80062f4:	3b04      	subs	r3, #4
 80062f6:	429d      	cmp	r5, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	d30a      	bcc.n	8006312 <quorem+0x106>
 80062fc:	613c      	str	r4, [r7, #16]
 80062fe:	4630      	mov	r0, r6
 8006300:	b003      	add	sp, #12
 8006302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	3b04      	subs	r3, #4
 800630a:	2a00      	cmp	r2, #0
 800630c:	d1cc      	bne.n	80062a8 <quorem+0x9c>
 800630e:	3c01      	subs	r4, #1
 8006310:	e7c7      	b.n	80062a2 <quorem+0x96>
 8006312:	6812      	ldr	r2, [r2, #0]
 8006314:	3b04      	subs	r3, #4
 8006316:	2a00      	cmp	r2, #0
 8006318:	d1f0      	bne.n	80062fc <quorem+0xf0>
 800631a:	3c01      	subs	r4, #1
 800631c:	e7eb      	b.n	80062f6 <quorem+0xea>
 800631e:	2000      	movs	r0, #0
 8006320:	e7ee      	b.n	8006300 <quorem+0xf4>
 8006322:	0000      	movs	r0, r0
 8006324:	0000      	movs	r0, r0
	...

08006328 <_dtoa_r>:
 8006328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632c:	ed2d 8b04 	vpush	{d8-d9}
 8006330:	ec57 6b10 	vmov	r6, r7, d0
 8006334:	b093      	sub	sp, #76	; 0x4c
 8006336:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006338:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800633c:	9106      	str	r1, [sp, #24]
 800633e:	ee10 aa10 	vmov	sl, s0
 8006342:	4604      	mov	r4, r0
 8006344:	9209      	str	r2, [sp, #36]	; 0x24
 8006346:	930c      	str	r3, [sp, #48]	; 0x30
 8006348:	46bb      	mov	fp, r7
 800634a:	b975      	cbnz	r5, 800636a <_dtoa_r+0x42>
 800634c:	2010      	movs	r0, #16
 800634e:	f000 fffd 	bl	800734c <malloc>
 8006352:	4602      	mov	r2, r0
 8006354:	6260      	str	r0, [r4, #36]	; 0x24
 8006356:	b920      	cbnz	r0, 8006362 <_dtoa_r+0x3a>
 8006358:	4ba7      	ldr	r3, [pc, #668]	; (80065f8 <_dtoa_r+0x2d0>)
 800635a:	21ea      	movs	r1, #234	; 0xea
 800635c:	48a7      	ldr	r0, [pc, #668]	; (80065fc <_dtoa_r+0x2d4>)
 800635e:	f001 ff93 	bl	8008288 <__assert_func>
 8006362:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006366:	6005      	str	r5, [r0, #0]
 8006368:	60c5      	str	r5, [r0, #12]
 800636a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800636c:	6819      	ldr	r1, [r3, #0]
 800636e:	b151      	cbz	r1, 8006386 <_dtoa_r+0x5e>
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	604a      	str	r2, [r1, #4]
 8006374:	2301      	movs	r3, #1
 8006376:	4093      	lsls	r3, r2
 8006378:	608b      	str	r3, [r1, #8]
 800637a:	4620      	mov	r0, r4
 800637c:	f001 f82e 	bl	80073dc <_Bfree>
 8006380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	1e3b      	subs	r3, r7, #0
 8006388:	bfaa      	itet	ge
 800638a:	2300      	movge	r3, #0
 800638c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006390:	f8c8 3000 	strge.w	r3, [r8]
 8006394:	4b9a      	ldr	r3, [pc, #616]	; (8006600 <_dtoa_r+0x2d8>)
 8006396:	bfbc      	itt	lt
 8006398:	2201      	movlt	r2, #1
 800639a:	f8c8 2000 	strlt.w	r2, [r8]
 800639e:	ea33 030b 	bics.w	r3, r3, fp
 80063a2:	d11b      	bne.n	80063dc <_dtoa_r+0xb4>
 80063a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063b0:	4333      	orrs	r3, r6
 80063b2:	f000 8592 	beq.w	8006eda <_dtoa_r+0xbb2>
 80063b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063b8:	b963      	cbnz	r3, 80063d4 <_dtoa_r+0xac>
 80063ba:	4b92      	ldr	r3, [pc, #584]	; (8006604 <_dtoa_r+0x2dc>)
 80063bc:	e022      	b.n	8006404 <_dtoa_r+0xdc>
 80063be:	4b92      	ldr	r3, [pc, #584]	; (8006608 <_dtoa_r+0x2e0>)
 80063c0:	9301      	str	r3, [sp, #4]
 80063c2:	3308      	adds	r3, #8
 80063c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	9801      	ldr	r0, [sp, #4]
 80063ca:	b013      	add	sp, #76	; 0x4c
 80063cc:	ecbd 8b04 	vpop	{d8-d9}
 80063d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d4:	4b8b      	ldr	r3, [pc, #556]	; (8006604 <_dtoa_r+0x2dc>)
 80063d6:	9301      	str	r3, [sp, #4]
 80063d8:	3303      	adds	r3, #3
 80063da:	e7f3      	b.n	80063c4 <_dtoa_r+0x9c>
 80063dc:	2200      	movs	r2, #0
 80063de:	2300      	movs	r3, #0
 80063e0:	4650      	mov	r0, sl
 80063e2:	4659      	mov	r1, fp
 80063e4:	f7fa fb70 	bl	8000ac8 <__aeabi_dcmpeq>
 80063e8:	ec4b ab19 	vmov	d9, sl, fp
 80063ec:	4680      	mov	r8, r0
 80063ee:	b158      	cbz	r0, 8006408 <_dtoa_r+0xe0>
 80063f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063f2:	2301      	movs	r3, #1
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 856b 	beq.w	8006ed4 <_dtoa_r+0xbac>
 80063fe:	4883      	ldr	r0, [pc, #524]	; (800660c <_dtoa_r+0x2e4>)
 8006400:	6018      	str	r0, [r3, #0]
 8006402:	1e43      	subs	r3, r0, #1
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	e7df      	b.n	80063c8 <_dtoa_r+0xa0>
 8006408:	ec4b ab10 	vmov	d0, sl, fp
 800640c:	aa10      	add	r2, sp, #64	; 0x40
 800640e:	a911      	add	r1, sp, #68	; 0x44
 8006410:	4620      	mov	r0, r4
 8006412:	f001 facb 	bl	80079ac <__d2b>
 8006416:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800641a:	ee08 0a10 	vmov	s16, r0
 800641e:	2d00      	cmp	r5, #0
 8006420:	f000 8084 	beq.w	800652c <_dtoa_r+0x204>
 8006424:	ee19 3a90 	vmov	r3, s19
 8006428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800642c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006430:	4656      	mov	r6, sl
 8006432:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006436:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800643a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800643e:	4b74      	ldr	r3, [pc, #464]	; (8006610 <_dtoa_r+0x2e8>)
 8006440:	2200      	movs	r2, #0
 8006442:	4630      	mov	r0, r6
 8006444:	4639      	mov	r1, r7
 8006446:	f7f9 ff1f 	bl	8000288 <__aeabi_dsub>
 800644a:	a365      	add	r3, pc, #404	; (adr r3, 80065e0 <_dtoa_r+0x2b8>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f7fa f8d2 	bl	80005f8 <__aeabi_dmul>
 8006454:	a364      	add	r3, pc, #400	; (adr r3, 80065e8 <_dtoa_r+0x2c0>)
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f7f9 ff17 	bl	800028c <__adddf3>
 800645e:	4606      	mov	r6, r0
 8006460:	4628      	mov	r0, r5
 8006462:	460f      	mov	r7, r1
 8006464:	f7fa f85e 	bl	8000524 <__aeabi_i2d>
 8006468:	a361      	add	r3, pc, #388	; (adr r3, 80065f0 <_dtoa_r+0x2c8>)
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7fa f8c3 	bl	80005f8 <__aeabi_dmul>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4630      	mov	r0, r6
 8006478:	4639      	mov	r1, r7
 800647a:	f7f9 ff07 	bl	800028c <__adddf3>
 800647e:	4606      	mov	r6, r0
 8006480:	460f      	mov	r7, r1
 8006482:	f7fa fb69 	bl	8000b58 <__aeabi_d2iz>
 8006486:	2200      	movs	r2, #0
 8006488:	9000      	str	r0, [sp, #0]
 800648a:	2300      	movs	r3, #0
 800648c:	4630      	mov	r0, r6
 800648e:	4639      	mov	r1, r7
 8006490:	f7fa fb24 	bl	8000adc <__aeabi_dcmplt>
 8006494:	b150      	cbz	r0, 80064ac <_dtoa_r+0x184>
 8006496:	9800      	ldr	r0, [sp, #0]
 8006498:	f7fa f844 	bl	8000524 <__aeabi_i2d>
 800649c:	4632      	mov	r2, r6
 800649e:	463b      	mov	r3, r7
 80064a0:	f7fa fb12 	bl	8000ac8 <__aeabi_dcmpeq>
 80064a4:	b910      	cbnz	r0, 80064ac <_dtoa_r+0x184>
 80064a6:	9b00      	ldr	r3, [sp, #0]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	9b00      	ldr	r3, [sp, #0]
 80064ae:	2b16      	cmp	r3, #22
 80064b0:	d85a      	bhi.n	8006568 <_dtoa_r+0x240>
 80064b2:	9a00      	ldr	r2, [sp, #0]
 80064b4:	4b57      	ldr	r3, [pc, #348]	; (8006614 <_dtoa_r+0x2ec>)
 80064b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	ec51 0b19 	vmov	r0, r1, d9
 80064c2:	f7fa fb0b 	bl	8000adc <__aeabi_dcmplt>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d050      	beq.n	800656c <_dtoa_r+0x244>
 80064ca:	9b00      	ldr	r3, [sp, #0]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	2300      	movs	r3, #0
 80064d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80064d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064d6:	1b5d      	subs	r5, r3, r5
 80064d8:	1e6b      	subs	r3, r5, #1
 80064da:	9305      	str	r3, [sp, #20]
 80064dc:	bf45      	ittet	mi
 80064de:	f1c5 0301 	rsbmi	r3, r5, #1
 80064e2:	9304      	strmi	r3, [sp, #16]
 80064e4:	2300      	movpl	r3, #0
 80064e6:	2300      	movmi	r3, #0
 80064e8:	bf4c      	ite	mi
 80064ea:	9305      	strmi	r3, [sp, #20]
 80064ec:	9304      	strpl	r3, [sp, #16]
 80064ee:	9b00      	ldr	r3, [sp, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	db3d      	blt.n	8006570 <_dtoa_r+0x248>
 80064f4:	9b05      	ldr	r3, [sp, #20]
 80064f6:	9a00      	ldr	r2, [sp, #0]
 80064f8:	920a      	str	r2, [sp, #40]	; 0x28
 80064fa:	4413      	add	r3, r2
 80064fc:	9305      	str	r3, [sp, #20]
 80064fe:	2300      	movs	r3, #0
 8006500:	9307      	str	r3, [sp, #28]
 8006502:	9b06      	ldr	r3, [sp, #24]
 8006504:	2b09      	cmp	r3, #9
 8006506:	f200 8089 	bhi.w	800661c <_dtoa_r+0x2f4>
 800650a:	2b05      	cmp	r3, #5
 800650c:	bfc4      	itt	gt
 800650e:	3b04      	subgt	r3, #4
 8006510:	9306      	strgt	r3, [sp, #24]
 8006512:	9b06      	ldr	r3, [sp, #24]
 8006514:	f1a3 0302 	sub.w	r3, r3, #2
 8006518:	bfcc      	ite	gt
 800651a:	2500      	movgt	r5, #0
 800651c:	2501      	movle	r5, #1
 800651e:	2b03      	cmp	r3, #3
 8006520:	f200 8087 	bhi.w	8006632 <_dtoa_r+0x30a>
 8006524:	e8df f003 	tbb	[pc, r3]
 8006528:	59383a2d 	.word	0x59383a2d
 800652c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006530:	441d      	add	r5, r3
 8006532:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006536:	2b20      	cmp	r3, #32
 8006538:	bfc1      	itttt	gt
 800653a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800653e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006542:	fa0b f303 	lslgt.w	r3, fp, r3
 8006546:	fa26 f000 	lsrgt.w	r0, r6, r0
 800654a:	bfda      	itte	le
 800654c:	f1c3 0320 	rsble	r3, r3, #32
 8006550:	fa06 f003 	lslle.w	r0, r6, r3
 8006554:	4318      	orrgt	r0, r3
 8006556:	f7f9 ffd5 	bl	8000504 <__aeabi_ui2d>
 800655a:	2301      	movs	r3, #1
 800655c:	4606      	mov	r6, r0
 800655e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006562:	3d01      	subs	r5, #1
 8006564:	930e      	str	r3, [sp, #56]	; 0x38
 8006566:	e76a      	b.n	800643e <_dtoa_r+0x116>
 8006568:	2301      	movs	r3, #1
 800656a:	e7b2      	b.n	80064d2 <_dtoa_r+0x1aa>
 800656c:	900b      	str	r0, [sp, #44]	; 0x2c
 800656e:	e7b1      	b.n	80064d4 <_dtoa_r+0x1ac>
 8006570:	9b04      	ldr	r3, [sp, #16]
 8006572:	9a00      	ldr	r2, [sp, #0]
 8006574:	1a9b      	subs	r3, r3, r2
 8006576:	9304      	str	r3, [sp, #16]
 8006578:	4253      	negs	r3, r2
 800657a:	9307      	str	r3, [sp, #28]
 800657c:	2300      	movs	r3, #0
 800657e:	930a      	str	r3, [sp, #40]	; 0x28
 8006580:	e7bf      	b.n	8006502 <_dtoa_r+0x1da>
 8006582:	2300      	movs	r3, #0
 8006584:	9308      	str	r3, [sp, #32]
 8006586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006588:	2b00      	cmp	r3, #0
 800658a:	dc55      	bgt.n	8006638 <_dtoa_r+0x310>
 800658c:	2301      	movs	r3, #1
 800658e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006592:	461a      	mov	r2, r3
 8006594:	9209      	str	r2, [sp, #36]	; 0x24
 8006596:	e00c      	b.n	80065b2 <_dtoa_r+0x28a>
 8006598:	2301      	movs	r3, #1
 800659a:	e7f3      	b.n	8006584 <_dtoa_r+0x25c>
 800659c:	2300      	movs	r3, #0
 800659e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065a0:	9308      	str	r3, [sp, #32]
 80065a2:	9b00      	ldr	r3, [sp, #0]
 80065a4:	4413      	add	r3, r2
 80065a6:	9302      	str	r3, [sp, #8]
 80065a8:	3301      	adds	r3, #1
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	9303      	str	r3, [sp, #12]
 80065ae:	bfb8      	it	lt
 80065b0:	2301      	movlt	r3, #1
 80065b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80065b4:	2200      	movs	r2, #0
 80065b6:	6042      	str	r2, [r0, #4]
 80065b8:	2204      	movs	r2, #4
 80065ba:	f102 0614 	add.w	r6, r2, #20
 80065be:	429e      	cmp	r6, r3
 80065c0:	6841      	ldr	r1, [r0, #4]
 80065c2:	d93d      	bls.n	8006640 <_dtoa_r+0x318>
 80065c4:	4620      	mov	r0, r4
 80065c6:	f000 fec9 	bl	800735c <_Balloc>
 80065ca:	9001      	str	r0, [sp, #4]
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d13b      	bne.n	8006648 <_dtoa_r+0x320>
 80065d0:	4b11      	ldr	r3, [pc, #68]	; (8006618 <_dtoa_r+0x2f0>)
 80065d2:	4602      	mov	r2, r0
 80065d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80065d8:	e6c0      	b.n	800635c <_dtoa_r+0x34>
 80065da:	2301      	movs	r3, #1
 80065dc:	e7df      	b.n	800659e <_dtoa_r+0x276>
 80065de:	bf00      	nop
 80065e0:	636f4361 	.word	0x636f4361
 80065e4:	3fd287a7 	.word	0x3fd287a7
 80065e8:	8b60c8b3 	.word	0x8b60c8b3
 80065ec:	3fc68a28 	.word	0x3fc68a28
 80065f0:	509f79fb 	.word	0x509f79fb
 80065f4:	3fd34413 	.word	0x3fd34413
 80065f8:	0800b945 	.word	0x0800b945
 80065fc:	0800b95c 	.word	0x0800b95c
 8006600:	7ff00000 	.word	0x7ff00000
 8006604:	0800b941 	.word	0x0800b941
 8006608:	0800b938 	.word	0x0800b938
 800660c:	0800b915 	.word	0x0800b915
 8006610:	3ff80000 	.word	0x3ff80000
 8006614:	0800bab0 	.word	0x0800bab0
 8006618:	0800b9b7 	.word	0x0800b9b7
 800661c:	2501      	movs	r5, #1
 800661e:	2300      	movs	r3, #0
 8006620:	9306      	str	r3, [sp, #24]
 8006622:	9508      	str	r5, [sp, #32]
 8006624:	f04f 33ff 	mov.w	r3, #4294967295
 8006628:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800662c:	2200      	movs	r2, #0
 800662e:	2312      	movs	r3, #18
 8006630:	e7b0      	b.n	8006594 <_dtoa_r+0x26c>
 8006632:	2301      	movs	r3, #1
 8006634:	9308      	str	r3, [sp, #32]
 8006636:	e7f5      	b.n	8006624 <_dtoa_r+0x2fc>
 8006638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800663a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800663e:	e7b8      	b.n	80065b2 <_dtoa_r+0x28a>
 8006640:	3101      	adds	r1, #1
 8006642:	6041      	str	r1, [r0, #4]
 8006644:	0052      	lsls	r2, r2, #1
 8006646:	e7b8      	b.n	80065ba <_dtoa_r+0x292>
 8006648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800664a:	9a01      	ldr	r2, [sp, #4]
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	2b0e      	cmp	r3, #14
 8006652:	f200 809d 	bhi.w	8006790 <_dtoa_r+0x468>
 8006656:	2d00      	cmp	r5, #0
 8006658:	f000 809a 	beq.w	8006790 <_dtoa_r+0x468>
 800665c:	9b00      	ldr	r3, [sp, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	dd32      	ble.n	80066c8 <_dtoa_r+0x3a0>
 8006662:	4ab7      	ldr	r2, [pc, #732]	; (8006940 <_dtoa_r+0x618>)
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800666c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006670:	9b00      	ldr	r3, [sp, #0]
 8006672:	05d8      	lsls	r0, r3, #23
 8006674:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006678:	d516      	bpl.n	80066a8 <_dtoa_r+0x380>
 800667a:	4bb2      	ldr	r3, [pc, #712]	; (8006944 <_dtoa_r+0x61c>)
 800667c:	ec51 0b19 	vmov	r0, r1, d9
 8006680:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006684:	f7fa f8e2 	bl	800084c <__aeabi_ddiv>
 8006688:	f007 070f 	and.w	r7, r7, #15
 800668c:	4682      	mov	sl, r0
 800668e:	468b      	mov	fp, r1
 8006690:	2503      	movs	r5, #3
 8006692:	4eac      	ldr	r6, [pc, #688]	; (8006944 <_dtoa_r+0x61c>)
 8006694:	b957      	cbnz	r7, 80066ac <_dtoa_r+0x384>
 8006696:	4642      	mov	r2, r8
 8006698:	464b      	mov	r3, r9
 800669a:	4650      	mov	r0, sl
 800669c:	4659      	mov	r1, fp
 800669e:	f7fa f8d5 	bl	800084c <__aeabi_ddiv>
 80066a2:	4682      	mov	sl, r0
 80066a4:	468b      	mov	fp, r1
 80066a6:	e028      	b.n	80066fa <_dtoa_r+0x3d2>
 80066a8:	2502      	movs	r5, #2
 80066aa:	e7f2      	b.n	8006692 <_dtoa_r+0x36a>
 80066ac:	07f9      	lsls	r1, r7, #31
 80066ae:	d508      	bpl.n	80066c2 <_dtoa_r+0x39a>
 80066b0:	4640      	mov	r0, r8
 80066b2:	4649      	mov	r1, r9
 80066b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066b8:	f7f9 ff9e 	bl	80005f8 <__aeabi_dmul>
 80066bc:	3501      	adds	r5, #1
 80066be:	4680      	mov	r8, r0
 80066c0:	4689      	mov	r9, r1
 80066c2:	107f      	asrs	r7, r7, #1
 80066c4:	3608      	adds	r6, #8
 80066c6:	e7e5      	b.n	8006694 <_dtoa_r+0x36c>
 80066c8:	f000 809b 	beq.w	8006802 <_dtoa_r+0x4da>
 80066cc:	9b00      	ldr	r3, [sp, #0]
 80066ce:	4f9d      	ldr	r7, [pc, #628]	; (8006944 <_dtoa_r+0x61c>)
 80066d0:	425e      	negs	r6, r3
 80066d2:	4b9b      	ldr	r3, [pc, #620]	; (8006940 <_dtoa_r+0x618>)
 80066d4:	f006 020f 	and.w	r2, r6, #15
 80066d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	ec51 0b19 	vmov	r0, r1, d9
 80066e4:	f7f9 ff88 	bl	80005f8 <__aeabi_dmul>
 80066e8:	1136      	asrs	r6, r6, #4
 80066ea:	4682      	mov	sl, r0
 80066ec:	468b      	mov	fp, r1
 80066ee:	2300      	movs	r3, #0
 80066f0:	2502      	movs	r5, #2
 80066f2:	2e00      	cmp	r6, #0
 80066f4:	d17a      	bne.n	80067ec <_dtoa_r+0x4c4>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1d3      	bne.n	80066a2 <_dtoa_r+0x37a>
 80066fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8082 	beq.w	8006806 <_dtoa_r+0x4de>
 8006702:	4b91      	ldr	r3, [pc, #580]	; (8006948 <_dtoa_r+0x620>)
 8006704:	2200      	movs	r2, #0
 8006706:	4650      	mov	r0, sl
 8006708:	4659      	mov	r1, fp
 800670a:	f7fa f9e7 	bl	8000adc <__aeabi_dcmplt>
 800670e:	2800      	cmp	r0, #0
 8006710:	d079      	beq.n	8006806 <_dtoa_r+0x4de>
 8006712:	9b03      	ldr	r3, [sp, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d076      	beq.n	8006806 <_dtoa_r+0x4de>
 8006718:	9b02      	ldr	r3, [sp, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	dd36      	ble.n	800678c <_dtoa_r+0x464>
 800671e:	9b00      	ldr	r3, [sp, #0]
 8006720:	4650      	mov	r0, sl
 8006722:	4659      	mov	r1, fp
 8006724:	1e5f      	subs	r7, r3, #1
 8006726:	2200      	movs	r2, #0
 8006728:	4b88      	ldr	r3, [pc, #544]	; (800694c <_dtoa_r+0x624>)
 800672a:	f7f9 ff65 	bl	80005f8 <__aeabi_dmul>
 800672e:	9e02      	ldr	r6, [sp, #8]
 8006730:	4682      	mov	sl, r0
 8006732:	468b      	mov	fp, r1
 8006734:	3501      	adds	r5, #1
 8006736:	4628      	mov	r0, r5
 8006738:	f7f9 fef4 	bl	8000524 <__aeabi_i2d>
 800673c:	4652      	mov	r2, sl
 800673e:	465b      	mov	r3, fp
 8006740:	f7f9 ff5a 	bl	80005f8 <__aeabi_dmul>
 8006744:	4b82      	ldr	r3, [pc, #520]	; (8006950 <_dtoa_r+0x628>)
 8006746:	2200      	movs	r2, #0
 8006748:	f7f9 fda0 	bl	800028c <__adddf3>
 800674c:	46d0      	mov	r8, sl
 800674e:	46d9      	mov	r9, fp
 8006750:	4682      	mov	sl, r0
 8006752:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006756:	2e00      	cmp	r6, #0
 8006758:	d158      	bne.n	800680c <_dtoa_r+0x4e4>
 800675a:	4b7e      	ldr	r3, [pc, #504]	; (8006954 <_dtoa_r+0x62c>)
 800675c:	2200      	movs	r2, #0
 800675e:	4640      	mov	r0, r8
 8006760:	4649      	mov	r1, r9
 8006762:	f7f9 fd91 	bl	8000288 <__aeabi_dsub>
 8006766:	4652      	mov	r2, sl
 8006768:	465b      	mov	r3, fp
 800676a:	4680      	mov	r8, r0
 800676c:	4689      	mov	r9, r1
 800676e:	f7fa f9d3 	bl	8000b18 <__aeabi_dcmpgt>
 8006772:	2800      	cmp	r0, #0
 8006774:	f040 8295 	bne.w	8006ca2 <_dtoa_r+0x97a>
 8006778:	4652      	mov	r2, sl
 800677a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800677e:	4640      	mov	r0, r8
 8006780:	4649      	mov	r1, r9
 8006782:	f7fa f9ab 	bl	8000adc <__aeabi_dcmplt>
 8006786:	2800      	cmp	r0, #0
 8006788:	f040 8289 	bne.w	8006c9e <_dtoa_r+0x976>
 800678c:	ec5b ab19 	vmov	sl, fp, d9
 8006790:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006792:	2b00      	cmp	r3, #0
 8006794:	f2c0 8148 	blt.w	8006a28 <_dtoa_r+0x700>
 8006798:	9a00      	ldr	r2, [sp, #0]
 800679a:	2a0e      	cmp	r2, #14
 800679c:	f300 8144 	bgt.w	8006a28 <_dtoa_r+0x700>
 80067a0:	4b67      	ldr	r3, [pc, #412]	; (8006940 <_dtoa_r+0x618>)
 80067a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f280 80d5 	bge.w	800695c <_dtoa_r+0x634>
 80067b2:	9b03      	ldr	r3, [sp, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f300 80d1 	bgt.w	800695c <_dtoa_r+0x634>
 80067ba:	f040 826f 	bne.w	8006c9c <_dtoa_r+0x974>
 80067be:	4b65      	ldr	r3, [pc, #404]	; (8006954 <_dtoa_r+0x62c>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	4640      	mov	r0, r8
 80067c4:	4649      	mov	r1, r9
 80067c6:	f7f9 ff17 	bl	80005f8 <__aeabi_dmul>
 80067ca:	4652      	mov	r2, sl
 80067cc:	465b      	mov	r3, fp
 80067ce:	f7fa f999 	bl	8000b04 <__aeabi_dcmpge>
 80067d2:	9e03      	ldr	r6, [sp, #12]
 80067d4:	4637      	mov	r7, r6
 80067d6:	2800      	cmp	r0, #0
 80067d8:	f040 8245 	bne.w	8006c66 <_dtoa_r+0x93e>
 80067dc:	9d01      	ldr	r5, [sp, #4]
 80067de:	2331      	movs	r3, #49	; 0x31
 80067e0:	f805 3b01 	strb.w	r3, [r5], #1
 80067e4:	9b00      	ldr	r3, [sp, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	e240      	b.n	8006c6e <_dtoa_r+0x946>
 80067ec:	07f2      	lsls	r2, r6, #31
 80067ee:	d505      	bpl.n	80067fc <_dtoa_r+0x4d4>
 80067f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067f4:	f7f9 ff00 	bl	80005f8 <__aeabi_dmul>
 80067f8:	3501      	adds	r5, #1
 80067fa:	2301      	movs	r3, #1
 80067fc:	1076      	asrs	r6, r6, #1
 80067fe:	3708      	adds	r7, #8
 8006800:	e777      	b.n	80066f2 <_dtoa_r+0x3ca>
 8006802:	2502      	movs	r5, #2
 8006804:	e779      	b.n	80066fa <_dtoa_r+0x3d2>
 8006806:	9f00      	ldr	r7, [sp, #0]
 8006808:	9e03      	ldr	r6, [sp, #12]
 800680a:	e794      	b.n	8006736 <_dtoa_r+0x40e>
 800680c:	9901      	ldr	r1, [sp, #4]
 800680e:	4b4c      	ldr	r3, [pc, #304]	; (8006940 <_dtoa_r+0x618>)
 8006810:	4431      	add	r1, r6
 8006812:	910d      	str	r1, [sp, #52]	; 0x34
 8006814:	9908      	ldr	r1, [sp, #32]
 8006816:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800681a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800681e:	2900      	cmp	r1, #0
 8006820:	d043      	beq.n	80068aa <_dtoa_r+0x582>
 8006822:	494d      	ldr	r1, [pc, #308]	; (8006958 <_dtoa_r+0x630>)
 8006824:	2000      	movs	r0, #0
 8006826:	f7fa f811 	bl	800084c <__aeabi_ddiv>
 800682a:	4652      	mov	r2, sl
 800682c:	465b      	mov	r3, fp
 800682e:	f7f9 fd2b 	bl	8000288 <__aeabi_dsub>
 8006832:	9d01      	ldr	r5, [sp, #4]
 8006834:	4682      	mov	sl, r0
 8006836:	468b      	mov	fp, r1
 8006838:	4649      	mov	r1, r9
 800683a:	4640      	mov	r0, r8
 800683c:	f7fa f98c 	bl	8000b58 <__aeabi_d2iz>
 8006840:	4606      	mov	r6, r0
 8006842:	f7f9 fe6f 	bl	8000524 <__aeabi_i2d>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4640      	mov	r0, r8
 800684c:	4649      	mov	r1, r9
 800684e:	f7f9 fd1b 	bl	8000288 <__aeabi_dsub>
 8006852:	3630      	adds	r6, #48	; 0x30
 8006854:	f805 6b01 	strb.w	r6, [r5], #1
 8006858:	4652      	mov	r2, sl
 800685a:	465b      	mov	r3, fp
 800685c:	4680      	mov	r8, r0
 800685e:	4689      	mov	r9, r1
 8006860:	f7fa f93c 	bl	8000adc <__aeabi_dcmplt>
 8006864:	2800      	cmp	r0, #0
 8006866:	d163      	bne.n	8006930 <_dtoa_r+0x608>
 8006868:	4642      	mov	r2, r8
 800686a:	464b      	mov	r3, r9
 800686c:	4936      	ldr	r1, [pc, #216]	; (8006948 <_dtoa_r+0x620>)
 800686e:	2000      	movs	r0, #0
 8006870:	f7f9 fd0a 	bl	8000288 <__aeabi_dsub>
 8006874:	4652      	mov	r2, sl
 8006876:	465b      	mov	r3, fp
 8006878:	f7fa f930 	bl	8000adc <__aeabi_dcmplt>
 800687c:	2800      	cmp	r0, #0
 800687e:	f040 80b5 	bne.w	80069ec <_dtoa_r+0x6c4>
 8006882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006884:	429d      	cmp	r5, r3
 8006886:	d081      	beq.n	800678c <_dtoa_r+0x464>
 8006888:	4b30      	ldr	r3, [pc, #192]	; (800694c <_dtoa_r+0x624>)
 800688a:	2200      	movs	r2, #0
 800688c:	4650      	mov	r0, sl
 800688e:	4659      	mov	r1, fp
 8006890:	f7f9 feb2 	bl	80005f8 <__aeabi_dmul>
 8006894:	4b2d      	ldr	r3, [pc, #180]	; (800694c <_dtoa_r+0x624>)
 8006896:	4682      	mov	sl, r0
 8006898:	468b      	mov	fp, r1
 800689a:	4640      	mov	r0, r8
 800689c:	4649      	mov	r1, r9
 800689e:	2200      	movs	r2, #0
 80068a0:	f7f9 feaa 	bl	80005f8 <__aeabi_dmul>
 80068a4:	4680      	mov	r8, r0
 80068a6:	4689      	mov	r9, r1
 80068a8:	e7c6      	b.n	8006838 <_dtoa_r+0x510>
 80068aa:	4650      	mov	r0, sl
 80068ac:	4659      	mov	r1, fp
 80068ae:	f7f9 fea3 	bl	80005f8 <__aeabi_dmul>
 80068b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068b4:	9d01      	ldr	r5, [sp, #4]
 80068b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80068b8:	4682      	mov	sl, r0
 80068ba:	468b      	mov	fp, r1
 80068bc:	4649      	mov	r1, r9
 80068be:	4640      	mov	r0, r8
 80068c0:	f7fa f94a 	bl	8000b58 <__aeabi_d2iz>
 80068c4:	4606      	mov	r6, r0
 80068c6:	f7f9 fe2d 	bl	8000524 <__aeabi_i2d>
 80068ca:	3630      	adds	r6, #48	; 0x30
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4640      	mov	r0, r8
 80068d2:	4649      	mov	r1, r9
 80068d4:	f7f9 fcd8 	bl	8000288 <__aeabi_dsub>
 80068d8:	f805 6b01 	strb.w	r6, [r5], #1
 80068dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068de:	429d      	cmp	r5, r3
 80068e0:	4680      	mov	r8, r0
 80068e2:	4689      	mov	r9, r1
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	d124      	bne.n	8006934 <_dtoa_r+0x60c>
 80068ea:	4b1b      	ldr	r3, [pc, #108]	; (8006958 <_dtoa_r+0x630>)
 80068ec:	4650      	mov	r0, sl
 80068ee:	4659      	mov	r1, fp
 80068f0:	f7f9 fccc 	bl	800028c <__adddf3>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4640      	mov	r0, r8
 80068fa:	4649      	mov	r1, r9
 80068fc:	f7fa f90c 	bl	8000b18 <__aeabi_dcmpgt>
 8006900:	2800      	cmp	r0, #0
 8006902:	d173      	bne.n	80069ec <_dtoa_r+0x6c4>
 8006904:	4652      	mov	r2, sl
 8006906:	465b      	mov	r3, fp
 8006908:	4913      	ldr	r1, [pc, #76]	; (8006958 <_dtoa_r+0x630>)
 800690a:	2000      	movs	r0, #0
 800690c:	f7f9 fcbc 	bl	8000288 <__aeabi_dsub>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	4640      	mov	r0, r8
 8006916:	4649      	mov	r1, r9
 8006918:	f7fa f8e0 	bl	8000adc <__aeabi_dcmplt>
 800691c:	2800      	cmp	r0, #0
 800691e:	f43f af35 	beq.w	800678c <_dtoa_r+0x464>
 8006922:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006924:	1e6b      	subs	r3, r5, #1
 8006926:	930f      	str	r3, [sp, #60]	; 0x3c
 8006928:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800692c:	2b30      	cmp	r3, #48	; 0x30
 800692e:	d0f8      	beq.n	8006922 <_dtoa_r+0x5fa>
 8006930:	9700      	str	r7, [sp, #0]
 8006932:	e049      	b.n	80069c8 <_dtoa_r+0x6a0>
 8006934:	4b05      	ldr	r3, [pc, #20]	; (800694c <_dtoa_r+0x624>)
 8006936:	f7f9 fe5f 	bl	80005f8 <__aeabi_dmul>
 800693a:	4680      	mov	r8, r0
 800693c:	4689      	mov	r9, r1
 800693e:	e7bd      	b.n	80068bc <_dtoa_r+0x594>
 8006940:	0800bab0 	.word	0x0800bab0
 8006944:	0800ba88 	.word	0x0800ba88
 8006948:	3ff00000 	.word	0x3ff00000
 800694c:	40240000 	.word	0x40240000
 8006950:	401c0000 	.word	0x401c0000
 8006954:	40140000 	.word	0x40140000
 8006958:	3fe00000 	.word	0x3fe00000
 800695c:	9d01      	ldr	r5, [sp, #4]
 800695e:	4656      	mov	r6, sl
 8006960:	465f      	mov	r7, fp
 8006962:	4642      	mov	r2, r8
 8006964:	464b      	mov	r3, r9
 8006966:	4630      	mov	r0, r6
 8006968:	4639      	mov	r1, r7
 800696a:	f7f9 ff6f 	bl	800084c <__aeabi_ddiv>
 800696e:	f7fa f8f3 	bl	8000b58 <__aeabi_d2iz>
 8006972:	4682      	mov	sl, r0
 8006974:	f7f9 fdd6 	bl	8000524 <__aeabi_i2d>
 8006978:	4642      	mov	r2, r8
 800697a:	464b      	mov	r3, r9
 800697c:	f7f9 fe3c 	bl	80005f8 <__aeabi_dmul>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4630      	mov	r0, r6
 8006986:	4639      	mov	r1, r7
 8006988:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800698c:	f7f9 fc7c 	bl	8000288 <__aeabi_dsub>
 8006990:	f805 6b01 	strb.w	r6, [r5], #1
 8006994:	9e01      	ldr	r6, [sp, #4]
 8006996:	9f03      	ldr	r7, [sp, #12]
 8006998:	1bae      	subs	r6, r5, r6
 800699a:	42b7      	cmp	r7, r6
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	d135      	bne.n	8006a0e <_dtoa_r+0x6e6>
 80069a2:	f7f9 fc73 	bl	800028c <__adddf3>
 80069a6:	4642      	mov	r2, r8
 80069a8:	464b      	mov	r3, r9
 80069aa:	4606      	mov	r6, r0
 80069ac:	460f      	mov	r7, r1
 80069ae:	f7fa f8b3 	bl	8000b18 <__aeabi_dcmpgt>
 80069b2:	b9d0      	cbnz	r0, 80069ea <_dtoa_r+0x6c2>
 80069b4:	4642      	mov	r2, r8
 80069b6:	464b      	mov	r3, r9
 80069b8:	4630      	mov	r0, r6
 80069ba:	4639      	mov	r1, r7
 80069bc:	f7fa f884 	bl	8000ac8 <__aeabi_dcmpeq>
 80069c0:	b110      	cbz	r0, 80069c8 <_dtoa_r+0x6a0>
 80069c2:	f01a 0f01 	tst.w	sl, #1
 80069c6:	d110      	bne.n	80069ea <_dtoa_r+0x6c2>
 80069c8:	4620      	mov	r0, r4
 80069ca:	ee18 1a10 	vmov	r1, s16
 80069ce:	f000 fd05 	bl	80073dc <_Bfree>
 80069d2:	2300      	movs	r3, #0
 80069d4:	9800      	ldr	r0, [sp, #0]
 80069d6:	702b      	strb	r3, [r5, #0]
 80069d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069da:	3001      	adds	r0, #1
 80069dc:	6018      	str	r0, [r3, #0]
 80069de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f43f acf1 	beq.w	80063c8 <_dtoa_r+0xa0>
 80069e6:	601d      	str	r5, [r3, #0]
 80069e8:	e4ee      	b.n	80063c8 <_dtoa_r+0xa0>
 80069ea:	9f00      	ldr	r7, [sp, #0]
 80069ec:	462b      	mov	r3, r5
 80069ee:	461d      	mov	r5, r3
 80069f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069f4:	2a39      	cmp	r2, #57	; 0x39
 80069f6:	d106      	bne.n	8006a06 <_dtoa_r+0x6de>
 80069f8:	9a01      	ldr	r2, [sp, #4]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d1f7      	bne.n	80069ee <_dtoa_r+0x6c6>
 80069fe:	9901      	ldr	r1, [sp, #4]
 8006a00:	2230      	movs	r2, #48	; 0x30
 8006a02:	3701      	adds	r7, #1
 8006a04:	700a      	strb	r2, [r1, #0]
 8006a06:	781a      	ldrb	r2, [r3, #0]
 8006a08:	3201      	adds	r2, #1
 8006a0a:	701a      	strb	r2, [r3, #0]
 8006a0c:	e790      	b.n	8006930 <_dtoa_r+0x608>
 8006a0e:	4ba6      	ldr	r3, [pc, #664]	; (8006ca8 <_dtoa_r+0x980>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	f7f9 fdf1 	bl	80005f8 <__aeabi_dmul>
 8006a16:	2200      	movs	r2, #0
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	460f      	mov	r7, r1
 8006a1e:	f7fa f853 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d09d      	beq.n	8006962 <_dtoa_r+0x63a>
 8006a26:	e7cf      	b.n	80069c8 <_dtoa_r+0x6a0>
 8006a28:	9a08      	ldr	r2, [sp, #32]
 8006a2a:	2a00      	cmp	r2, #0
 8006a2c:	f000 80d7 	beq.w	8006bde <_dtoa_r+0x8b6>
 8006a30:	9a06      	ldr	r2, [sp, #24]
 8006a32:	2a01      	cmp	r2, #1
 8006a34:	f300 80ba 	bgt.w	8006bac <_dtoa_r+0x884>
 8006a38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a3a:	2a00      	cmp	r2, #0
 8006a3c:	f000 80b2 	beq.w	8006ba4 <_dtoa_r+0x87c>
 8006a40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a44:	9e07      	ldr	r6, [sp, #28]
 8006a46:	9d04      	ldr	r5, [sp, #16]
 8006a48:	9a04      	ldr	r2, [sp, #16]
 8006a4a:	441a      	add	r2, r3
 8006a4c:	9204      	str	r2, [sp, #16]
 8006a4e:	9a05      	ldr	r2, [sp, #20]
 8006a50:	2101      	movs	r1, #1
 8006a52:	441a      	add	r2, r3
 8006a54:	4620      	mov	r0, r4
 8006a56:	9205      	str	r2, [sp, #20]
 8006a58:	f000 fd78 	bl	800754c <__i2b>
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	2d00      	cmp	r5, #0
 8006a60:	dd0c      	ble.n	8006a7c <_dtoa_r+0x754>
 8006a62:	9b05      	ldr	r3, [sp, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dd09      	ble.n	8006a7c <_dtoa_r+0x754>
 8006a68:	42ab      	cmp	r3, r5
 8006a6a:	9a04      	ldr	r2, [sp, #16]
 8006a6c:	bfa8      	it	ge
 8006a6e:	462b      	movge	r3, r5
 8006a70:	1ad2      	subs	r2, r2, r3
 8006a72:	9204      	str	r2, [sp, #16]
 8006a74:	9a05      	ldr	r2, [sp, #20]
 8006a76:	1aed      	subs	r5, r5, r3
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	9305      	str	r3, [sp, #20]
 8006a7c:	9b07      	ldr	r3, [sp, #28]
 8006a7e:	b31b      	cbz	r3, 8006ac8 <_dtoa_r+0x7a0>
 8006a80:	9b08      	ldr	r3, [sp, #32]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 80af 	beq.w	8006be6 <_dtoa_r+0x8be>
 8006a88:	2e00      	cmp	r6, #0
 8006a8a:	dd13      	ble.n	8006ab4 <_dtoa_r+0x78c>
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	4632      	mov	r2, r6
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 fe1b 	bl	80076cc <__pow5mult>
 8006a96:	ee18 2a10 	vmov	r2, s16
 8006a9a:	4601      	mov	r1, r0
 8006a9c:	4607      	mov	r7, r0
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f000 fd6a 	bl	8007578 <__multiply>
 8006aa4:	ee18 1a10 	vmov	r1, s16
 8006aa8:	4680      	mov	r8, r0
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f000 fc96 	bl	80073dc <_Bfree>
 8006ab0:	ee08 8a10 	vmov	s16, r8
 8006ab4:	9b07      	ldr	r3, [sp, #28]
 8006ab6:	1b9a      	subs	r2, r3, r6
 8006ab8:	d006      	beq.n	8006ac8 <_dtoa_r+0x7a0>
 8006aba:	ee18 1a10 	vmov	r1, s16
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f000 fe04 	bl	80076cc <__pow5mult>
 8006ac4:	ee08 0a10 	vmov	s16, r0
 8006ac8:	2101      	movs	r1, #1
 8006aca:	4620      	mov	r0, r4
 8006acc:	f000 fd3e 	bl	800754c <__i2b>
 8006ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	f340 8088 	ble.w	8006bea <_dtoa_r+0x8c2>
 8006ada:	461a      	mov	r2, r3
 8006adc:	4601      	mov	r1, r0
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f000 fdf4 	bl	80076cc <__pow5mult>
 8006ae4:	9b06      	ldr	r3, [sp, #24]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	4606      	mov	r6, r0
 8006aea:	f340 8081 	ble.w	8006bf0 <_dtoa_r+0x8c8>
 8006aee:	f04f 0800 	mov.w	r8, #0
 8006af2:	6933      	ldr	r3, [r6, #16]
 8006af4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006af8:	6918      	ldr	r0, [r3, #16]
 8006afa:	f000 fcd7 	bl	80074ac <__hi0bits>
 8006afe:	f1c0 0020 	rsb	r0, r0, #32
 8006b02:	9b05      	ldr	r3, [sp, #20]
 8006b04:	4418      	add	r0, r3
 8006b06:	f010 001f 	ands.w	r0, r0, #31
 8006b0a:	f000 8092 	beq.w	8006c32 <_dtoa_r+0x90a>
 8006b0e:	f1c0 0320 	rsb	r3, r0, #32
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	f340 808a 	ble.w	8006c2c <_dtoa_r+0x904>
 8006b18:	f1c0 001c 	rsb	r0, r0, #28
 8006b1c:	9b04      	ldr	r3, [sp, #16]
 8006b1e:	4403      	add	r3, r0
 8006b20:	9304      	str	r3, [sp, #16]
 8006b22:	9b05      	ldr	r3, [sp, #20]
 8006b24:	4403      	add	r3, r0
 8006b26:	4405      	add	r5, r0
 8006b28:	9305      	str	r3, [sp, #20]
 8006b2a:	9b04      	ldr	r3, [sp, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dd07      	ble.n	8006b40 <_dtoa_r+0x818>
 8006b30:	ee18 1a10 	vmov	r1, s16
 8006b34:	461a      	mov	r2, r3
 8006b36:	4620      	mov	r0, r4
 8006b38:	f000 fe22 	bl	8007780 <__lshift>
 8006b3c:	ee08 0a10 	vmov	s16, r0
 8006b40:	9b05      	ldr	r3, [sp, #20]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	dd05      	ble.n	8006b52 <_dtoa_r+0x82a>
 8006b46:	4631      	mov	r1, r6
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f000 fe18 	bl	8007780 <__lshift>
 8006b50:	4606      	mov	r6, r0
 8006b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d06e      	beq.n	8006c36 <_dtoa_r+0x90e>
 8006b58:	ee18 0a10 	vmov	r0, s16
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	f000 fe7f 	bl	8007860 <__mcmp>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	da67      	bge.n	8006c36 <_dtoa_r+0x90e>
 8006b66:	9b00      	ldr	r3, [sp, #0]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	ee18 1a10 	vmov	r1, s16
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	220a      	movs	r2, #10
 8006b72:	2300      	movs	r3, #0
 8006b74:	4620      	mov	r0, r4
 8006b76:	f000 fc53 	bl	8007420 <__multadd>
 8006b7a:	9b08      	ldr	r3, [sp, #32]
 8006b7c:	ee08 0a10 	vmov	s16, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 81b1 	beq.w	8006ee8 <_dtoa_r+0xbc0>
 8006b86:	2300      	movs	r3, #0
 8006b88:	4639      	mov	r1, r7
 8006b8a:	220a      	movs	r2, #10
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 fc47 	bl	8007420 <__multadd>
 8006b92:	9b02      	ldr	r3, [sp, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	4607      	mov	r7, r0
 8006b98:	f300 808e 	bgt.w	8006cb8 <_dtoa_r+0x990>
 8006b9c:	9b06      	ldr	r3, [sp, #24]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	dc51      	bgt.n	8006c46 <_dtoa_r+0x91e>
 8006ba2:	e089      	b.n	8006cb8 <_dtoa_r+0x990>
 8006ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ba6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006baa:	e74b      	b.n	8006a44 <_dtoa_r+0x71c>
 8006bac:	9b03      	ldr	r3, [sp, #12]
 8006bae:	1e5e      	subs	r6, r3, #1
 8006bb0:	9b07      	ldr	r3, [sp, #28]
 8006bb2:	42b3      	cmp	r3, r6
 8006bb4:	bfbf      	itttt	lt
 8006bb6:	9b07      	ldrlt	r3, [sp, #28]
 8006bb8:	9607      	strlt	r6, [sp, #28]
 8006bba:	1af2      	sublt	r2, r6, r3
 8006bbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006bbe:	bfb6      	itet	lt
 8006bc0:	189b      	addlt	r3, r3, r2
 8006bc2:	1b9e      	subge	r6, r3, r6
 8006bc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006bc6:	9b03      	ldr	r3, [sp, #12]
 8006bc8:	bfb8      	it	lt
 8006bca:	2600      	movlt	r6, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	bfb7      	itett	lt
 8006bd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006bd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006bd8:	1a9d      	sublt	r5, r3, r2
 8006bda:	2300      	movlt	r3, #0
 8006bdc:	e734      	b.n	8006a48 <_dtoa_r+0x720>
 8006bde:	9e07      	ldr	r6, [sp, #28]
 8006be0:	9d04      	ldr	r5, [sp, #16]
 8006be2:	9f08      	ldr	r7, [sp, #32]
 8006be4:	e73b      	b.n	8006a5e <_dtoa_r+0x736>
 8006be6:	9a07      	ldr	r2, [sp, #28]
 8006be8:	e767      	b.n	8006aba <_dtoa_r+0x792>
 8006bea:	9b06      	ldr	r3, [sp, #24]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	dc18      	bgt.n	8006c22 <_dtoa_r+0x8fa>
 8006bf0:	f1ba 0f00 	cmp.w	sl, #0
 8006bf4:	d115      	bne.n	8006c22 <_dtoa_r+0x8fa>
 8006bf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bfa:	b993      	cbnz	r3, 8006c22 <_dtoa_r+0x8fa>
 8006bfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c00:	0d1b      	lsrs	r3, r3, #20
 8006c02:	051b      	lsls	r3, r3, #20
 8006c04:	b183      	cbz	r3, 8006c28 <_dtoa_r+0x900>
 8006c06:	9b04      	ldr	r3, [sp, #16]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	9304      	str	r3, [sp, #16]
 8006c0c:	9b05      	ldr	r3, [sp, #20]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	9305      	str	r3, [sp, #20]
 8006c12:	f04f 0801 	mov.w	r8, #1
 8006c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f47f af6a 	bne.w	8006af2 <_dtoa_r+0x7ca>
 8006c1e:	2001      	movs	r0, #1
 8006c20:	e76f      	b.n	8006b02 <_dtoa_r+0x7da>
 8006c22:	f04f 0800 	mov.w	r8, #0
 8006c26:	e7f6      	b.n	8006c16 <_dtoa_r+0x8ee>
 8006c28:	4698      	mov	r8, r3
 8006c2a:	e7f4      	b.n	8006c16 <_dtoa_r+0x8ee>
 8006c2c:	f43f af7d 	beq.w	8006b2a <_dtoa_r+0x802>
 8006c30:	4618      	mov	r0, r3
 8006c32:	301c      	adds	r0, #28
 8006c34:	e772      	b.n	8006b1c <_dtoa_r+0x7f4>
 8006c36:	9b03      	ldr	r3, [sp, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	dc37      	bgt.n	8006cac <_dtoa_r+0x984>
 8006c3c:	9b06      	ldr	r3, [sp, #24]
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	dd34      	ble.n	8006cac <_dtoa_r+0x984>
 8006c42:	9b03      	ldr	r3, [sp, #12]
 8006c44:	9302      	str	r3, [sp, #8]
 8006c46:	9b02      	ldr	r3, [sp, #8]
 8006c48:	b96b      	cbnz	r3, 8006c66 <_dtoa_r+0x93e>
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	2205      	movs	r2, #5
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f000 fbe6 	bl	8007420 <__multadd>
 8006c54:	4601      	mov	r1, r0
 8006c56:	4606      	mov	r6, r0
 8006c58:	ee18 0a10 	vmov	r0, s16
 8006c5c:	f000 fe00 	bl	8007860 <__mcmp>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	f73f adbb 	bgt.w	80067dc <_dtoa_r+0x4b4>
 8006c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c68:	9d01      	ldr	r5, [sp, #4]
 8006c6a:	43db      	mvns	r3, r3
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	f04f 0800 	mov.w	r8, #0
 8006c72:	4631      	mov	r1, r6
 8006c74:	4620      	mov	r0, r4
 8006c76:	f000 fbb1 	bl	80073dc <_Bfree>
 8006c7a:	2f00      	cmp	r7, #0
 8006c7c:	f43f aea4 	beq.w	80069c8 <_dtoa_r+0x6a0>
 8006c80:	f1b8 0f00 	cmp.w	r8, #0
 8006c84:	d005      	beq.n	8006c92 <_dtoa_r+0x96a>
 8006c86:	45b8      	cmp	r8, r7
 8006c88:	d003      	beq.n	8006c92 <_dtoa_r+0x96a>
 8006c8a:	4641      	mov	r1, r8
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 fba5 	bl	80073dc <_Bfree>
 8006c92:	4639      	mov	r1, r7
 8006c94:	4620      	mov	r0, r4
 8006c96:	f000 fba1 	bl	80073dc <_Bfree>
 8006c9a:	e695      	b.n	80069c8 <_dtoa_r+0x6a0>
 8006c9c:	2600      	movs	r6, #0
 8006c9e:	4637      	mov	r7, r6
 8006ca0:	e7e1      	b.n	8006c66 <_dtoa_r+0x93e>
 8006ca2:	9700      	str	r7, [sp, #0]
 8006ca4:	4637      	mov	r7, r6
 8006ca6:	e599      	b.n	80067dc <_dtoa_r+0x4b4>
 8006ca8:	40240000 	.word	0x40240000
 8006cac:	9b08      	ldr	r3, [sp, #32]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 80ca 	beq.w	8006e48 <_dtoa_r+0xb20>
 8006cb4:	9b03      	ldr	r3, [sp, #12]
 8006cb6:	9302      	str	r3, [sp, #8]
 8006cb8:	2d00      	cmp	r5, #0
 8006cba:	dd05      	ble.n	8006cc8 <_dtoa_r+0x9a0>
 8006cbc:	4639      	mov	r1, r7
 8006cbe:	462a      	mov	r2, r5
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 fd5d 	bl	8007780 <__lshift>
 8006cc6:	4607      	mov	r7, r0
 8006cc8:	f1b8 0f00 	cmp.w	r8, #0
 8006ccc:	d05b      	beq.n	8006d86 <_dtoa_r+0xa5e>
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f000 fb43 	bl	800735c <_Balloc>
 8006cd6:	4605      	mov	r5, r0
 8006cd8:	b928      	cbnz	r0, 8006ce6 <_dtoa_r+0x9be>
 8006cda:	4b87      	ldr	r3, [pc, #540]	; (8006ef8 <_dtoa_r+0xbd0>)
 8006cdc:	4602      	mov	r2, r0
 8006cde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ce2:	f7ff bb3b 	b.w	800635c <_dtoa_r+0x34>
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	3202      	adds	r2, #2
 8006cea:	0092      	lsls	r2, r2, #2
 8006cec:	f107 010c 	add.w	r1, r7, #12
 8006cf0:	300c      	adds	r0, #12
 8006cf2:	f7fe fc9d 	bl	8005630 <memcpy>
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 fd40 	bl	8007780 <__lshift>
 8006d00:	9b01      	ldr	r3, [sp, #4]
 8006d02:	f103 0901 	add.w	r9, r3, #1
 8006d06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	9305      	str	r3, [sp, #20]
 8006d0e:	f00a 0301 	and.w	r3, sl, #1
 8006d12:	46b8      	mov	r8, r7
 8006d14:	9304      	str	r3, [sp, #16]
 8006d16:	4607      	mov	r7, r0
 8006d18:	4631      	mov	r1, r6
 8006d1a:	ee18 0a10 	vmov	r0, s16
 8006d1e:	f7ff fa75 	bl	800620c <quorem>
 8006d22:	4641      	mov	r1, r8
 8006d24:	9002      	str	r0, [sp, #8]
 8006d26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d2a:	ee18 0a10 	vmov	r0, s16
 8006d2e:	f000 fd97 	bl	8007860 <__mcmp>
 8006d32:	463a      	mov	r2, r7
 8006d34:	9003      	str	r0, [sp, #12]
 8006d36:	4631      	mov	r1, r6
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 fdad 	bl	8007898 <__mdiff>
 8006d3e:	68c2      	ldr	r2, [r0, #12]
 8006d40:	f109 3bff 	add.w	fp, r9, #4294967295
 8006d44:	4605      	mov	r5, r0
 8006d46:	bb02      	cbnz	r2, 8006d8a <_dtoa_r+0xa62>
 8006d48:	4601      	mov	r1, r0
 8006d4a:	ee18 0a10 	vmov	r0, s16
 8006d4e:	f000 fd87 	bl	8007860 <__mcmp>
 8006d52:	4602      	mov	r2, r0
 8006d54:	4629      	mov	r1, r5
 8006d56:	4620      	mov	r0, r4
 8006d58:	9207      	str	r2, [sp, #28]
 8006d5a:	f000 fb3f 	bl	80073dc <_Bfree>
 8006d5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006d62:	ea43 0102 	orr.w	r1, r3, r2
 8006d66:	9b04      	ldr	r3, [sp, #16]
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	464d      	mov	r5, r9
 8006d6c:	d10f      	bne.n	8006d8e <_dtoa_r+0xa66>
 8006d6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d72:	d02a      	beq.n	8006dca <_dtoa_r+0xaa2>
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dd02      	ble.n	8006d80 <_dtoa_r+0xa58>
 8006d7a:	9b02      	ldr	r3, [sp, #8]
 8006d7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006d80:	f88b a000 	strb.w	sl, [fp]
 8006d84:	e775      	b.n	8006c72 <_dtoa_r+0x94a>
 8006d86:	4638      	mov	r0, r7
 8006d88:	e7ba      	b.n	8006d00 <_dtoa_r+0x9d8>
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	e7e2      	b.n	8006d54 <_dtoa_r+0xa2c>
 8006d8e:	9b03      	ldr	r3, [sp, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	db04      	blt.n	8006d9e <_dtoa_r+0xa76>
 8006d94:	9906      	ldr	r1, [sp, #24]
 8006d96:	430b      	orrs	r3, r1
 8006d98:	9904      	ldr	r1, [sp, #16]
 8006d9a:	430b      	orrs	r3, r1
 8006d9c:	d122      	bne.n	8006de4 <_dtoa_r+0xabc>
 8006d9e:	2a00      	cmp	r2, #0
 8006da0:	ddee      	ble.n	8006d80 <_dtoa_r+0xa58>
 8006da2:	ee18 1a10 	vmov	r1, s16
 8006da6:	2201      	movs	r2, #1
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fce9 	bl	8007780 <__lshift>
 8006dae:	4631      	mov	r1, r6
 8006db0:	ee08 0a10 	vmov	s16, r0
 8006db4:	f000 fd54 	bl	8007860 <__mcmp>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	dc03      	bgt.n	8006dc4 <_dtoa_r+0xa9c>
 8006dbc:	d1e0      	bne.n	8006d80 <_dtoa_r+0xa58>
 8006dbe:	f01a 0f01 	tst.w	sl, #1
 8006dc2:	d0dd      	beq.n	8006d80 <_dtoa_r+0xa58>
 8006dc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006dc8:	d1d7      	bne.n	8006d7a <_dtoa_r+0xa52>
 8006dca:	2339      	movs	r3, #57	; 0x39
 8006dcc:	f88b 3000 	strb.w	r3, [fp]
 8006dd0:	462b      	mov	r3, r5
 8006dd2:	461d      	mov	r5, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006dda:	2a39      	cmp	r2, #57	; 0x39
 8006ddc:	d071      	beq.n	8006ec2 <_dtoa_r+0xb9a>
 8006dde:	3201      	adds	r2, #1
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	e746      	b.n	8006c72 <_dtoa_r+0x94a>
 8006de4:	2a00      	cmp	r2, #0
 8006de6:	dd07      	ble.n	8006df8 <_dtoa_r+0xad0>
 8006de8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006dec:	d0ed      	beq.n	8006dca <_dtoa_r+0xaa2>
 8006dee:	f10a 0301 	add.w	r3, sl, #1
 8006df2:	f88b 3000 	strb.w	r3, [fp]
 8006df6:	e73c      	b.n	8006c72 <_dtoa_r+0x94a>
 8006df8:	9b05      	ldr	r3, [sp, #20]
 8006dfa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006dfe:	4599      	cmp	r9, r3
 8006e00:	d047      	beq.n	8006e92 <_dtoa_r+0xb6a>
 8006e02:	ee18 1a10 	vmov	r1, s16
 8006e06:	2300      	movs	r3, #0
 8006e08:	220a      	movs	r2, #10
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f000 fb08 	bl	8007420 <__multadd>
 8006e10:	45b8      	cmp	r8, r7
 8006e12:	ee08 0a10 	vmov	s16, r0
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	f04f 020a 	mov.w	r2, #10
 8006e1e:	4641      	mov	r1, r8
 8006e20:	4620      	mov	r0, r4
 8006e22:	d106      	bne.n	8006e32 <_dtoa_r+0xb0a>
 8006e24:	f000 fafc 	bl	8007420 <__multadd>
 8006e28:	4680      	mov	r8, r0
 8006e2a:	4607      	mov	r7, r0
 8006e2c:	f109 0901 	add.w	r9, r9, #1
 8006e30:	e772      	b.n	8006d18 <_dtoa_r+0x9f0>
 8006e32:	f000 faf5 	bl	8007420 <__multadd>
 8006e36:	4639      	mov	r1, r7
 8006e38:	4680      	mov	r8, r0
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	220a      	movs	r2, #10
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f000 faee 	bl	8007420 <__multadd>
 8006e44:	4607      	mov	r7, r0
 8006e46:	e7f1      	b.n	8006e2c <_dtoa_r+0xb04>
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	9302      	str	r3, [sp, #8]
 8006e4c:	9d01      	ldr	r5, [sp, #4]
 8006e4e:	ee18 0a10 	vmov	r0, s16
 8006e52:	4631      	mov	r1, r6
 8006e54:	f7ff f9da 	bl	800620c <quorem>
 8006e58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e5c:	9b01      	ldr	r3, [sp, #4]
 8006e5e:	f805 ab01 	strb.w	sl, [r5], #1
 8006e62:	1aea      	subs	r2, r5, r3
 8006e64:	9b02      	ldr	r3, [sp, #8]
 8006e66:	4293      	cmp	r3, r2
 8006e68:	dd09      	ble.n	8006e7e <_dtoa_r+0xb56>
 8006e6a:	ee18 1a10 	vmov	r1, s16
 8006e6e:	2300      	movs	r3, #0
 8006e70:	220a      	movs	r2, #10
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 fad4 	bl	8007420 <__multadd>
 8006e78:	ee08 0a10 	vmov	s16, r0
 8006e7c:	e7e7      	b.n	8006e4e <_dtoa_r+0xb26>
 8006e7e:	9b02      	ldr	r3, [sp, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	bfc8      	it	gt
 8006e84:	461d      	movgt	r5, r3
 8006e86:	9b01      	ldr	r3, [sp, #4]
 8006e88:	bfd8      	it	le
 8006e8a:	2501      	movle	r5, #1
 8006e8c:	441d      	add	r5, r3
 8006e8e:	f04f 0800 	mov.w	r8, #0
 8006e92:	ee18 1a10 	vmov	r1, s16
 8006e96:	2201      	movs	r2, #1
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f000 fc71 	bl	8007780 <__lshift>
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	ee08 0a10 	vmov	s16, r0
 8006ea4:	f000 fcdc 	bl	8007860 <__mcmp>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	dc91      	bgt.n	8006dd0 <_dtoa_r+0xaa8>
 8006eac:	d102      	bne.n	8006eb4 <_dtoa_r+0xb8c>
 8006eae:	f01a 0f01 	tst.w	sl, #1
 8006eb2:	d18d      	bne.n	8006dd0 <_dtoa_r+0xaa8>
 8006eb4:	462b      	mov	r3, r5
 8006eb6:	461d      	mov	r5, r3
 8006eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ebc:	2a30      	cmp	r2, #48	; 0x30
 8006ebe:	d0fa      	beq.n	8006eb6 <_dtoa_r+0xb8e>
 8006ec0:	e6d7      	b.n	8006c72 <_dtoa_r+0x94a>
 8006ec2:	9a01      	ldr	r2, [sp, #4]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d184      	bne.n	8006dd2 <_dtoa_r+0xaaa>
 8006ec8:	9b00      	ldr	r3, [sp, #0]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	2331      	movs	r3, #49	; 0x31
 8006ed0:	7013      	strb	r3, [r2, #0]
 8006ed2:	e6ce      	b.n	8006c72 <_dtoa_r+0x94a>
 8006ed4:	4b09      	ldr	r3, [pc, #36]	; (8006efc <_dtoa_r+0xbd4>)
 8006ed6:	f7ff ba95 	b.w	8006404 <_dtoa_r+0xdc>
 8006eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f47f aa6e 	bne.w	80063be <_dtoa_r+0x96>
 8006ee2:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <_dtoa_r+0xbd8>)
 8006ee4:	f7ff ba8e 	b.w	8006404 <_dtoa_r+0xdc>
 8006ee8:	9b02      	ldr	r3, [sp, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	dcae      	bgt.n	8006e4c <_dtoa_r+0xb24>
 8006eee:	9b06      	ldr	r3, [sp, #24]
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	f73f aea8 	bgt.w	8006c46 <_dtoa_r+0x91e>
 8006ef6:	e7a9      	b.n	8006e4c <_dtoa_r+0xb24>
 8006ef8:	0800b9b7 	.word	0x0800b9b7
 8006efc:	0800b914 	.word	0x0800b914
 8006f00:	0800b938 	.word	0x0800b938

08006f04 <__sflush_r>:
 8006f04:	898a      	ldrh	r2, [r1, #12]
 8006f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	0710      	lsls	r0, r2, #28
 8006f0e:	460c      	mov	r4, r1
 8006f10:	d458      	bmi.n	8006fc4 <__sflush_r+0xc0>
 8006f12:	684b      	ldr	r3, [r1, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	dc05      	bgt.n	8006f24 <__sflush_r+0x20>
 8006f18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dc02      	bgt.n	8006f24 <__sflush_r+0x20>
 8006f1e:	2000      	movs	r0, #0
 8006f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f26:	2e00      	cmp	r6, #0
 8006f28:	d0f9      	beq.n	8006f1e <__sflush_r+0x1a>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f30:	682f      	ldr	r7, [r5, #0]
 8006f32:	602b      	str	r3, [r5, #0]
 8006f34:	d032      	beq.n	8006f9c <__sflush_r+0x98>
 8006f36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	075a      	lsls	r2, r3, #29
 8006f3c:	d505      	bpl.n	8006f4a <__sflush_r+0x46>
 8006f3e:	6863      	ldr	r3, [r4, #4]
 8006f40:	1ac0      	subs	r0, r0, r3
 8006f42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f44:	b10b      	cbz	r3, 8006f4a <__sflush_r+0x46>
 8006f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f48:	1ac0      	subs	r0, r0, r3
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f50:	6a21      	ldr	r1, [r4, #32]
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b0      	blx	r6
 8006f56:	1c43      	adds	r3, r0, #1
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	d106      	bne.n	8006f6a <__sflush_r+0x66>
 8006f5c:	6829      	ldr	r1, [r5, #0]
 8006f5e:	291d      	cmp	r1, #29
 8006f60:	d82c      	bhi.n	8006fbc <__sflush_r+0xb8>
 8006f62:	4a2a      	ldr	r2, [pc, #168]	; (800700c <__sflush_r+0x108>)
 8006f64:	40ca      	lsrs	r2, r1
 8006f66:	07d6      	lsls	r6, r2, #31
 8006f68:	d528      	bpl.n	8006fbc <__sflush_r+0xb8>
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	6062      	str	r2, [r4, #4]
 8006f6e:	04d9      	lsls	r1, r3, #19
 8006f70:	6922      	ldr	r2, [r4, #16]
 8006f72:	6022      	str	r2, [r4, #0]
 8006f74:	d504      	bpl.n	8006f80 <__sflush_r+0x7c>
 8006f76:	1c42      	adds	r2, r0, #1
 8006f78:	d101      	bne.n	8006f7e <__sflush_r+0x7a>
 8006f7a:	682b      	ldr	r3, [r5, #0]
 8006f7c:	b903      	cbnz	r3, 8006f80 <__sflush_r+0x7c>
 8006f7e:	6560      	str	r0, [r4, #84]	; 0x54
 8006f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f82:	602f      	str	r7, [r5, #0]
 8006f84:	2900      	cmp	r1, #0
 8006f86:	d0ca      	beq.n	8006f1e <__sflush_r+0x1a>
 8006f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f8c:	4299      	cmp	r1, r3
 8006f8e:	d002      	beq.n	8006f96 <__sflush_r+0x92>
 8006f90:	4628      	mov	r0, r5
 8006f92:	f000 fd7d 	bl	8007a90 <_free_r>
 8006f96:	2000      	movs	r0, #0
 8006f98:	6360      	str	r0, [r4, #52]	; 0x34
 8006f9a:	e7c1      	b.n	8006f20 <__sflush_r+0x1c>
 8006f9c:	6a21      	ldr	r1, [r4, #32]
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b0      	blx	r6
 8006fa4:	1c41      	adds	r1, r0, #1
 8006fa6:	d1c7      	bne.n	8006f38 <__sflush_r+0x34>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0c4      	beq.n	8006f38 <__sflush_r+0x34>
 8006fae:	2b1d      	cmp	r3, #29
 8006fb0:	d001      	beq.n	8006fb6 <__sflush_r+0xb2>
 8006fb2:	2b16      	cmp	r3, #22
 8006fb4:	d101      	bne.n	8006fba <__sflush_r+0xb6>
 8006fb6:	602f      	str	r7, [r5, #0]
 8006fb8:	e7b1      	b.n	8006f1e <__sflush_r+0x1a>
 8006fba:	89a3      	ldrh	r3, [r4, #12]
 8006fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc0:	81a3      	strh	r3, [r4, #12]
 8006fc2:	e7ad      	b.n	8006f20 <__sflush_r+0x1c>
 8006fc4:	690f      	ldr	r7, [r1, #16]
 8006fc6:	2f00      	cmp	r7, #0
 8006fc8:	d0a9      	beq.n	8006f1e <__sflush_r+0x1a>
 8006fca:	0793      	lsls	r3, r2, #30
 8006fcc:	680e      	ldr	r6, [r1, #0]
 8006fce:	bf08      	it	eq
 8006fd0:	694b      	ldreq	r3, [r1, #20]
 8006fd2:	600f      	str	r7, [r1, #0]
 8006fd4:	bf18      	it	ne
 8006fd6:	2300      	movne	r3, #0
 8006fd8:	eba6 0807 	sub.w	r8, r6, r7
 8006fdc:	608b      	str	r3, [r1, #8]
 8006fde:	f1b8 0f00 	cmp.w	r8, #0
 8006fe2:	dd9c      	ble.n	8006f1e <__sflush_r+0x1a>
 8006fe4:	6a21      	ldr	r1, [r4, #32]
 8006fe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fe8:	4643      	mov	r3, r8
 8006fea:	463a      	mov	r2, r7
 8006fec:	4628      	mov	r0, r5
 8006fee:	47b0      	blx	r6
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	dc06      	bgt.n	8007002 <__sflush_r+0xfe>
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ffa:	81a3      	strh	r3, [r4, #12]
 8006ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8007000:	e78e      	b.n	8006f20 <__sflush_r+0x1c>
 8007002:	4407      	add	r7, r0
 8007004:	eba8 0800 	sub.w	r8, r8, r0
 8007008:	e7e9      	b.n	8006fde <__sflush_r+0xda>
 800700a:	bf00      	nop
 800700c:	20400001 	.word	0x20400001

08007010 <_fflush_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	690b      	ldr	r3, [r1, #16]
 8007014:	4605      	mov	r5, r0
 8007016:	460c      	mov	r4, r1
 8007018:	b913      	cbnz	r3, 8007020 <_fflush_r+0x10>
 800701a:	2500      	movs	r5, #0
 800701c:	4628      	mov	r0, r5
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	b118      	cbz	r0, 800702a <_fflush_r+0x1a>
 8007022:	6983      	ldr	r3, [r0, #24]
 8007024:	b90b      	cbnz	r3, 800702a <_fflush_r+0x1a>
 8007026:	f000 f887 	bl	8007138 <__sinit>
 800702a:	4b14      	ldr	r3, [pc, #80]	; (800707c <_fflush_r+0x6c>)
 800702c:	429c      	cmp	r4, r3
 800702e:	d11b      	bne.n	8007068 <_fflush_r+0x58>
 8007030:	686c      	ldr	r4, [r5, #4]
 8007032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0ef      	beq.n	800701a <_fflush_r+0xa>
 800703a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800703c:	07d0      	lsls	r0, r2, #31
 800703e:	d404      	bmi.n	800704a <_fflush_r+0x3a>
 8007040:	0599      	lsls	r1, r3, #22
 8007042:	d402      	bmi.n	800704a <_fflush_r+0x3a>
 8007044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007046:	f000 f91a 	bl	800727e <__retarget_lock_acquire_recursive>
 800704a:	4628      	mov	r0, r5
 800704c:	4621      	mov	r1, r4
 800704e:	f7ff ff59 	bl	8006f04 <__sflush_r>
 8007052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007054:	07da      	lsls	r2, r3, #31
 8007056:	4605      	mov	r5, r0
 8007058:	d4e0      	bmi.n	800701c <_fflush_r+0xc>
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	059b      	lsls	r3, r3, #22
 800705e:	d4dd      	bmi.n	800701c <_fflush_r+0xc>
 8007060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007062:	f000 f90d 	bl	8007280 <__retarget_lock_release_recursive>
 8007066:	e7d9      	b.n	800701c <_fflush_r+0xc>
 8007068:	4b05      	ldr	r3, [pc, #20]	; (8007080 <_fflush_r+0x70>)
 800706a:	429c      	cmp	r4, r3
 800706c:	d101      	bne.n	8007072 <_fflush_r+0x62>
 800706e:	68ac      	ldr	r4, [r5, #8]
 8007070:	e7df      	b.n	8007032 <_fflush_r+0x22>
 8007072:	4b04      	ldr	r3, [pc, #16]	; (8007084 <_fflush_r+0x74>)
 8007074:	429c      	cmp	r4, r3
 8007076:	bf08      	it	eq
 8007078:	68ec      	ldreq	r4, [r5, #12]
 800707a:	e7da      	b.n	8007032 <_fflush_r+0x22>
 800707c:	0800b9e8 	.word	0x0800b9e8
 8007080:	0800ba08 	.word	0x0800ba08
 8007084:	0800b9c8 	.word	0x0800b9c8

08007088 <std>:
 8007088:	2300      	movs	r3, #0
 800708a:	b510      	push	{r4, lr}
 800708c:	4604      	mov	r4, r0
 800708e:	e9c0 3300 	strd	r3, r3, [r0]
 8007092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007096:	6083      	str	r3, [r0, #8]
 8007098:	8181      	strh	r1, [r0, #12]
 800709a:	6643      	str	r3, [r0, #100]	; 0x64
 800709c:	81c2      	strh	r2, [r0, #14]
 800709e:	6183      	str	r3, [r0, #24]
 80070a0:	4619      	mov	r1, r3
 80070a2:	2208      	movs	r2, #8
 80070a4:	305c      	adds	r0, #92	; 0x5c
 80070a6:	f7fe fad1 	bl	800564c <memset>
 80070aa:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <std+0x38>)
 80070ac:	6263      	str	r3, [r4, #36]	; 0x24
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <std+0x3c>)
 80070b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80070b2:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <std+0x40>)
 80070b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070b6:	4b05      	ldr	r3, [pc, #20]	; (80070cc <std+0x44>)
 80070b8:	6224      	str	r4, [r4, #32]
 80070ba:	6323      	str	r3, [r4, #48]	; 0x30
 80070bc:	bd10      	pop	{r4, pc}
 80070be:	bf00      	nop
 80070c0:	080081dd 	.word	0x080081dd
 80070c4:	080081ff 	.word	0x080081ff
 80070c8:	08008237 	.word	0x08008237
 80070cc:	0800825b 	.word	0x0800825b

080070d0 <_cleanup_r>:
 80070d0:	4901      	ldr	r1, [pc, #4]	; (80070d8 <_cleanup_r+0x8>)
 80070d2:	f000 b8af 	b.w	8007234 <_fwalk_reent>
 80070d6:	bf00      	nop
 80070d8:	08007011 	.word	0x08007011

080070dc <__sfmoreglue>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	2268      	movs	r2, #104	; 0x68
 80070e0:	1e4d      	subs	r5, r1, #1
 80070e2:	4355      	muls	r5, r2
 80070e4:	460e      	mov	r6, r1
 80070e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070ea:	f000 fd3d 	bl	8007b68 <_malloc_r>
 80070ee:	4604      	mov	r4, r0
 80070f0:	b140      	cbz	r0, 8007104 <__sfmoreglue+0x28>
 80070f2:	2100      	movs	r1, #0
 80070f4:	e9c0 1600 	strd	r1, r6, [r0]
 80070f8:	300c      	adds	r0, #12
 80070fa:	60a0      	str	r0, [r4, #8]
 80070fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007100:	f7fe faa4 	bl	800564c <memset>
 8007104:	4620      	mov	r0, r4
 8007106:	bd70      	pop	{r4, r5, r6, pc}

08007108 <__sfp_lock_acquire>:
 8007108:	4801      	ldr	r0, [pc, #4]	; (8007110 <__sfp_lock_acquire+0x8>)
 800710a:	f000 b8b8 	b.w	800727e <__retarget_lock_acquire_recursive>
 800710e:	bf00      	nop
 8007110:	200008bd 	.word	0x200008bd

08007114 <__sfp_lock_release>:
 8007114:	4801      	ldr	r0, [pc, #4]	; (800711c <__sfp_lock_release+0x8>)
 8007116:	f000 b8b3 	b.w	8007280 <__retarget_lock_release_recursive>
 800711a:	bf00      	nop
 800711c:	200008bd 	.word	0x200008bd

08007120 <__sinit_lock_acquire>:
 8007120:	4801      	ldr	r0, [pc, #4]	; (8007128 <__sinit_lock_acquire+0x8>)
 8007122:	f000 b8ac 	b.w	800727e <__retarget_lock_acquire_recursive>
 8007126:	bf00      	nop
 8007128:	200008be 	.word	0x200008be

0800712c <__sinit_lock_release>:
 800712c:	4801      	ldr	r0, [pc, #4]	; (8007134 <__sinit_lock_release+0x8>)
 800712e:	f000 b8a7 	b.w	8007280 <__retarget_lock_release_recursive>
 8007132:	bf00      	nop
 8007134:	200008be 	.word	0x200008be

08007138 <__sinit>:
 8007138:	b510      	push	{r4, lr}
 800713a:	4604      	mov	r4, r0
 800713c:	f7ff fff0 	bl	8007120 <__sinit_lock_acquire>
 8007140:	69a3      	ldr	r3, [r4, #24]
 8007142:	b11b      	cbz	r3, 800714c <__sinit+0x14>
 8007144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007148:	f7ff bff0 	b.w	800712c <__sinit_lock_release>
 800714c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007150:	6523      	str	r3, [r4, #80]	; 0x50
 8007152:	4b13      	ldr	r3, [pc, #76]	; (80071a0 <__sinit+0x68>)
 8007154:	4a13      	ldr	r2, [pc, #76]	; (80071a4 <__sinit+0x6c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	62a2      	str	r2, [r4, #40]	; 0x28
 800715a:	42a3      	cmp	r3, r4
 800715c:	bf04      	itt	eq
 800715e:	2301      	moveq	r3, #1
 8007160:	61a3      	streq	r3, [r4, #24]
 8007162:	4620      	mov	r0, r4
 8007164:	f000 f820 	bl	80071a8 <__sfp>
 8007168:	6060      	str	r0, [r4, #4]
 800716a:	4620      	mov	r0, r4
 800716c:	f000 f81c 	bl	80071a8 <__sfp>
 8007170:	60a0      	str	r0, [r4, #8]
 8007172:	4620      	mov	r0, r4
 8007174:	f000 f818 	bl	80071a8 <__sfp>
 8007178:	2200      	movs	r2, #0
 800717a:	60e0      	str	r0, [r4, #12]
 800717c:	2104      	movs	r1, #4
 800717e:	6860      	ldr	r0, [r4, #4]
 8007180:	f7ff ff82 	bl	8007088 <std>
 8007184:	68a0      	ldr	r0, [r4, #8]
 8007186:	2201      	movs	r2, #1
 8007188:	2109      	movs	r1, #9
 800718a:	f7ff ff7d 	bl	8007088 <std>
 800718e:	68e0      	ldr	r0, [r4, #12]
 8007190:	2202      	movs	r2, #2
 8007192:	2112      	movs	r1, #18
 8007194:	f7ff ff78 	bl	8007088 <std>
 8007198:	2301      	movs	r3, #1
 800719a:	61a3      	str	r3, [r4, #24]
 800719c:	e7d2      	b.n	8007144 <__sinit+0xc>
 800719e:	bf00      	nop
 80071a0:	0800b900 	.word	0x0800b900
 80071a4:	080070d1 	.word	0x080070d1

080071a8 <__sfp>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	4607      	mov	r7, r0
 80071ac:	f7ff ffac 	bl	8007108 <__sfp_lock_acquire>
 80071b0:	4b1e      	ldr	r3, [pc, #120]	; (800722c <__sfp+0x84>)
 80071b2:	681e      	ldr	r6, [r3, #0]
 80071b4:	69b3      	ldr	r3, [r6, #24]
 80071b6:	b913      	cbnz	r3, 80071be <__sfp+0x16>
 80071b8:	4630      	mov	r0, r6
 80071ba:	f7ff ffbd 	bl	8007138 <__sinit>
 80071be:	3648      	adds	r6, #72	; 0x48
 80071c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80071c4:	3b01      	subs	r3, #1
 80071c6:	d503      	bpl.n	80071d0 <__sfp+0x28>
 80071c8:	6833      	ldr	r3, [r6, #0]
 80071ca:	b30b      	cbz	r3, 8007210 <__sfp+0x68>
 80071cc:	6836      	ldr	r6, [r6, #0]
 80071ce:	e7f7      	b.n	80071c0 <__sfp+0x18>
 80071d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071d4:	b9d5      	cbnz	r5, 800720c <__sfp+0x64>
 80071d6:	4b16      	ldr	r3, [pc, #88]	; (8007230 <__sfp+0x88>)
 80071d8:	60e3      	str	r3, [r4, #12]
 80071da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071de:	6665      	str	r5, [r4, #100]	; 0x64
 80071e0:	f000 f84c 	bl	800727c <__retarget_lock_init_recursive>
 80071e4:	f7ff ff96 	bl	8007114 <__sfp_lock_release>
 80071e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071f0:	6025      	str	r5, [r4, #0]
 80071f2:	61a5      	str	r5, [r4, #24]
 80071f4:	2208      	movs	r2, #8
 80071f6:	4629      	mov	r1, r5
 80071f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071fc:	f7fe fa26 	bl	800564c <memset>
 8007200:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007204:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007208:	4620      	mov	r0, r4
 800720a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800720c:	3468      	adds	r4, #104	; 0x68
 800720e:	e7d9      	b.n	80071c4 <__sfp+0x1c>
 8007210:	2104      	movs	r1, #4
 8007212:	4638      	mov	r0, r7
 8007214:	f7ff ff62 	bl	80070dc <__sfmoreglue>
 8007218:	4604      	mov	r4, r0
 800721a:	6030      	str	r0, [r6, #0]
 800721c:	2800      	cmp	r0, #0
 800721e:	d1d5      	bne.n	80071cc <__sfp+0x24>
 8007220:	f7ff ff78 	bl	8007114 <__sfp_lock_release>
 8007224:	230c      	movs	r3, #12
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	e7ee      	b.n	8007208 <__sfp+0x60>
 800722a:	bf00      	nop
 800722c:	0800b900 	.word	0x0800b900
 8007230:	ffff0001 	.word	0xffff0001

08007234 <_fwalk_reent>:
 8007234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007238:	4606      	mov	r6, r0
 800723a:	4688      	mov	r8, r1
 800723c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007240:	2700      	movs	r7, #0
 8007242:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007246:	f1b9 0901 	subs.w	r9, r9, #1
 800724a:	d505      	bpl.n	8007258 <_fwalk_reent+0x24>
 800724c:	6824      	ldr	r4, [r4, #0]
 800724e:	2c00      	cmp	r4, #0
 8007250:	d1f7      	bne.n	8007242 <_fwalk_reent+0xe>
 8007252:	4638      	mov	r0, r7
 8007254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007258:	89ab      	ldrh	r3, [r5, #12]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d907      	bls.n	800726e <_fwalk_reent+0x3a>
 800725e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007262:	3301      	adds	r3, #1
 8007264:	d003      	beq.n	800726e <_fwalk_reent+0x3a>
 8007266:	4629      	mov	r1, r5
 8007268:	4630      	mov	r0, r6
 800726a:	47c0      	blx	r8
 800726c:	4307      	orrs	r7, r0
 800726e:	3568      	adds	r5, #104	; 0x68
 8007270:	e7e9      	b.n	8007246 <_fwalk_reent+0x12>
	...

08007274 <_localeconv_r>:
 8007274:	4800      	ldr	r0, [pc, #0]	; (8007278 <_localeconv_r+0x4>)
 8007276:	4770      	bx	lr
 8007278:	200001b0 	.word	0x200001b0

0800727c <__retarget_lock_init_recursive>:
 800727c:	4770      	bx	lr

0800727e <__retarget_lock_acquire_recursive>:
 800727e:	4770      	bx	lr

08007280 <__retarget_lock_release_recursive>:
 8007280:	4770      	bx	lr

08007282 <__swhatbuf_r>:
 8007282:	b570      	push	{r4, r5, r6, lr}
 8007284:	460e      	mov	r6, r1
 8007286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728a:	2900      	cmp	r1, #0
 800728c:	b096      	sub	sp, #88	; 0x58
 800728e:	4614      	mov	r4, r2
 8007290:	461d      	mov	r5, r3
 8007292:	da08      	bge.n	80072a6 <__swhatbuf_r+0x24>
 8007294:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	602a      	str	r2, [r5, #0]
 800729c:	061a      	lsls	r2, r3, #24
 800729e:	d410      	bmi.n	80072c2 <__swhatbuf_r+0x40>
 80072a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072a4:	e00e      	b.n	80072c4 <__swhatbuf_r+0x42>
 80072a6:	466a      	mov	r2, sp
 80072a8:	f001 f82e 	bl	8008308 <_fstat_r>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	dbf1      	blt.n	8007294 <__swhatbuf_r+0x12>
 80072b0:	9a01      	ldr	r2, [sp, #4]
 80072b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072ba:	425a      	negs	r2, r3
 80072bc:	415a      	adcs	r2, r3
 80072be:	602a      	str	r2, [r5, #0]
 80072c0:	e7ee      	b.n	80072a0 <__swhatbuf_r+0x1e>
 80072c2:	2340      	movs	r3, #64	; 0x40
 80072c4:	2000      	movs	r0, #0
 80072c6:	6023      	str	r3, [r4, #0]
 80072c8:	b016      	add	sp, #88	; 0x58
 80072ca:	bd70      	pop	{r4, r5, r6, pc}

080072cc <__smakebuf_r>:
 80072cc:	898b      	ldrh	r3, [r1, #12]
 80072ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072d0:	079d      	lsls	r5, r3, #30
 80072d2:	4606      	mov	r6, r0
 80072d4:	460c      	mov	r4, r1
 80072d6:	d507      	bpl.n	80072e8 <__smakebuf_r+0x1c>
 80072d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	6123      	str	r3, [r4, #16]
 80072e0:	2301      	movs	r3, #1
 80072e2:	6163      	str	r3, [r4, #20]
 80072e4:	b002      	add	sp, #8
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	ab01      	add	r3, sp, #4
 80072ea:	466a      	mov	r2, sp
 80072ec:	f7ff ffc9 	bl	8007282 <__swhatbuf_r>
 80072f0:	9900      	ldr	r1, [sp, #0]
 80072f2:	4605      	mov	r5, r0
 80072f4:	4630      	mov	r0, r6
 80072f6:	f000 fc37 	bl	8007b68 <_malloc_r>
 80072fa:	b948      	cbnz	r0, 8007310 <__smakebuf_r+0x44>
 80072fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007300:	059a      	lsls	r2, r3, #22
 8007302:	d4ef      	bmi.n	80072e4 <__smakebuf_r+0x18>
 8007304:	f023 0303 	bic.w	r3, r3, #3
 8007308:	f043 0302 	orr.w	r3, r3, #2
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	e7e3      	b.n	80072d8 <__smakebuf_r+0xc>
 8007310:	4b0d      	ldr	r3, [pc, #52]	; (8007348 <__smakebuf_r+0x7c>)
 8007312:	62b3      	str	r3, [r6, #40]	; 0x28
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	6020      	str	r0, [r4, #0]
 8007318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800731c:	81a3      	strh	r3, [r4, #12]
 800731e:	9b00      	ldr	r3, [sp, #0]
 8007320:	6163      	str	r3, [r4, #20]
 8007322:	9b01      	ldr	r3, [sp, #4]
 8007324:	6120      	str	r0, [r4, #16]
 8007326:	b15b      	cbz	r3, 8007340 <__smakebuf_r+0x74>
 8007328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800732c:	4630      	mov	r0, r6
 800732e:	f000 fffd 	bl	800832c <_isatty_r>
 8007332:	b128      	cbz	r0, 8007340 <__smakebuf_r+0x74>
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	f023 0303 	bic.w	r3, r3, #3
 800733a:	f043 0301 	orr.w	r3, r3, #1
 800733e:	81a3      	strh	r3, [r4, #12]
 8007340:	89a0      	ldrh	r0, [r4, #12]
 8007342:	4305      	orrs	r5, r0
 8007344:	81a5      	strh	r5, [r4, #12]
 8007346:	e7cd      	b.n	80072e4 <__smakebuf_r+0x18>
 8007348:	080070d1 	.word	0x080070d1

0800734c <malloc>:
 800734c:	4b02      	ldr	r3, [pc, #8]	; (8007358 <malloc+0xc>)
 800734e:	4601      	mov	r1, r0
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	f000 bc09 	b.w	8007b68 <_malloc_r>
 8007356:	bf00      	nop
 8007358:	2000005c 	.word	0x2000005c

0800735c <_Balloc>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007360:	4604      	mov	r4, r0
 8007362:	460d      	mov	r5, r1
 8007364:	b976      	cbnz	r6, 8007384 <_Balloc+0x28>
 8007366:	2010      	movs	r0, #16
 8007368:	f7ff fff0 	bl	800734c <malloc>
 800736c:	4602      	mov	r2, r0
 800736e:	6260      	str	r0, [r4, #36]	; 0x24
 8007370:	b920      	cbnz	r0, 800737c <_Balloc+0x20>
 8007372:	4b18      	ldr	r3, [pc, #96]	; (80073d4 <_Balloc+0x78>)
 8007374:	4818      	ldr	r0, [pc, #96]	; (80073d8 <_Balloc+0x7c>)
 8007376:	2166      	movs	r1, #102	; 0x66
 8007378:	f000 ff86 	bl	8008288 <__assert_func>
 800737c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007380:	6006      	str	r6, [r0, #0]
 8007382:	60c6      	str	r6, [r0, #12]
 8007384:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007386:	68f3      	ldr	r3, [r6, #12]
 8007388:	b183      	cbz	r3, 80073ac <_Balloc+0x50>
 800738a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007392:	b9b8      	cbnz	r0, 80073c4 <_Balloc+0x68>
 8007394:	2101      	movs	r1, #1
 8007396:	fa01 f605 	lsl.w	r6, r1, r5
 800739a:	1d72      	adds	r2, r6, #5
 800739c:	0092      	lsls	r2, r2, #2
 800739e:	4620      	mov	r0, r4
 80073a0:	f000 fb60 	bl	8007a64 <_calloc_r>
 80073a4:	b160      	cbz	r0, 80073c0 <_Balloc+0x64>
 80073a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073aa:	e00e      	b.n	80073ca <_Balloc+0x6e>
 80073ac:	2221      	movs	r2, #33	; 0x21
 80073ae:	2104      	movs	r1, #4
 80073b0:	4620      	mov	r0, r4
 80073b2:	f000 fb57 	bl	8007a64 <_calloc_r>
 80073b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073b8:	60f0      	str	r0, [r6, #12]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e4      	bne.n	800738a <_Balloc+0x2e>
 80073c0:	2000      	movs	r0, #0
 80073c2:	bd70      	pop	{r4, r5, r6, pc}
 80073c4:	6802      	ldr	r2, [r0, #0]
 80073c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073ca:	2300      	movs	r3, #0
 80073cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073d0:	e7f7      	b.n	80073c2 <_Balloc+0x66>
 80073d2:	bf00      	nop
 80073d4:	0800b945 	.word	0x0800b945
 80073d8:	0800ba28 	.word	0x0800ba28

080073dc <_Bfree>:
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073e0:	4605      	mov	r5, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	b976      	cbnz	r6, 8007404 <_Bfree+0x28>
 80073e6:	2010      	movs	r0, #16
 80073e8:	f7ff ffb0 	bl	800734c <malloc>
 80073ec:	4602      	mov	r2, r0
 80073ee:	6268      	str	r0, [r5, #36]	; 0x24
 80073f0:	b920      	cbnz	r0, 80073fc <_Bfree+0x20>
 80073f2:	4b09      	ldr	r3, [pc, #36]	; (8007418 <_Bfree+0x3c>)
 80073f4:	4809      	ldr	r0, [pc, #36]	; (800741c <_Bfree+0x40>)
 80073f6:	218a      	movs	r1, #138	; 0x8a
 80073f8:	f000 ff46 	bl	8008288 <__assert_func>
 80073fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007400:	6006      	str	r6, [r0, #0]
 8007402:	60c6      	str	r6, [r0, #12]
 8007404:	b13c      	cbz	r4, 8007416 <_Bfree+0x3a>
 8007406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007408:	6862      	ldr	r2, [r4, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007410:	6021      	str	r1, [r4, #0]
 8007412:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007416:	bd70      	pop	{r4, r5, r6, pc}
 8007418:	0800b945 	.word	0x0800b945
 800741c:	0800ba28 	.word	0x0800ba28

08007420 <__multadd>:
 8007420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007424:	690d      	ldr	r5, [r1, #16]
 8007426:	4607      	mov	r7, r0
 8007428:	460c      	mov	r4, r1
 800742a:	461e      	mov	r6, r3
 800742c:	f101 0c14 	add.w	ip, r1, #20
 8007430:	2000      	movs	r0, #0
 8007432:	f8dc 3000 	ldr.w	r3, [ip]
 8007436:	b299      	uxth	r1, r3
 8007438:	fb02 6101 	mla	r1, r2, r1, r6
 800743c:	0c1e      	lsrs	r6, r3, #16
 800743e:	0c0b      	lsrs	r3, r1, #16
 8007440:	fb02 3306 	mla	r3, r2, r6, r3
 8007444:	b289      	uxth	r1, r1
 8007446:	3001      	adds	r0, #1
 8007448:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800744c:	4285      	cmp	r5, r0
 800744e:	f84c 1b04 	str.w	r1, [ip], #4
 8007452:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007456:	dcec      	bgt.n	8007432 <__multadd+0x12>
 8007458:	b30e      	cbz	r6, 800749e <__multadd+0x7e>
 800745a:	68a3      	ldr	r3, [r4, #8]
 800745c:	42ab      	cmp	r3, r5
 800745e:	dc19      	bgt.n	8007494 <__multadd+0x74>
 8007460:	6861      	ldr	r1, [r4, #4]
 8007462:	4638      	mov	r0, r7
 8007464:	3101      	adds	r1, #1
 8007466:	f7ff ff79 	bl	800735c <_Balloc>
 800746a:	4680      	mov	r8, r0
 800746c:	b928      	cbnz	r0, 800747a <__multadd+0x5a>
 800746e:	4602      	mov	r2, r0
 8007470:	4b0c      	ldr	r3, [pc, #48]	; (80074a4 <__multadd+0x84>)
 8007472:	480d      	ldr	r0, [pc, #52]	; (80074a8 <__multadd+0x88>)
 8007474:	21b5      	movs	r1, #181	; 0xb5
 8007476:	f000 ff07 	bl	8008288 <__assert_func>
 800747a:	6922      	ldr	r2, [r4, #16]
 800747c:	3202      	adds	r2, #2
 800747e:	f104 010c 	add.w	r1, r4, #12
 8007482:	0092      	lsls	r2, r2, #2
 8007484:	300c      	adds	r0, #12
 8007486:	f7fe f8d3 	bl	8005630 <memcpy>
 800748a:	4621      	mov	r1, r4
 800748c:	4638      	mov	r0, r7
 800748e:	f7ff ffa5 	bl	80073dc <_Bfree>
 8007492:	4644      	mov	r4, r8
 8007494:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007498:	3501      	adds	r5, #1
 800749a:	615e      	str	r6, [r3, #20]
 800749c:	6125      	str	r5, [r4, #16]
 800749e:	4620      	mov	r0, r4
 80074a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a4:	0800b9b7 	.word	0x0800b9b7
 80074a8:	0800ba28 	.word	0x0800ba28

080074ac <__hi0bits>:
 80074ac:	0c03      	lsrs	r3, r0, #16
 80074ae:	041b      	lsls	r3, r3, #16
 80074b0:	b9d3      	cbnz	r3, 80074e8 <__hi0bits+0x3c>
 80074b2:	0400      	lsls	r0, r0, #16
 80074b4:	2310      	movs	r3, #16
 80074b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80074ba:	bf04      	itt	eq
 80074bc:	0200      	lsleq	r0, r0, #8
 80074be:	3308      	addeq	r3, #8
 80074c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074c4:	bf04      	itt	eq
 80074c6:	0100      	lsleq	r0, r0, #4
 80074c8:	3304      	addeq	r3, #4
 80074ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074ce:	bf04      	itt	eq
 80074d0:	0080      	lsleq	r0, r0, #2
 80074d2:	3302      	addeq	r3, #2
 80074d4:	2800      	cmp	r0, #0
 80074d6:	db05      	blt.n	80074e4 <__hi0bits+0x38>
 80074d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80074dc:	f103 0301 	add.w	r3, r3, #1
 80074e0:	bf08      	it	eq
 80074e2:	2320      	moveq	r3, #32
 80074e4:	4618      	mov	r0, r3
 80074e6:	4770      	bx	lr
 80074e8:	2300      	movs	r3, #0
 80074ea:	e7e4      	b.n	80074b6 <__hi0bits+0xa>

080074ec <__lo0bits>:
 80074ec:	6803      	ldr	r3, [r0, #0]
 80074ee:	f013 0207 	ands.w	r2, r3, #7
 80074f2:	4601      	mov	r1, r0
 80074f4:	d00b      	beq.n	800750e <__lo0bits+0x22>
 80074f6:	07da      	lsls	r2, r3, #31
 80074f8:	d423      	bmi.n	8007542 <__lo0bits+0x56>
 80074fa:	0798      	lsls	r0, r3, #30
 80074fc:	bf49      	itett	mi
 80074fe:	085b      	lsrmi	r3, r3, #1
 8007500:	089b      	lsrpl	r3, r3, #2
 8007502:	2001      	movmi	r0, #1
 8007504:	600b      	strmi	r3, [r1, #0]
 8007506:	bf5c      	itt	pl
 8007508:	600b      	strpl	r3, [r1, #0]
 800750a:	2002      	movpl	r0, #2
 800750c:	4770      	bx	lr
 800750e:	b298      	uxth	r0, r3
 8007510:	b9a8      	cbnz	r0, 800753e <__lo0bits+0x52>
 8007512:	0c1b      	lsrs	r3, r3, #16
 8007514:	2010      	movs	r0, #16
 8007516:	b2da      	uxtb	r2, r3
 8007518:	b90a      	cbnz	r2, 800751e <__lo0bits+0x32>
 800751a:	3008      	adds	r0, #8
 800751c:	0a1b      	lsrs	r3, r3, #8
 800751e:	071a      	lsls	r2, r3, #28
 8007520:	bf04      	itt	eq
 8007522:	091b      	lsreq	r3, r3, #4
 8007524:	3004      	addeq	r0, #4
 8007526:	079a      	lsls	r2, r3, #30
 8007528:	bf04      	itt	eq
 800752a:	089b      	lsreq	r3, r3, #2
 800752c:	3002      	addeq	r0, #2
 800752e:	07da      	lsls	r2, r3, #31
 8007530:	d403      	bmi.n	800753a <__lo0bits+0x4e>
 8007532:	085b      	lsrs	r3, r3, #1
 8007534:	f100 0001 	add.w	r0, r0, #1
 8007538:	d005      	beq.n	8007546 <__lo0bits+0x5a>
 800753a:	600b      	str	r3, [r1, #0]
 800753c:	4770      	bx	lr
 800753e:	4610      	mov	r0, r2
 8007540:	e7e9      	b.n	8007516 <__lo0bits+0x2a>
 8007542:	2000      	movs	r0, #0
 8007544:	4770      	bx	lr
 8007546:	2020      	movs	r0, #32
 8007548:	4770      	bx	lr
	...

0800754c <__i2b>:
 800754c:	b510      	push	{r4, lr}
 800754e:	460c      	mov	r4, r1
 8007550:	2101      	movs	r1, #1
 8007552:	f7ff ff03 	bl	800735c <_Balloc>
 8007556:	4602      	mov	r2, r0
 8007558:	b928      	cbnz	r0, 8007566 <__i2b+0x1a>
 800755a:	4b05      	ldr	r3, [pc, #20]	; (8007570 <__i2b+0x24>)
 800755c:	4805      	ldr	r0, [pc, #20]	; (8007574 <__i2b+0x28>)
 800755e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007562:	f000 fe91 	bl	8008288 <__assert_func>
 8007566:	2301      	movs	r3, #1
 8007568:	6144      	str	r4, [r0, #20]
 800756a:	6103      	str	r3, [r0, #16]
 800756c:	bd10      	pop	{r4, pc}
 800756e:	bf00      	nop
 8007570:	0800b9b7 	.word	0x0800b9b7
 8007574:	0800ba28 	.word	0x0800ba28

08007578 <__multiply>:
 8007578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	4691      	mov	r9, r2
 800757e:	690a      	ldr	r2, [r1, #16]
 8007580:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007584:	429a      	cmp	r2, r3
 8007586:	bfb8      	it	lt
 8007588:	460b      	movlt	r3, r1
 800758a:	460c      	mov	r4, r1
 800758c:	bfbc      	itt	lt
 800758e:	464c      	movlt	r4, r9
 8007590:	4699      	movlt	r9, r3
 8007592:	6927      	ldr	r7, [r4, #16]
 8007594:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007598:	68a3      	ldr	r3, [r4, #8]
 800759a:	6861      	ldr	r1, [r4, #4]
 800759c:	eb07 060a 	add.w	r6, r7, sl
 80075a0:	42b3      	cmp	r3, r6
 80075a2:	b085      	sub	sp, #20
 80075a4:	bfb8      	it	lt
 80075a6:	3101      	addlt	r1, #1
 80075a8:	f7ff fed8 	bl	800735c <_Balloc>
 80075ac:	b930      	cbnz	r0, 80075bc <__multiply+0x44>
 80075ae:	4602      	mov	r2, r0
 80075b0:	4b44      	ldr	r3, [pc, #272]	; (80076c4 <__multiply+0x14c>)
 80075b2:	4845      	ldr	r0, [pc, #276]	; (80076c8 <__multiply+0x150>)
 80075b4:	f240 115d 	movw	r1, #349	; 0x15d
 80075b8:	f000 fe66 	bl	8008288 <__assert_func>
 80075bc:	f100 0514 	add.w	r5, r0, #20
 80075c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075c4:	462b      	mov	r3, r5
 80075c6:	2200      	movs	r2, #0
 80075c8:	4543      	cmp	r3, r8
 80075ca:	d321      	bcc.n	8007610 <__multiply+0x98>
 80075cc:	f104 0314 	add.w	r3, r4, #20
 80075d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80075d4:	f109 0314 	add.w	r3, r9, #20
 80075d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80075dc:	9202      	str	r2, [sp, #8]
 80075de:	1b3a      	subs	r2, r7, r4
 80075e0:	3a15      	subs	r2, #21
 80075e2:	f022 0203 	bic.w	r2, r2, #3
 80075e6:	3204      	adds	r2, #4
 80075e8:	f104 0115 	add.w	r1, r4, #21
 80075ec:	428f      	cmp	r7, r1
 80075ee:	bf38      	it	cc
 80075f0:	2204      	movcc	r2, #4
 80075f2:	9201      	str	r2, [sp, #4]
 80075f4:	9a02      	ldr	r2, [sp, #8]
 80075f6:	9303      	str	r3, [sp, #12]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d80c      	bhi.n	8007616 <__multiply+0x9e>
 80075fc:	2e00      	cmp	r6, #0
 80075fe:	dd03      	ble.n	8007608 <__multiply+0x90>
 8007600:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007604:	2b00      	cmp	r3, #0
 8007606:	d05a      	beq.n	80076be <__multiply+0x146>
 8007608:	6106      	str	r6, [r0, #16]
 800760a:	b005      	add	sp, #20
 800760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007610:	f843 2b04 	str.w	r2, [r3], #4
 8007614:	e7d8      	b.n	80075c8 <__multiply+0x50>
 8007616:	f8b3 a000 	ldrh.w	sl, [r3]
 800761a:	f1ba 0f00 	cmp.w	sl, #0
 800761e:	d024      	beq.n	800766a <__multiply+0xf2>
 8007620:	f104 0e14 	add.w	lr, r4, #20
 8007624:	46a9      	mov	r9, r5
 8007626:	f04f 0c00 	mov.w	ip, #0
 800762a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800762e:	f8d9 1000 	ldr.w	r1, [r9]
 8007632:	fa1f fb82 	uxth.w	fp, r2
 8007636:	b289      	uxth	r1, r1
 8007638:	fb0a 110b 	mla	r1, sl, fp, r1
 800763c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007640:	f8d9 2000 	ldr.w	r2, [r9]
 8007644:	4461      	add	r1, ip
 8007646:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800764a:	fb0a c20b 	mla	r2, sl, fp, ip
 800764e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007652:	b289      	uxth	r1, r1
 8007654:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007658:	4577      	cmp	r7, lr
 800765a:	f849 1b04 	str.w	r1, [r9], #4
 800765e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007662:	d8e2      	bhi.n	800762a <__multiply+0xb2>
 8007664:	9a01      	ldr	r2, [sp, #4]
 8007666:	f845 c002 	str.w	ip, [r5, r2]
 800766a:	9a03      	ldr	r2, [sp, #12]
 800766c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007670:	3304      	adds	r3, #4
 8007672:	f1b9 0f00 	cmp.w	r9, #0
 8007676:	d020      	beq.n	80076ba <__multiply+0x142>
 8007678:	6829      	ldr	r1, [r5, #0]
 800767a:	f104 0c14 	add.w	ip, r4, #20
 800767e:	46ae      	mov	lr, r5
 8007680:	f04f 0a00 	mov.w	sl, #0
 8007684:	f8bc b000 	ldrh.w	fp, [ip]
 8007688:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800768c:	fb09 220b 	mla	r2, r9, fp, r2
 8007690:	4492      	add	sl, r2
 8007692:	b289      	uxth	r1, r1
 8007694:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007698:	f84e 1b04 	str.w	r1, [lr], #4
 800769c:	f85c 2b04 	ldr.w	r2, [ip], #4
 80076a0:	f8be 1000 	ldrh.w	r1, [lr]
 80076a4:	0c12      	lsrs	r2, r2, #16
 80076a6:	fb09 1102 	mla	r1, r9, r2, r1
 80076aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80076ae:	4567      	cmp	r7, ip
 80076b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076b4:	d8e6      	bhi.n	8007684 <__multiply+0x10c>
 80076b6:	9a01      	ldr	r2, [sp, #4]
 80076b8:	50a9      	str	r1, [r5, r2]
 80076ba:	3504      	adds	r5, #4
 80076bc:	e79a      	b.n	80075f4 <__multiply+0x7c>
 80076be:	3e01      	subs	r6, #1
 80076c0:	e79c      	b.n	80075fc <__multiply+0x84>
 80076c2:	bf00      	nop
 80076c4:	0800b9b7 	.word	0x0800b9b7
 80076c8:	0800ba28 	.word	0x0800ba28

080076cc <__pow5mult>:
 80076cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d0:	4615      	mov	r5, r2
 80076d2:	f012 0203 	ands.w	r2, r2, #3
 80076d6:	4606      	mov	r6, r0
 80076d8:	460f      	mov	r7, r1
 80076da:	d007      	beq.n	80076ec <__pow5mult+0x20>
 80076dc:	4c25      	ldr	r4, [pc, #148]	; (8007774 <__pow5mult+0xa8>)
 80076de:	3a01      	subs	r2, #1
 80076e0:	2300      	movs	r3, #0
 80076e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076e6:	f7ff fe9b 	bl	8007420 <__multadd>
 80076ea:	4607      	mov	r7, r0
 80076ec:	10ad      	asrs	r5, r5, #2
 80076ee:	d03d      	beq.n	800776c <__pow5mult+0xa0>
 80076f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076f2:	b97c      	cbnz	r4, 8007714 <__pow5mult+0x48>
 80076f4:	2010      	movs	r0, #16
 80076f6:	f7ff fe29 	bl	800734c <malloc>
 80076fa:	4602      	mov	r2, r0
 80076fc:	6270      	str	r0, [r6, #36]	; 0x24
 80076fe:	b928      	cbnz	r0, 800770c <__pow5mult+0x40>
 8007700:	4b1d      	ldr	r3, [pc, #116]	; (8007778 <__pow5mult+0xac>)
 8007702:	481e      	ldr	r0, [pc, #120]	; (800777c <__pow5mult+0xb0>)
 8007704:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007708:	f000 fdbe 	bl	8008288 <__assert_func>
 800770c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007710:	6004      	str	r4, [r0, #0]
 8007712:	60c4      	str	r4, [r0, #12]
 8007714:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007718:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800771c:	b94c      	cbnz	r4, 8007732 <__pow5mult+0x66>
 800771e:	f240 2171 	movw	r1, #625	; 0x271
 8007722:	4630      	mov	r0, r6
 8007724:	f7ff ff12 	bl	800754c <__i2b>
 8007728:	2300      	movs	r3, #0
 800772a:	f8c8 0008 	str.w	r0, [r8, #8]
 800772e:	4604      	mov	r4, r0
 8007730:	6003      	str	r3, [r0, #0]
 8007732:	f04f 0900 	mov.w	r9, #0
 8007736:	07eb      	lsls	r3, r5, #31
 8007738:	d50a      	bpl.n	8007750 <__pow5mult+0x84>
 800773a:	4639      	mov	r1, r7
 800773c:	4622      	mov	r2, r4
 800773e:	4630      	mov	r0, r6
 8007740:	f7ff ff1a 	bl	8007578 <__multiply>
 8007744:	4639      	mov	r1, r7
 8007746:	4680      	mov	r8, r0
 8007748:	4630      	mov	r0, r6
 800774a:	f7ff fe47 	bl	80073dc <_Bfree>
 800774e:	4647      	mov	r7, r8
 8007750:	106d      	asrs	r5, r5, #1
 8007752:	d00b      	beq.n	800776c <__pow5mult+0xa0>
 8007754:	6820      	ldr	r0, [r4, #0]
 8007756:	b938      	cbnz	r0, 8007768 <__pow5mult+0x9c>
 8007758:	4622      	mov	r2, r4
 800775a:	4621      	mov	r1, r4
 800775c:	4630      	mov	r0, r6
 800775e:	f7ff ff0b 	bl	8007578 <__multiply>
 8007762:	6020      	str	r0, [r4, #0]
 8007764:	f8c0 9000 	str.w	r9, [r0]
 8007768:	4604      	mov	r4, r0
 800776a:	e7e4      	b.n	8007736 <__pow5mult+0x6a>
 800776c:	4638      	mov	r0, r7
 800776e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007772:	bf00      	nop
 8007774:	0800bb78 	.word	0x0800bb78
 8007778:	0800b945 	.word	0x0800b945
 800777c:	0800ba28 	.word	0x0800ba28

08007780 <__lshift>:
 8007780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007784:	460c      	mov	r4, r1
 8007786:	6849      	ldr	r1, [r1, #4]
 8007788:	6923      	ldr	r3, [r4, #16]
 800778a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800778e:	68a3      	ldr	r3, [r4, #8]
 8007790:	4607      	mov	r7, r0
 8007792:	4691      	mov	r9, r2
 8007794:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007798:	f108 0601 	add.w	r6, r8, #1
 800779c:	42b3      	cmp	r3, r6
 800779e:	db0b      	blt.n	80077b8 <__lshift+0x38>
 80077a0:	4638      	mov	r0, r7
 80077a2:	f7ff fddb 	bl	800735c <_Balloc>
 80077a6:	4605      	mov	r5, r0
 80077a8:	b948      	cbnz	r0, 80077be <__lshift+0x3e>
 80077aa:	4602      	mov	r2, r0
 80077ac:	4b2a      	ldr	r3, [pc, #168]	; (8007858 <__lshift+0xd8>)
 80077ae:	482b      	ldr	r0, [pc, #172]	; (800785c <__lshift+0xdc>)
 80077b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80077b4:	f000 fd68 	bl	8008288 <__assert_func>
 80077b8:	3101      	adds	r1, #1
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	e7ee      	b.n	800779c <__lshift+0x1c>
 80077be:	2300      	movs	r3, #0
 80077c0:	f100 0114 	add.w	r1, r0, #20
 80077c4:	f100 0210 	add.w	r2, r0, #16
 80077c8:	4618      	mov	r0, r3
 80077ca:	4553      	cmp	r3, sl
 80077cc:	db37      	blt.n	800783e <__lshift+0xbe>
 80077ce:	6920      	ldr	r0, [r4, #16]
 80077d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077d4:	f104 0314 	add.w	r3, r4, #20
 80077d8:	f019 091f 	ands.w	r9, r9, #31
 80077dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80077e4:	d02f      	beq.n	8007846 <__lshift+0xc6>
 80077e6:	f1c9 0e20 	rsb	lr, r9, #32
 80077ea:	468a      	mov	sl, r1
 80077ec:	f04f 0c00 	mov.w	ip, #0
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	fa02 f209 	lsl.w	r2, r2, r9
 80077f6:	ea42 020c 	orr.w	r2, r2, ip
 80077fa:	f84a 2b04 	str.w	r2, [sl], #4
 80077fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007802:	4298      	cmp	r0, r3
 8007804:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007808:	d8f2      	bhi.n	80077f0 <__lshift+0x70>
 800780a:	1b03      	subs	r3, r0, r4
 800780c:	3b15      	subs	r3, #21
 800780e:	f023 0303 	bic.w	r3, r3, #3
 8007812:	3304      	adds	r3, #4
 8007814:	f104 0215 	add.w	r2, r4, #21
 8007818:	4290      	cmp	r0, r2
 800781a:	bf38      	it	cc
 800781c:	2304      	movcc	r3, #4
 800781e:	f841 c003 	str.w	ip, [r1, r3]
 8007822:	f1bc 0f00 	cmp.w	ip, #0
 8007826:	d001      	beq.n	800782c <__lshift+0xac>
 8007828:	f108 0602 	add.w	r6, r8, #2
 800782c:	3e01      	subs	r6, #1
 800782e:	4638      	mov	r0, r7
 8007830:	612e      	str	r6, [r5, #16]
 8007832:	4621      	mov	r1, r4
 8007834:	f7ff fdd2 	bl	80073dc <_Bfree>
 8007838:	4628      	mov	r0, r5
 800783a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007842:	3301      	adds	r3, #1
 8007844:	e7c1      	b.n	80077ca <__lshift+0x4a>
 8007846:	3904      	subs	r1, #4
 8007848:	f853 2b04 	ldr.w	r2, [r3], #4
 800784c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007850:	4298      	cmp	r0, r3
 8007852:	d8f9      	bhi.n	8007848 <__lshift+0xc8>
 8007854:	e7ea      	b.n	800782c <__lshift+0xac>
 8007856:	bf00      	nop
 8007858:	0800b9b7 	.word	0x0800b9b7
 800785c:	0800ba28 	.word	0x0800ba28

08007860 <__mcmp>:
 8007860:	b530      	push	{r4, r5, lr}
 8007862:	6902      	ldr	r2, [r0, #16]
 8007864:	690c      	ldr	r4, [r1, #16]
 8007866:	1b12      	subs	r2, r2, r4
 8007868:	d10e      	bne.n	8007888 <__mcmp+0x28>
 800786a:	f100 0314 	add.w	r3, r0, #20
 800786e:	3114      	adds	r1, #20
 8007870:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007874:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007878:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800787c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007880:	42a5      	cmp	r5, r4
 8007882:	d003      	beq.n	800788c <__mcmp+0x2c>
 8007884:	d305      	bcc.n	8007892 <__mcmp+0x32>
 8007886:	2201      	movs	r2, #1
 8007888:	4610      	mov	r0, r2
 800788a:	bd30      	pop	{r4, r5, pc}
 800788c:	4283      	cmp	r3, r0
 800788e:	d3f3      	bcc.n	8007878 <__mcmp+0x18>
 8007890:	e7fa      	b.n	8007888 <__mcmp+0x28>
 8007892:	f04f 32ff 	mov.w	r2, #4294967295
 8007896:	e7f7      	b.n	8007888 <__mcmp+0x28>

08007898 <__mdiff>:
 8007898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	460c      	mov	r4, r1
 800789e:	4606      	mov	r6, r0
 80078a0:	4611      	mov	r1, r2
 80078a2:	4620      	mov	r0, r4
 80078a4:	4690      	mov	r8, r2
 80078a6:	f7ff ffdb 	bl	8007860 <__mcmp>
 80078aa:	1e05      	subs	r5, r0, #0
 80078ac:	d110      	bne.n	80078d0 <__mdiff+0x38>
 80078ae:	4629      	mov	r1, r5
 80078b0:	4630      	mov	r0, r6
 80078b2:	f7ff fd53 	bl	800735c <_Balloc>
 80078b6:	b930      	cbnz	r0, 80078c6 <__mdiff+0x2e>
 80078b8:	4b3a      	ldr	r3, [pc, #232]	; (80079a4 <__mdiff+0x10c>)
 80078ba:	4602      	mov	r2, r0
 80078bc:	f240 2132 	movw	r1, #562	; 0x232
 80078c0:	4839      	ldr	r0, [pc, #228]	; (80079a8 <__mdiff+0x110>)
 80078c2:	f000 fce1 	bl	8008288 <__assert_func>
 80078c6:	2301      	movs	r3, #1
 80078c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d0:	bfa4      	itt	ge
 80078d2:	4643      	movge	r3, r8
 80078d4:	46a0      	movge	r8, r4
 80078d6:	4630      	mov	r0, r6
 80078d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078dc:	bfa6      	itte	ge
 80078de:	461c      	movge	r4, r3
 80078e0:	2500      	movge	r5, #0
 80078e2:	2501      	movlt	r5, #1
 80078e4:	f7ff fd3a 	bl	800735c <_Balloc>
 80078e8:	b920      	cbnz	r0, 80078f4 <__mdiff+0x5c>
 80078ea:	4b2e      	ldr	r3, [pc, #184]	; (80079a4 <__mdiff+0x10c>)
 80078ec:	4602      	mov	r2, r0
 80078ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80078f2:	e7e5      	b.n	80078c0 <__mdiff+0x28>
 80078f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80078f8:	6926      	ldr	r6, [r4, #16]
 80078fa:	60c5      	str	r5, [r0, #12]
 80078fc:	f104 0914 	add.w	r9, r4, #20
 8007900:	f108 0514 	add.w	r5, r8, #20
 8007904:	f100 0e14 	add.w	lr, r0, #20
 8007908:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800790c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007910:	f108 0210 	add.w	r2, r8, #16
 8007914:	46f2      	mov	sl, lr
 8007916:	2100      	movs	r1, #0
 8007918:	f859 3b04 	ldr.w	r3, [r9], #4
 800791c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007920:	fa1f f883 	uxth.w	r8, r3
 8007924:	fa11 f18b 	uxtah	r1, r1, fp
 8007928:	0c1b      	lsrs	r3, r3, #16
 800792a:	eba1 0808 	sub.w	r8, r1, r8
 800792e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007932:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007936:	fa1f f888 	uxth.w	r8, r8
 800793a:	1419      	asrs	r1, r3, #16
 800793c:	454e      	cmp	r6, r9
 800793e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007942:	f84a 3b04 	str.w	r3, [sl], #4
 8007946:	d8e7      	bhi.n	8007918 <__mdiff+0x80>
 8007948:	1b33      	subs	r3, r6, r4
 800794a:	3b15      	subs	r3, #21
 800794c:	f023 0303 	bic.w	r3, r3, #3
 8007950:	3304      	adds	r3, #4
 8007952:	3415      	adds	r4, #21
 8007954:	42a6      	cmp	r6, r4
 8007956:	bf38      	it	cc
 8007958:	2304      	movcc	r3, #4
 800795a:	441d      	add	r5, r3
 800795c:	4473      	add	r3, lr
 800795e:	469e      	mov	lr, r3
 8007960:	462e      	mov	r6, r5
 8007962:	4566      	cmp	r6, ip
 8007964:	d30e      	bcc.n	8007984 <__mdiff+0xec>
 8007966:	f10c 0203 	add.w	r2, ip, #3
 800796a:	1b52      	subs	r2, r2, r5
 800796c:	f022 0203 	bic.w	r2, r2, #3
 8007970:	3d03      	subs	r5, #3
 8007972:	45ac      	cmp	ip, r5
 8007974:	bf38      	it	cc
 8007976:	2200      	movcc	r2, #0
 8007978:	441a      	add	r2, r3
 800797a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800797e:	b17b      	cbz	r3, 80079a0 <__mdiff+0x108>
 8007980:	6107      	str	r7, [r0, #16]
 8007982:	e7a3      	b.n	80078cc <__mdiff+0x34>
 8007984:	f856 8b04 	ldr.w	r8, [r6], #4
 8007988:	fa11 f288 	uxtah	r2, r1, r8
 800798c:	1414      	asrs	r4, r2, #16
 800798e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007992:	b292      	uxth	r2, r2
 8007994:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007998:	f84e 2b04 	str.w	r2, [lr], #4
 800799c:	1421      	asrs	r1, r4, #16
 800799e:	e7e0      	b.n	8007962 <__mdiff+0xca>
 80079a0:	3f01      	subs	r7, #1
 80079a2:	e7ea      	b.n	800797a <__mdiff+0xe2>
 80079a4:	0800b9b7 	.word	0x0800b9b7
 80079a8:	0800ba28 	.word	0x0800ba28

080079ac <__d2b>:
 80079ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079b0:	4689      	mov	r9, r1
 80079b2:	2101      	movs	r1, #1
 80079b4:	ec57 6b10 	vmov	r6, r7, d0
 80079b8:	4690      	mov	r8, r2
 80079ba:	f7ff fccf 	bl	800735c <_Balloc>
 80079be:	4604      	mov	r4, r0
 80079c0:	b930      	cbnz	r0, 80079d0 <__d2b+0x24>
 80079c2:	4602      	mov	r2, r0
 80079c4:	4b25      	ldr	r3, [pc, #148]	; (8007a5c <__d2b+0xb0>)
 80079c6:	4826      	ldr	r0, [pc, #152]	; (8007a60 <__d2b+0xb4>)
 80079c8:	f240 310a 	movw	r1, #778	; 0x30a
 80079cc:	f000 fc5c 	bl	8008288 <__assert_func>
 80079d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80079d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079d8:	bb35      	cbnz	r5, 8007a28 <__d2b+0x7c>
 80079da:	2e00      	cmp	r6, #0
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	d028      	beq.n	8007a32 <__d2b+0x86>
 80079e0:	4668      	mov	r0, sp
 80079e2:	9600      	str	r6, [sp, #0]
 80079e4:	f7ff fd82 	bl	80074ec <__lo0bits>
 80079e8:	9900      	ldr	r1, [sp, #0]
 80079ea:	b300      	cbz	r0, 8007a2e <__d2b+0x82>
 80079ec:	9a01      	ldr	r2, [sp, #4]
 80079ee:	f1c0 0320 	rsb	r3, r0, #32
 80079f2:	fa02 f303 	lsl.w	r3, r2, r3
 80079f6:	430b      	orrs	r3, r1
 80079f8:	40c2      	lsrs	r2, r0
 80079fa:	6163      	str	r3, [r4, #20]
 80079fc:	9201      	str	r2, [sp, #4]
 80079fe:	9b01      	ldr	r3, [sp, #4]
 8007a00:	61a3      	str	r3, [r4, #24]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bf14      	ite	ne
 8007a06:	2202      	movne	r2, #2
 8007a08:	2201      	moveq	r2, #1
 8007a0a:	6122      	str	r2, [r4, #16]
 8007a0c:	b1d5      	cbz	r5, 8007a44 <__d2b+0x98>
 8007a0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a12:	4405      	add	r5, r0
 8007a14:	f8c9 5000 	str.w	r5, [r9]
 8007a18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a1c:	f8c8 0000 	str.w	r0, [r8]
 8007a20:	4620      	mov	r0, r4
 8007a22:	b003      	add	sp, #12
 8007a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a2c:	e7d5      	b.n	80079da <__d2b+0x2e>
 8007a2e:	6161      	str	r1, [r4, #20]
 8007a30:	e7e5      	b.n	80079fe <__d2b+0x52>
 8007a32:	a801      	add	r0, sp, #4
 8007a34:	f7ff fd5a 	bl	80074ec <__lo0bits>
 8007a38:	9b01      	ldr	r3, [sp, #4]
 8007a3a:	6163      	str	r3, [r4, #20]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	6122      	str	r2, [r4, #16]
 8007a40:	3020      	adds	r0, #32
 8007a42:	e7e3      	b.n	8007a0c <__d2b+0x60>
 8007a44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a4c:	f8c9 0000 	str.w	r0, [r9]
 8007a50:	6918      	ldr	r0, [r3, #16]
 8007a52:	f7ff fd2b 	bl	80074ac <__hi0bits>
 8007a56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a5a:	e7df      	b.n	8007a1c <__d2b+0x70>
 8007a5c:	0800b9b7 	.word	0x0800b9b7
 8007a60:	0800ba28 	.word	0x0800ba28

08007a64 <_calloc_r>:
 8007a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a66:	fba1 2402 	umull	r2, r4, r1, r2
 8007a6a:	b94c      	cbnz	r4, 8007a80 <_calloc_r+0x1c>
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	9201      	str	r2, [sp, #4]
 8007a70:	f000 f87a 	bl	8007b68 <_malloc_r>
 8007a74:	9a01      	ldr	r2, [sp, #4]
 8007a76:	4605      	mov	r5, r0
 8007a78:	b930      	cbnz	r0, 8007a88 <_calloc_r+0x24>
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	b003      	add	sp, #12
 8007a7e:	bd30      	pop	{r4, r5, pc}
 8007a80:	220c      	movs	r2, #12
 8007a82:	6002      	str	r2, [r0, #0]
 8007a84:	2500      	movs	r5, #0
 8007a86:	e7f8      	b.n	8007a7a <_calloc_r+0x16>
 8007a88:	4621      	mov	r1, r4
 8007a8a:	f7fd fddf 	bl	800564c <memset>
 8007a8e:	e7f4      	b.n	8007a7a <_calloc_r+0x16>

08007a90 <_free_r>:
 8007a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a92:	2900      	cmp	r1, #0
 8007a94:	d044      	beq.n	8007b20 <_free_r+0x90>
 8007a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a9a:	9001      	str	r0, [sp, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f1a1 0404 	sub.w	r4, r1, #4
 8007aa2:	bfb8      	it	lt
 8007aa4:	18e4      	addlt	r4, r4, r3
 8007aa6:	f000 fc8f 	bl	80083c8 <__malloc_lock>
 8007aaa:	4a1e      	ldr	r2, [pc, #120]	; (8007b24 <_free_r+0x94>)
 8007aac:	9801      	ldr	r0, [sp, #4]
 8007aae:	6813      	ldr	r3, [r2, #0]
 8007ab0:	b933      	cbnz	r3, 8007ac0 <_free_r+0x30>
 8007ab2:	6063      	str	r3, [r4, #4]
 8007ab4:	6014      	str	r4, [r2, #0]
 8007ab6:	b003      	add	sp, #12
 8007ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007abc:	f000 bc8a 	b.w	80083d4 <__malloc_unlock>
 8007ac0:	42a3      	cmp	r3, r4
 8007ac2:	d908      	bls.n	8007ad6 <_free_r+0x46>
 8007ac4:	6825      	ldr	r5, [r4, #0]
 8007ac6:	1961      	adds	r1, r4, r5
 8007ac8:	428b      	cmp	r3, r1
 8007aca:	bf01      	itttt	eq
 8007acc:	6819      	ldreq	r1, [r3, #0]
 8007ace:	685b      	ldreq	r3, [r3, #4]
 8007ad0:	1949      	addeq	r1, r1, r5
 8007ad2:	6021      	streq	r1, [r4, #0]
 8007ad4:	e7ed      	b.n	8007ab2 <_free_r+0x22>
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	b10b      	cbz	r3, 8007ae0 <_free_r+0x50>
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	d9fa      	bls.n	8007ad6 <_free_r+0x46>
 8007ae0:	6811      	ldr	r1, [r2, #0]
 8007ae2:	1855      	adds	r5, r2, r1
 8007ae4:	42a5      	cmp	r5, r4
 8007ae6:	d10b      	bne.n	8007b00 <_free_r+0x70>
 8007ae8:	6824      	ldr	r4, [r4, #0]
 8007aea:	4421      	add	r1, r4
 8007aec:	1854      	adds	r4, r2, r1
 8007aee:	42a3      	cmp	r3, r4
 8007af0:	6011      	str	r1, [r2, #0]
 8007af2:	d1e0      	bne.n	8007ab6 <_free_r+0x26>
 8007af4:	681c      	ldr	r4, [r3, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	6053      	str	r3, [r2, #4]
 8007afa:	4421      	add	r1, r4
 8007afc:	6011      	str	r1, [r2, #0]
 8007afe:	e7da      	b.n	8007ab6 <_free_r+0x26>
 8007b00:	d902      	bls.n	8007b08 <_free_r+0x78>
 8007b02:	230c      	movs	r3, #12
 8007b04:	6003      	str	r3, [r0, #0]
 8007b06:	e7d6      	b.n	8007ab6 <_free_r+0x26>
 8007b08:	6825      	ldr	r5, [r4, #0]
 8007b0a:	1961      	adds	r1, r4, r5
 8007b0c:	428b      	cmp	r3, r1
 8007b0e:	bf04      	itt	eq
 8007b10:	6819      	ldreq	r1, [r3, #0]
 8007b12:	685b      	ldreq	r3, [r3, #4]
 8007b14:	6063      	str	r3, [r4, #4]
 8007b16:	bf04      	itt	eq
 8007b18:	1949      	addeq	r1, r1, r5
 8007b1a:	6021      	streq	r1, [r4, #0]
 8007b1c:	6054      	str	r4, [r2, #4]
 8007b1e:	e7ca      	b.n	8007ab6 <_free_r+0x26>
 8007b20:	b003      	add	sp, #12
 8007b22:	bd30      	pop	{r4, r5, pc}
 8007b24:	200008c0 	.word	0x200008c0

08007b28 <sbrk_aligned>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	4e0e      	ldr	r6, [pc, #56]	; (8007b64 <sbrk_aligned+0x3c>)
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	6831      	ldr	r1, [r6, #0]
 8007b30:	4605      	mov	r5, r0
 8007b32:	b911      	cbnz	r1, 8007b3a <sbrk_aligned+0x12>
 8007b34:	f000 fb42 	bl	80081bc <_sbrk_r>
 8007b38:	6030      	str	r0, [r6, #0]
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f000 fb3d 	bl	80081bc <_sbrk_r>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	d00a      	beq.n	8007b5c <sbrk_aligned+0x34>
 8007b46:	1cc4      	adds	r4, r0, #3
 8007b48:	f024 0403 	bic.w	r4, r4, #3
 8007b4c:	42a0      	cmp	r0, r4
 8007b4e:	d007      	beq.n	8007b60 <sbrk_aligned+0x38>
 8007b50:	1a21      	subs	r1, r4, r0
 8007b52:	4628      	mov	r0, r5
 8007b54:	f000 fb32 	bl	80081bc <_sbrk_r>
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d101      	bne.n	8007b60 <sbrk_aligned+0x38>
 8007b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8007b60:	4620      	mov	r0, r4
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	200008c4 	.word	0x200008c4

08007b68 <_malloc_r>:
 8007b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6c:	1ccd      	adds	r5, r1, #3
 8007b6e:	f025 0503 	bic.w	r5, r5, #3
 8007b72:	3508      	adds	r5, #8
 8007b74:	2d0c      	cmp	r5, #12
 8007b76:	bf38      	it	cc
 8007b78:	250c      	movcc	r5, #12
 8007b7a:	2d00      	cmp	r5, #0
 8007b7c:	4607      	mov	r7, r0
 8007b7e:	db01      	blt.n	8007b84 <_malloc_r+0x1c>
 8007b80:	42a9      	cmp	r1, r5
 8007b82:	d905      	bls.n	8007b90 <_malloc_r+0x28>
 8007b84:	230c      	movs	r3, #12
 8007b86:	603b      	str	r3, [r7, #0]
 8007b88:	2600      	movs	r6, #0
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b90:	4e2e      	ldr	r6, [pc, #184]	; (8007c4c <_malloc_r+0xe4>)
 8007b92:	f000 fc19 	bl	80083c8 <__malloc_lock>
 8007b96:	6833      	ldr	r3, [r6, #0]
 8007b98:	461c      	mov	r4, r3
 8007b9a:	bb34      	cbnz	r4, 8007bea <_malloc_r+0x82>
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	f7ff ffc2 	bl	8007b28 <sbrk_aligned>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	d14d      	bne.n	8007c46 <_malloc_r+0xde>
 8007baa:	6834      	ldr	r4, [r6, #0]
 8007bac:	4626      	mov	r6, r4
 8007bae:	2e00      	cmp	r6, #0
 8007bb0:	d140      	bne.n	8007c34 <_malloc_r+0xcc>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	eb04 0803 	add.w	r8, r4, r3
 8007bbc:	f000 fafe 	bl	80081bc <_sbrk_r>
 8007bc0:	4580      	cmp	r8, r0
 8007bc2:	d13a      	bne.n	8007c3a <_malloc_r+0xd2>
 8007bc4:	6821      	ldr	r1, [r4, #0]
 8007bc6:	3503      	adds	r5, #3
 8007bc8:	1a6d      	subs	r5, r5, r1
 8007bca:	f025 0503 	bic.w	r5, r5, #3
 8007bce:	3508      	adds	r5, #8
 8007bd0:	2d0c      	cmp	r5, #12
 8007bd2:	bf38      	it	cc
 8007bd4:	250c      	movcc	r5, #12
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	4638      	mov	r0, r7
 8007bda:	f7ff ffa5 	bl	8007b28 <sbrk_aligned>
 8007bde:	3001      	adds	r0, #1
 8007be0:	d02b      	beq.n	8007c3a <_malloc_r+0xd2>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	442b      	add	r3, r5
 8007be6:	6023      	str	r3, [r4, #0]
 8007be8:	e00e      	b.n	8007c08 <_malloc_r+0xa0>
 8007bea:	6822      	ldr	r2, [r4, #0]
 8007bec:	1b52      	subs	r2, r2, r5
 8007bee:	d41e      	bmi.n	8007c2e <_malloc_r+0xc6>
 8007bf0:	2a0b      	cmp	r2, #11
 8007bf2:	d916      	bls.n	8007c22 <_malloc_r+0xba>
 8007bf4:	1961      	adds	r1, r4, r5
 8007bf6:	42a3      	cmp	r3, r4
 8007bf8:	6025      	str	r5, [r4, #0]
 8007bfa:	bf18      	it	ne
 8007bfc:	6059      	strne	r1, [r3, #4]
 8007bfe:	6863      	ldr	r3, [r4, #4]
 8007c00:	bf08      	it	eq
 8007c02:	6031      	streq	r1, [r6, #0]
 8007c04:	5162      	str	r2, [r4, r5]
 8007c06:	604b      	str	r3, [r1, #4]
 8007c08:	4638      	mov	r0, r7
 8007c0a:	f104 060b 	add.w	r6, r4, #11
 8007c0e:	f000 fbe1 	bl	80083d4 <__malloc_unlock>
 8007c12:	f026 0607 	bic.w	r6, r6, #7
 8007c16:	1d23      	adds	r3, r4, #4
 8007c18:	1af2      	subs	r2, r6, r3
 8007c1a:	d0b6      	beq.n	8007b8a <_malloc_r+0x22>
 8007c1c:	1b9b      	subs	r3, r3, r6
 8007c1e:	50a3      	str	r3, [r4, r2]
 8007c20:	e7b3      	b.n	8007b8a <_malloc_r+0x22>
 8007c22:	6862      	ldr	r2, [r4, #4]
 8007c24:	42a3      	cmp	r3, r4
 8007c26:	bf0c      	ite	eq
 8007c28:	6032      	streq	r2, [r6, #0]
 8007c2a:	605a      	strne	r2, [r3, #4]
 8007c2c:	e7ec      	b.n	8007c08 <_malloc_r+0xa0>
 8007c2e:	4623      	mov	r3, r4
 8007c30:	6864      	ldr	r4, [r4, #4]
 8007c32:	e7b2      	b.n	8007b9a <_malloc_r+0x32>
 8007c34:	4634      	mov	r4, r6
 8007c36:	6876      	ldr	r6, [r6, #4]
 8007c38:	e7b9      	b.n	8007bae <_malloc_r+0x46>
 8007c3a:	230c      	movs	r3, #12
 8007c3c:	603b      	str	r3, [r7, #0]
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f000 fbc8 	bl	80083d4 <__malloc_unlock>
 8007c44:	e7a1      	b.n	8007b8a <_malloc_r+0x22>
 8007c46:	6025      	str	r5, [r4, #0]
 8007c48:	e7de      	b.n	8007c08 <_malloc_r+0xa0>
 8007c4a:	bf00      	nop
 8007c4c:	200008c0 	.word	0x200008c0

08007c50 <__ssputs_r>:
 8007c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c54:	688e      	ldr	r6, [r1, #8]
 8007c56:	429e      	cmp	r6, r3
 8007c58:	4682      	mov	sl, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	4690      	mov	r8, r2
 8007c5e:	461f      	mov	r7, r3
 8007c60:	d838      	bhi.n	8007cd4 <__ssputs_r+0x84>
 8007c62:	898a      	ldrh	r2, [r1, #12]
 8007c64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c68:	d032      	beq.n	8007cd0 <__ssputs_r+0x80>
 8007c6a:	6825      	ldr	r5, [r4, #0]
 8007c6c:	6909      	ldr	r1, [r1, #16]
 8007c6e:	eba5 0901 	sub.w	r9, r5, r1
 8007c72:	6965      	ldr	r5, [r4, #20]
 8007c74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	444b      	add	r3, r9
 8007c80:	106d      	asrs	r5, r5, #1
 8007c82:	429d      	cmp	r5, r3
 8007c84:	bf38      	it	cc
 8007c86:	461d      	movcc	r5, r3
 8007c88:	0553      	lsls	r3, r2, #21
 8007c8a:	d531      	bpl.n	8007cf0 <__ssputs_r+0xa0>
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	f7ff ff6b 	bl	8007b68 <_malloc_r>
 8007c92:	4606      	mov	r6, r0
 8007c94:	b950      	cbnz	r0, 8007cac <__ssputs_r+0x5c>
 8007c96:	230c      	movs	r3, #12
 8007c98:	f8ca 3000 	str.w	r3, [sl]
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca2:	81a3      	strh	r3, [r4, #12]
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cac:	6921      	ldr	r1, [r4, #16]
 8007cae:	464a      	mov	r2, r9
 8007cb0:	f7fd fcbe 	bl	8005630 <memcpy>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cbe:	81a3      	strh	r3, [r4, #12]
 8007cc0:	6126      	str	r6, [r4, #16]
 8007cc2:	6165      	str	r5, [r4, #20]
 8007cc4:	444e      	add	r6, r9
 8007cc6:	eba5 0509 	sub.w	r5, r5, r9
 8007cca:	6026      	str	r6, [r4, #0]
 8007ccc:	60a5      	str	r5, [r4, #8]
 8007cce:	463e      	mov	r6, r7
 8007cd0:	42be      	cmp	r6, r7
 8007cd2:	d900      	bls.n	8007cd6 <__ssputs_r+0x86>
 8007cd4:	463e      	mov	r6, r7
 8007cd6:	6820      	ldr	r0, [r4, #0]
 8007cd8:	4632      	mov	r2, r6
 8007cda:	4641      	mov	r1, r8
 8007cdc:	f000 fb5a 	bl	8008394 <memmove>
 8007ce0:	68a3      	ldr	r3, [r4, #8]
 8007ce2:	1b9b      	subs	r3, r3, r6
 8007ce4:	60a3      	str	r3, [r4, #8]
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	4433      	add	r3, r6
 8007cea:	6023      	str	r3, [r4, #0]
 8007cec:	2000      	movs	r0, #0
 8007cee:	e7db      	b.n	8007ca8 <__ssputs_r+0x58>
 8007cf0:	462a      	mov	r2, r5
 8007cf2:	f000 fb75 	bl	80083e0 <_realloc_r>
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d1e1      	bne.n	8007cc0 <__ssputs_r+0x70>
 8007cfc:	6921      	ldr	r1, [r4, #16]
 8007cfe:	4650      	mov	r0, sl
 8007d00:	f7ff fec6 	bl	8007a90 <_free_r>
 8007d04:	e7c7      	b.n	8007c96 <__ssputs_r+0x46>
	...

08007d08 <_svfiprintf_r>:
 8007d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	4698      	mov	r8, r3
 8007d0e:	898b      	ldrh	r3, [r1, #12]
 8007d10:	061b      	lsls	r3, r3, #24
 8007d12:	b09d      	sub	sp, #116	; 0x74
 8007d14:	4607      	mov	r7, r0
 8007d16:	460d      	mov	r5, r1
 8007d18:	4614      	mov	r4, r2
 8007d1a:	d50e      	bpl.n	8007d3a <_svfiprintf_r+0x32>
 8007d1c:	690b      	ldr	r3, [r1, #16]
 8007d1e:	b963      	cbnz	r3, 8007d3a <_svfiprintf_r+0x32>
 8007d20:	2140      	movs	r1, #64	; 0x40
 8007d22:	f7ff ff21 	bl	8007b68 <_malloc_r>
 8007d26:	6028      	str	r0, [r5, #0]
 8007d28:	6128      	str	r0, [r5, #16]
 8007d2a:	b920      	cbnz	r0, 8007d36 <_svfiprintf_r+0x2e>
 8007d2c:	230c      	movs	r3, #12
 8007d2e:	603b      	str	r3, [r7, #0]
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	e0d1      	b.n	8007eda <_svfiprintf_r+0x1d2>
 8007d36:	2340      	movs	r3, #64	; 0x40
 8007d38:	616b      	str	r3, [r5, #20]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d3e:	2320      	movs	r3, #32
 8007d40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d48:	2330      	movs	r3, #48	; 0x30
 8007d4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ef4 <_svfiprintf_r+0x1ec>
 8007d4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d52:	f04f 0901 	mov.w	r9, #1
 8007d56:	4623      	mov	r3, r4
 8007d58:	469a      	mov	sl, r3
 8007d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d5e:	b10a      	cbz	r2, 8007d64 <_svfiprintf_r+0x5c>
 8007d60:	2a25      	cmp	r2, #37	; 0x25
 8007d62:	d1f9      	bne.n	8007d58 <_svfiprintf_r+0x50>
 8007d64:	ebba 0b04 	subs.w	fp, sl, r4
 8007d68:	d00b      	beq.n	8007d82 <_svfiprintf_r+0x7a>
 8007d6a:	465b      	mov	r3, fp
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	4629      	mov	r1, r5
 8007d70:	4638      	mov	r0, r7
 8007d72:	f7ff ff6d 	bl	8007c50 <__ssputs_r>
 8007d76:	3001      	adds	r0, #1
 8007d78:	f000 80aa 	beq.w	8007ed0 <_svfiprintf_r+0x1c8>
 8007d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d7e:	445a      	add	r2, fp
 8007d80:	9209      	str	r2, [sp, #36]	; 0x24
 8007d82:	f89a 3000 	ldrb.w	r3, [sl]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 80a2 	beq.w	8007ed0 <_svfiprintf_r+0x1c8>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d96:	f10a 0a01 	add.w	sl, sl, #1
 8007d9a:	9304      	str	r3, [sp, #16]
 8007d9c:	9307      	str	r3, [sp, #28]
 8007d9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007da2:	931a      	str	r3, [sp, #104]	; 0x68
 8007da4:	4654      	mov	r4, sl
 8007da6:	2205      	movs	r2, #5
 8007da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dac:	4851      	ldr	r0, [pc, #324]	; (8007ef4 <_svfiprintf_r+0x1ec>)
 8007dae:	f7f8 fa17 	bl	80001e0 <memchr>
 8007db2:	9a04      	ldr	r2, [sp, #16]
 8007db4:	b9d8      	cbnz	r0, 8007dee <_svfiprintf_r+0xe6>
 8007db6:	06d0      	lsls	r0, r2, #27
 8007db8:	bf44      	itt	mi
 8007dba:	2320      	movmi	r3, #32
 8007dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dc0:	0711      	lsls	r1, r2, #28
 8007dc2:	bf44      	itt	mi
 8007dc4:	232b      	movmi	r3, #43	; 0x2b
 8007dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dca:	f89a 3000 	ldrb.w	r3, [sl]
 8007dce:	2b2a      	cmp	r3, #42	; 0x2a
 8007dd0:	d015      	beq.n	8007dfe <_svfiprintf_r+0xf6>
 8007dd2:	9a07      	ldr	r2, [sp, #28]
 8007dd4:	4654      	mov	r4, sl
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	f04f 0c0a 	mov.w	ip, #10
 8007ddc:	4621      	mov	r1, r4
 8007dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007de2:	3b30      	subs	r3, #48	; 0x30
 8007de4:	2b09      	cmp	r3, #9
 8007de6:	d94e      	bls.n	8007e86 <_svfiprintf_r+0x17e>
 8007de8:	b1b0      	cbz	r0, 8007e18 <_svfiprintf_r+0x110>
 8007dea:	9207      	str	r2, [sp, #28]
 8007dec:	e014      	b.n	8007e18 <_svfiprintf_r+0x110>
 8007dee:	eba0 0308 	sub.w	r3, r0, r8
 8007df2:	fa09 f303 	lsl.w	r3, r9, r3
 8007df6:	4313      	orrs	r3, r2
 8007df8:	9304      	str	r3, [sp, #16]
 8007dfa:	46a2      	mov	sl, r4
 8007dfc:	e7d2      	b.n	8007da4 <_svfiprintf_r+0x9c>
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	1d19      	adds	r1, r3, #4
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	9103      	str	r1, [sp, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	bfbb      	ittet	lt
 8007e0a:	425b      	neglt	r3, r3
 8007e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007e10:	9307      	strge	r3, [sp, #28]
 8007e12:	9307      	strlt	r3, [sp, #28]
 8007e14:	bfb8      	it	lt
 8007e16:	9204      	strlt	r2, [sp, #16]
 8007e18:	7823      	ldrb	r3, [r4, #0]
 8007e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e1c:	d10c      	bne.n	8007e38 <_svfiprintf_r+0x130>
 8007e1e:	7863      	ldrb	r3, [r4, #1]
 8007e20:	2b2a      	cmp	r3, #42	; 0x2a
 8007e22:	d135      	bne.n	8007e90 <_svfiprintf_r+0x188>
 8007e24:	9b03      	ldr	r3, [sp, #12]
 8007e26:	1d1a      	adds	r2, r3, #4
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	9203      	str	r2, [sp, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	bfb8      	it	lt
 8007e30:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e34:	3402      	adds	r4, #2
 8007e36:	9305      	str	r3, [sp, #20]
 8007e38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f04 <_svfiprintf_r+0x1fc>
 8007e3c:	7821      	ldrb	r1, [r4, #0]
 8007e3e:	2203      	movs	r2, #3
 8007e40:	4650      	mov	r0, sl
 8007e42:	f7f8 f9cd 	bl	80001e0 <memchr>
 8007e46:	b140      	cbz	r0, 8007e5a <_svfiprintf_r+0x152>
 8007e48:	2340      	movs	r3, #64	; 0x40
 8007e4a:	eba0 000a 	sub.w	r0, r0, sl
 8007e4e:	fa03 f000 	lsl.w	r0, r3, r0
 8007e52:	9b04      	ldr	r3, [sp, #16]
 8007e54:	4303      	orrs	r3, r0
 8007e56:	3401      	adds	r4, #1
 8007e58:	9304      	str	r3, [sp, #16]
 8007e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e5e:	4826      	ldr	r0, [pc, #152]	; (8007ef8 <_svfiprintf_r+0x1f0>)
 8007e60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e64:	2206      	movs	r2, #6
 8007e66:	f7f8 f9bb 	bl	80001e0 <memchr>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d038      	beq.n	8007ee0 <_svfiprintf_r+0x1d8>
 8007e6e:	4b23      	ldr	r3, [pc, #140]	; (8007efc <_svfiprintf_r+0x1f4>)
 8007e70:	bb1b      	cbnz	r3, 8007eba <_svfiprintf_r+0x1b2>
 8007e72:	9b03      	ldr	r3, [sp, #12]
 8007e74:	3307      	adds	r3, #7
 8007e76:	f023 0307 	bic.w	r3, r3, #7
 8007e7a:	3308      	adds	r3, #8
 8007e7c:	9303      	str	r3, [sp, #12]
 8007e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e80:	4433      	add	r3, r6
 8007e82:	9309      	str	r3, [sp, #36]	; 0x24
 8007e84:	e767      	b.n	8007d56 <_svfiprintf_r+0x4e>
 8007e86:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	2001      	movs	r0, #1
 8007e8e:	e7a5      	b.n	8007ddc <_svfiprintf_r+0xd4>
 8007e90:	2300      	movs	r3, #0
 8007e92:	3401      	adds	r4, #1
 8007e94:	9305      	str	r3, [sp, #20]
 8007e96:	4619      	mov	r1, r3
 8007e98:	f04f 0c0a 	mov.w	ip, #10
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ea2:	3a30      	subs	r2, #48	; 0x30
 8007ea4:	2a09      	cmp	r2, #9
 8007ea6:	d903      	bls.n	8007eb0 <_svfiprintf_r+0x1a8>
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0c5      	beq.n	8007e38 <_svfiprintf_r+0x130>
 8007eac:	9105      	str	r1, [sp, #20]
 8007eae:	e7c3      	b.n	8007e38 <_svfiprintf_r+0x130>
 8007eb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e7f0      	b.n	8007e9c <_svfiprintf_r+0x194>
 8007eba:	ab03      	add	r3, sp, #12
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	462a      	mov	r2, r5
 8007ec0:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <_svfiprintf_r+0x1f8>)
 8007ec2:	a904      	add	r1, sp, #16
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	f7fd fc69 	bl	800579c <_printf_float>
 8007eca:	1c42      	adds	r2, r0, #1
 8007ecc:	4606      	mov	r6, r0
 8007ece:	d1d6      	bne.n	8007e7e <_svfiprintf_r+0x176>
 8007ed0:	89ab      	ldrh	r3, [r5, #12]
 8007ed2:	065b      	lsls	r3, r3, #25
 8007ed4:	f53f af2c 	bmi.w	8007d30 <_svfiprintf_r+0x28>
 8007ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eda:	b01d      	add	sp, #116	; 0x74
 8007edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee0:	ab03      	add	r3, sp, #12
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	462a      	mov	r2, r5
 8007ee6:	4b06      	ldr	r3, [pc, #24]	; (8007f00 <_svfiprintf_r+0x1f8>)
 8007ee8:	a904      	add	r1, sp, #16
 8007eea:	4638      	mov	r0, r7
 8007eec:	f7fd fefa 	bl	8005ce4 <_printf_i>
 8007ef0:	e7eb      	b.n	8007eca <_svfiprintf_r+0x1c2>
 8007ef2:	bf00      	nop
 8007ef4:	0800bb84 	.word	0x0800bb84
 8007ef8:	0800bb8e 	.word	0x0800bb8e
 8007efc:	0800579d 	.word	0x0800579d
 8007f00:	08007c51 	.word	0x08007c51
 8007f04:	0800bb8a 	.word	0x0800bb8a

08007f08 <__sfputc_r>:
 8007f08:	6893      	ldr	r3, [r2, #8]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	b410      	push	{r4}
 8007f10:	6093      	str	r3, [r2, #8]
 8007f12:	da08      	bge.n	8007f26 <__sfputc_r+0x1e>
 8007f14:	6994      	ldr	r4, [r2, #24]
 8007f16:	42a3      	cmp	r3, r4
 8007f18:	db01      	blt.n	8007f1e <__sfputc_r+0x16>
 8007f1a:	290a      	cmp	r1, #10
 8007f1c:	d103      	bne.n	8007f26 <__sfputc_r+0x1e>
 8007f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f22:	f7fe b8b3 	b.w	800608c <__swbuf_r>
 8007f26:	6813      	ldr	r3, [r2, #0]
 8007f28:	1c58      	adds	r0, r3, #1
 8007f2a:	6010      	str	r0, [r2, #0]
 8007f2c:	7019      	strb	r1, [r3, #0]
 8007f2e:	4608      	mov	r0, r1
 8007f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <__sfputs_r>:
 8007f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f38:	4606      	mov	r6, r0
 8007f3a:	460f      	mov	r7, r1
 8007f3c:	4614      	mov	r4, r2
 8007f3e:	18d5      	adds	r5, r2, r3
 8007f40:	42ac      	cmp	r4, r5
 8007f42:	d101      	bne.n	8007f48 <__sfputs_r+0x12>
 8007f44:	2000      	movs	r0, #0
 8007f46:	e007      	b.n	8007f58 <__sfputs_r+0x22>
 8007f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f4c:	463a      	mov	r2, r7
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f7ff ffda 	bl	8007f08 <__sfputc_r>
 8007f54:	1c43      	adds	r3, r0, #1
 8007f56:	d1f3      	bne.n	8007f40 <__sfputs_r+0xa>
 8007f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f5c <_vfiprintf_r>:
 8007f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f60:	460d      	mov	r5, r1
 8007f62:	b09d      	sub	sp, #116	; 0x74
 8007f64:	4614      	mov	r4, r2
 8007f66:	4698      	mov	r8, r3
 8007f68:	4606      	mov	r6, r0
 8007f6a:	b118      	cbz	r0, 8007f74 <_vfiprintf_r+0x18>
 8007f6c:	6983      	ldr	r3, [r0, #24]
 8007f6e:	b90b      	cbnz	r3, 8007f74 <_vfiprintf_r+0x18>
 8007f70:	f7ff f8e2 	bl	8007138 <__sinit>
 8007f74:	4b89      	ldr	r3, [pc, #548]	; (800819c <_vfiprintf_r+0x240>)
 8007f76:	429d      	cmp	r5, r3
 8007f78:	d11b      	bne.n	8007fb2 <_vfiprintf_r+0x56>
 8007f7a:	6875      	ldr	r5, [r6, #4]
 8007f7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f7e:	07d9      	lsls	r1, r3, #31
 8007f80:	d405      	bmi.n	8007f8e <_vfiprintf_r+0x32>
 8007f82:	89ab      	ldrh	r3, [r5, #12]
 8007f84:	059a      	lsls	r2, r3, #22
 8007f86:	d402      	bmi.n	8007f8e <_vfiprintf_r+0x32>
 8007f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f8a:	f7ff f978 	bl	800727e <__retarget_lock_acquire_recursive>
 8007f8e:	89ab      	ldrh	r3, [r5, #12]
 8007f90:	071b      	lsls	r3, r3, #28
 8007f92:	d501      	bpl.n	8007f98 <_vfiprintf_r+0x3c>
 8007f94:	692b      	ldr	r3, [r5, #16]
 8007f96:	b9eb      	cbnz	r3, 8007fd4 <_vfiprintf_r+0x78>
 8007f98:	4629      	mov	r1, r5
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7fe f8c8 	bl	8006130 <__swsetup_r>
 8007fa0:	b1c0      	cbz	r0, 8007fd4 <_vfiprintf_r+0x78>
 8007fa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fa4:	07dc      	lsls	r4, r3, #31
 8007fa6:	d50e      	bpl.n	8007fc6 <_vfiprintf_r+0x6a>
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fac:	b01d      	add	sp, #116	; 0x74
 8007fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb2:	4b7b      	ldr	r3, [pc, #492]	; (80081a0 <_vfiprintf_r+0x244>)
 8007fb4:	429d      	cmp	r5, r3
 8007fb6:	d101      	bne.n	8007fbc <_vfiprintf_r+0x60>
 8007fb8:	68b5      	ldr	r5, [r6, #8]
 8007fba:	e7df      	b.n	8007f7c <_vfiprintf_r+0x20>
 8007fbc:	4b79      	ldr	r3, [pc, #484]	; (80081a4 <_vfiprintf_r+0x248>)
 8007fbe:	429d      	cmp	r5, r3
 8007fc0:	bf08      	it	eq
 8007fc2:	68f5      	ldreq	r5, [r6, #12]
 8007fc4:	e7da      	b.n	8007f7c <_vfiprintf_r+0x20>
 8007fc6:	89ab      	ldrh	r3, [r5, #12]
 8007fc8:	0598      	lsls	r0, r3, #22
 8007fca:	d4ed      	bmi.n	8007fa8 <_vfiprintf_r+0x4c>
 8007fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fce:	f7ff f957 	bl	8007280 <__retarget_lock_release_recursive>
 8007fd2:	e7e9      	b.n	8007fa8 <_vfiprintf_r+0x4c>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd8:	2320      	movs	r3, #32
 8007fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fe2:	2330      	movs	r3, #48	; 0x30
 8007fe4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081a8 <_vfiprintf_r+0x24c>
 8007fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fec:	f04f 0901 	mov.w	r9, #1
 8007ff0:	4623      	mov	r3, r4
 8007ff2:	469a      	mov	sl, r3
 8007ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ff8:	b10a      	cbz	r2, 8007ffe <_vfiprintf_r+0xa2>
 8007ffa:	2a25      	cmp	r2, #37	; 0x25
 8007ffc:	d1f9      	bne.n	8007ff2 <_vfiprintf_r+0x96>
 8007ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8008002:	d00b      	beq.n	800801c <_vfiprintf_r+0xc0>
 8008004:	465b      	mov	r3, fp
 8008006:	4622      	mov	r2, r4
 8008008:	4629      	mov	r1, r5
 800800a:	4630      	mov	r0, r6
 800800c:	f7ff ff93 	bl	8007f36 <__sfputs_r>
 8008010:	3001      	adds	r0, #1
 8008012:	f000 80aa 	beq.w	800816a <_vfiprintf_r+0x20e>
 8008016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008018:	445a      	add	r2, fp
 800801a:	9209      	str	r2, [sp, #36]	; 0x24
 800801c:	f89a 3000 	ldrb.w	r3, [sl]
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 80a2 	beq.w	800816a <_vfiprintf_r+0x20e>
 8008026:	2300      	movs	r3, #0
 8008028:	f04f 32ff 	mov.w	r2, #4294967295
 800802c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008030:	f10a 0a01 	add.w	sl, sl, #1
 8008034:	9304      	str	r3, [sp, #16]
 8008036:	9307      	str	r3, [sp, #28]
 8008038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800803c:	931a      	str	r3, [sp, #104]	; 0x68
 800803e:	4654      	mov	r4, sl
 8008040:	2205      	movs	r2, #5
 8008042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008046:	4858      	ldr	r0, [pc, #352]	; (80081a8 <_vfiprintf_r+0x24c>)
 8008048:	f7f8 f8ca 	bl	80001e0 <memchr>
 800804c:	9a04      	ldr	r2, [sp, #16]
 800804e:	b9d8      	cbnz	r0, 8008088 <_vfiprintf_r+0x12c>
 8008050:	06d1      	lsls	r1, r2, #27
 8008052:	bf44      	itt	mi
 8008054:	2320      	movmi	r3, #32
 8008056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800805a:	0713      	lsls	r3, r2, #28
 800805c:	bf44      	itt	mi
 800805e:	232b      	movmi	r3, #43	; 0x2b
 8008060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008064:	f89a 3000 	ldrb.w	r3, [sl]
 8008068:	2b2a      	cmp	r3, #42	; 0x2a
 800806a:	d015      	beq.n	8008098 <_vfiprintf_r+0x13c>
 800806c:	9a07      	ldr	r2, [sp, #28]
 800806e:	4654      	mov	r4, sl
 8008070:	2000      	movs	r0, #0
 8008072:	f04f 0c0a 	mov.w	ip, #10
 8008076:	4621      	mov	r1, r4
 8008078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800807c:	3b30      	subs	r3, #48	; 0x30
 800807e:	2b09      	cmp	r3, #9
 8008080:	d94e      	bls.n	8008120 <_vfiprintf_r+0x1c4>
 8008082:	b1b0      	cbz	r0, 80080b2 <_vfiprintf_r+0x156>
 8008084:	9207      	str	r2, [sp, #28]
 8008086:	e014      	b.n	80080b2 <_vfiprintf_r+0x156>
 8008088:	eba0 0308 	sub.w	r3, r0, r8
 800808c:	fa09 f303 	lsl.w	r3, r9, r3
 8008090:	4313      	orrs	r3, r2
 8008092:	9304      	str	r3, [sp, #16]
 8008094:	46a2      	mov	sl, r4
 8008096:	e7d2      	b.n	800803e <_vfiprintf_r+0xe2>
 8008098:	9b03      	ldr	r3, [sp, #12]
 800809a:	1d19      	adds	r1, r3, #4
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	9103      	str	r1, [sp, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	bfbb      	ittet	lt
 80080a4:	425b      	neglt	r3, r3
 80080a6:	f042 0202 	orrlt.w	r2, r2, #2
 80080aa:	9307      	strge	r3, [sp, #28]
 80080ac:	9307      	strlt	r3, [sp, #28]
 80080ae:	bfb8      	it	lt
 80080b0:	9204      	strlt	r2, [sp, #16]
 80080b2:	7823      	ldrb	r3, [r4, #0]
 80080b4:	2b2e      	cmp	r3, #46	; 0x2e
 80080b6:	d10c      	bne.n	80080d2 <_vfiprintf_r+0x176>
 80080b8:	7863      	ldrb	r3, [r4, #1]
 80080ba:	2b2a      	cmp	r3, #42	; 0x2a
 80080bc:	d135      	bne.n	800812a <_vfiprintf_r+0x1ce>
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	1d1a      	adds	r2, r3, #4
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	9203      	str	r2, [sp, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	bfb8      	it	lt
 80080ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80080ce:	3402      	adds	r4, #2
 80080d0:	9305      	str	r3, [sp, #20]
 80080d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081b8 <_vfiprintf_r+0x25c>
 80080d6:	7821      	ldrb	r1, [r4, #0]
 80080d8:	2203      	movs	r2, #3
 80080da:	4650      	mov	r0, sl
 80080dc:	f7f8 f880 	bl	80001e0 <memchr>
 80080e0:	b140      	cbz	r0, 80080f4 <_vfiprintf_r+0x198>
 80080e2:	2340      	movs	r3, #64	; 0x40
 80080e4:	eba0 000a 	sub.w	r0, r0, sl
 80080e8:	fa03 f000 	lsl.w	r0, r3, r0
 80080ec:	9b04      	ldr	r3, [sp, #16]
 80080ee:	4303      	orrs	r3, r0
 80080f0:	3401      	adds	r4, #1
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f8:	482c      	ldr	r0, [pc, #176]	; (80081ac <_vfiprintf_r+0x250>)
 80080fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080fe:	2206      	movs	r2, #6
 8008100:	f7f8 f86e 	bl	80001e0 <memchr>
 8008104:	2800      	cmp	r0, #0
 8008106:	d03f      	beq.n	8008188 <_vfiprintf_r+0x22c>
 8008108:	4b29      	ldr	r3, [pc, #164]	; (80081b0 <_vfiprintf_r+0x254>)
 800810a:	bb1b      	cbnz	r3, 8008154 <_vfiprintf_r+0x1f8>
 800810c:	9b03      	ldr	r3, [sp, #12]
 800810e:	3307      	adds	r3, #7
 8008110:	f023 0307 	bic.w	r3, r3, #7
 8008114:	3308      	adds	r3, #8
 8008116:	9303      	str	r3, [sp, #12]
 8008118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811a:	443b      	add	r3, r7
 800811c:	9309      	str	r3, [sp, #36]	; 0x24
 800811e:	e767      	b.n	8007ff0 <_vfiprintf_r+0x94>
 8008120:	fb0c 3202 	mla	r2, ip, r2, r3
 8008124:	460c      	mov	r4, r1
 8008126:	2001      	movs	r0, #1
 8008128:	e7a5      	b.n	8008076 <_vfiprintf_r+0x11a>
 800812a:	2300      	movs	r3, #0
 800812c:	3401      	adds	r4, #1
 800812e:	9305      	str	r3, [sp, #20]
 8008130:	4619      	mov	r1, r3
 8008132:	f04f 0c0a 	mov.w	ip, #10
 8008136:	4620      	mov	r0, r4
 8008138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800813c:	3a30      	subs	r2, #48	; 0x30
 800813e:	2a09      	cmp	r2, #9
 8008140:	d903      	bls.n	800814a <_vfiprintf_r+0x1ee>
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0c5      	beq.n	80080d2 <_vfiprintf_r+0x176>
 8008146:	9105      	str	r1, [sp, #20]
 8008148:	e7c3      	b.n	80080d2 <_vfiprintf_r+0x176>
 800814a:	fb0c 2101 	mla	r1, ip, r1, r2
 800814e:	4604      	mov	r4, r0
 8008150:	2301      	movs	r3, #1
 8008152:	e7f0      	b.n	8008136 <_vfiprintf_r+0x1da>
 8008154:	ab03      	add	r3, sp, #12
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	462a      	mov	r2, r5
 800815a:	4b16      	ldr	r3, [pc, #88]	; (80081b4 <_vfiprintf_r+0x258>)
 800815c:	a904      	add	r1, sp, #16
 800815e:	4630      	mov	r0, r6
 8008160:	f7fd fb1c 	bl	800579c <_printf_float>
 8008164:	4607      	mov	r7, r0
 8008166:	1c78      	adds	r0, r7, #1
 8008168:	d1d6      	bne.n	8008118 <_vfiprintf_r+0x1bc>
 800816a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800816c:	07d9      	lsls	r1, r3, #31
 800816e:	d405      	bmi.n	800817c <_vfiprintf_r+0x220>
 8008170:	89ab      	ldrh	r3, [r5, #12]
 8008172:	059a      	lsls	r2, r3, #22
 8008174:	d402      	bmi.n	800817c <_vfiprintf_r+0x220>
 8008176:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008178:	f7ff f882 	bl	8007280 <__retarget_lock_release_recursive>
 800817c:	89ab      	ldrh	r3, [r5, #12]
 800817e:	065b      	lsls	r3, r3, #25
 8008180:	f53f af12 	bmi.w	8007fa8 <_vfiprintf_r+0x4c>
 8008184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008186:	e711      	b.n	8007fac <_vfiprintf_r+0x50>
 8008188:	ab03      	add	r3, sp, #12
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	462a      	mov	r2, r5
 800818e:	4b09      	ldr	r3, [pc, #36]	; (80081b4 <_vfiprintf_r+0x258>)
 8008190:	a904      	add	r1, sp, #16
 8008192:	4630      	mov	r0, r6
 8008194:	f7fd fda6 	bl	8005ce4 <_printf_i>
 8008198:	e7e4      	b.n	8008164 <_vfiprintf_r+0x208>
 800819a:	bf00      	nop
 800819c:	0800b9e8 	.word	0x0800b9e8
 80081a0:	0800ba08 	.word	0x0800ba08
 80081a4:	0800b9c8 	.word	0x0800b9c8
 80081a8:	0800bb84 	.word	0x0800bb84
 80081ac:	0800bb8e 	.word	0x0800bb8e
 80081b0:	0800579d 	.word	0x0800579d
 80081b4:	08007f37 	.word	0x08007f37
 80081b8:	0800bb8a 	.word	0x0800bb8a

080081bc <_sbrk_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4d06      	ldr	r5, [pc, #24]	; (80081d8 <_sbrk_r+0x1c>)
 80081c0:	2300      	movs	r3, #0
 80081c2:	4604      	mov	r4, r0
 80081c4:	4608      	mov	r0, r1
 80081c6:	602b      	str	r3, [r5, #0]
 80081c8:	f7f9 fcc8 	bl	8001b5c <_sbrk>
 80081cc:	1c43      	adds	r3, r0, #1
 80081ce:	d102      	bne.n	80081d6 <_sbrk_r+0x1a>
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	b103      	cbz	r3, 80081d6 <_sbrk_r+0x1a>
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	200008c8 	.word	0x200008c8

080081dc <__sread>:
 80081dc:	b510      	push	{r4, lr}
 80081de:	460c      	mov	r4, r1
 80081e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e4:	f000 f92c 	bl	8008440 <_read_r>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	bfab      	itete	ge
 80081ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081ee:	89a3      	ldrhlt	r3, [r4, #12]
 80081f0:	181b      	addge	r3, r3, r0
 80081f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081f6:	bfac      	ite	ge
 80081f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80081fa:	81a3      	strhlt	r3, [r4, #12]
 80081fc:	bd10      	pop	{r4, pc}

080081fe <__swrite>:
 80081fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008202:	461f      	mov	r7, r3
 8008204:	898b      	ldrh	r3, [r1, #12]
 8008206:	05db      	lsls	r3, r3, #23
 8008208:	4605      	mov	r5, r0
 800820a:	460c      	mov	r4, r1
 800820c:	4616      	mov	r6, r2
 800820e:	d505      	bpl.n	800821c <__swrite+0x1e>
 8008210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008214:	2302      	movs	r3, #2
 8008216:	2200      	movs	r2, #0
 8008218:	f000 f898 	bl	800834c <_lseek_r>
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008226:	81a3      	strh	r3, [r4, #12]
 8008228:	4632      	mov	r2, r6
 800822a:	463b      	mov	r3, r7
 800822c:	4628      	mov	r0, r5
 800822e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008232:	f000 b817 	b.w	8008264 <_write_r>

08008236 <__sseek>:
 8008236:	b510      	push	{r4, lr}
 8008238:	460c      	mov	r4, r1
 800823a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800823e:	f000 f885 	bl	800834c <_lseek_r>
 8008242:	1c43      	adds	r3, r0, #1
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	bf15      	itete	ne
 8008248:	6560      	strne	r0, [r4, #84]	; 0x54
 800824a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800824e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008252:	81a3      	strheq	r3, [r4, #12]
 8008254:	bf18      	it	ne
 8008256:	81a3      	strhne	r3, [r4, #12]
 8008258:	bd10      	pop	{r4, pc}

0800825a <__sclose>:
 800825a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800825e:	f000 b831 	b.w	80082c4 <_close_r>
	...

08008264 <_write_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4d07      	ldr	r5, [pc, #28]	; (8008284 <_write_r+0x20>)
 8008268:	4604      	mov	r4, r0
 800826a:	4608      	mov	r0, r1
 800826c:	4611      	mov	r1, r2
 800826e:	2200      	movs	r2, #0
 8008270:	602a      	str	r2, [r5, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	f7f9 fc21 	bl	8001aba <_write>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d102      	bne.n	8008282 <_write_r+0x1e>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	b103      	cbz	r3, 8008282 <_write_r+0x1e>
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	200008c8 	.word	0x200008c8

08008288 <__assert_func>:
 8008288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800828a:	4614      	mov	r4, r2
 800828c:	461a      	mov	r2, r3
 800828e:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <__assert_func+0x2c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4605      	mov	r5, r0
 8008294:	68d8      	ldr	r0, [r3, #12]
 8008296:	b14c      	cbz	r4, 80082ac <__assert_func+0x24>
 8008298:	4b07      	ldr	r3, [pc, #28]	; (80082b8 <__assert_func+0x30>)
 800829a:	9100      	str	r1, [sp, #0]
 800829c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082a0:	4906      	ldr	r1, [pc, #24]	; (80082bc <__assert_func+0x34>)
 80082a2:	462b      	mov	r3, r5
 80082a4:	f000 f81e 	bl	80082e4 <fiprintf>
 80082a8:	f000 f8e9 	bl	800847e <abort>
 80082ac:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <__assert_func+0x38>)
 80082ae:	461c      	mov	r4, r3
 80082b0:	e7f3      	b.n	800829a <__assert_func+0x12>
 80082b2:	bf00      	nop
 80082b4:	2000005c 	.word	0x2000005c
 80082b8:	0800bb95 	.word	0x0800bb95
 80082bc:	0800bba2 	.word	0x0800bba2
 80082c0:	0800bbd0 	.word	0x0800bbd0

080082c4 <_close_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4d06      	ldr	r5, [pc, #24]	; (80082e0 <_close_r+0x1c>)
 80082c8:	2300      	movs	r3, #0
 80082ca:	4604      	mov	r4, r0
 80082cc:	4608      	mov	r0, r1
 80082ce:	602b      	str	r3, [r5, #0]
 80082d0:	f7f9 fc0f 	bl	8001af2 <_close>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_close_r+0x1a>
 80082d8:	682b      	ldr	r3, [r5, #0]
 80082da:	b103      	cbz	r3, 80082de <_close_r+0x1a>
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	200008c8 	.word	0x200008c8

080082e4 <fiprintf>:
 80082e4:	b40e      	push	{r1, r2, r3}
 80082e6:	b503      	push	{r0, r1, lr}
 80082e8:	4601      	mov	r1, r0
 80082ea:	ab03      	add	r3, sp, #12
 80082ec:	4805      	ldr	r0, [pc, #20]	; (8008304 <fiprintf+0x20>)
 80082ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f2:	6800      	ldr	r0, [r0, #0]
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	f7ff fe31 	bl	8007f5c <_vfiprintf_r>
 80082fa:	b002      	add	sp, #8
 80082fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008300:	b003      	add	sp, #12
 8008302:	4770      	bx	lr
 8008304:	2000005c 	.word	0x2000005c

08008308 <_fstat_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d07      	ldr	r5, [pc, #28]	; (8008328 <_fstat_r+0x20>)
 800830c:	2300      	movs	r3, #0
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	4611      	mov	r1, r2
 8008314:	602b      	str	r3, [r5, #0]
 8008316:	f7f9 fbf8 	bl	8001b0a <_fstat>
 800831a:	1c43      	adds	r3, r0, #1
 800831c:	d102      	bne.n	8008324 <_fstat_r+0x1c>
 800831e:	682b      	ldr	r3, [r5, #0]
 8008320:	b103      	cbz	r3, 8008324 <_fstat_r+0x1c>
 8008322:	6023      	str	r3, [r4, #0]
 8008324:	bd38      	pop	{r3, r4, r5, pc}
 8008326:	bf00      	nop
 8008328:	200008c8 	.word	0x200008c8

0800832c <_isatty_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d06      	ldr	r5, [pc, #24]	; (8008348 <_isatty_r+0x1c>)
 8008330:	2300      	movs	r3, #0
 8008332:	4604      	mov	r4, r0
 8008334:	4608      	mov	r0, r1
 8008336:	602b      	str	r3, [r5, #0]
 8008338:	f7f9 fbf7 	bl	8001b2a <_isatty>
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	d102      	bne.n	8008346 <_isatty_r+0x1a>
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	b103      	cbz	r3, 8008346 <_isatty_r+0x1a>
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	200008c8 	.word	0x200008c8

0800834c <_lseek_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d07      	ldr	r5, [pc, #28]	; (800836c <_lseek_r+0x20>)
 8008350:	4604      	mov	r4, r0
 8008352:	4608      	mov	r0, r1
 8008354:	4611      	mov	r1, r2
 8008356:	2200      	movs	r2, #0
 8008358:	602a      	str	r2, [r5, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	f7f9 fbf0 	bl	8001b40 <_lseek>
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	d102      	bne.n	800836a <_lseek_r+0x1e>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	b103      	cbz	r3, 800836a <_lseek_r+0x1e>
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	200008c8 	.word	0x200008c8

08008370 <__ascii_mbtowc>:
 8008370:	b082      	sub	sp, #8
 8008372:	b901      	cbnz	r1, 8008376 <__ascii_mbtowc+0x6>
 8008374:	a901      	add	r1, sp, #4
 8008376:	b142      	cbz	r2, 800838a <__ascii_mbtowc+0x1a>
 8008378:	b14b      	cbz	r3, 800838e <__ascii_mbtowc+0x1e>
 800837a:	7813      	ldrb	r3, [r2, #0]
 800837c:	600b      	str	r3, [r1, #0]
 800837e:	7812      	ldrb	r2, [r2, #0]
 8008380:	1e10      	subs	r0, r2, #0
 8008382:	bf18      	it	ne
 8008384:	2001      	movne	r0, #1
 8008386:	b002      	add	sp, #8
 8008388:	4770      	bx	lr
 800838a:	4610      	mov	r0, r2
 800838c:	e7fb      	b.n	8008386 <__ascii_mbtowc+0x16>
 800838e:	f06f 0001 	mvn.w	r0, #1
 8008392:	e7f8      	b.n	8008386 <__ascii_mbtowc+0x16>

08008394 <memmove>:
 8008394:	4288      	cmp	r0, r1
 8008396:	b510      	push	{r4, lr}
 8008398:	eb01 0402 	add.w	r4, r1, r2
 800839c:	d902      	bls.n	80083a4 <memmove+0x10>
 800839e:	4284      	cmp	r4, r0
 80083a0:	4623      	mov	r3, r4
 80083a2:	d807      	bhi.n	80083b4 <memmove+0x20>
 80083a4:	1e43      	subs	r3, r0, #1
 80083a6:	42a1      	cmp	r1, r4
 80083a8:	d008      	beq.n	80083bc <memmove+0x28>
 80083aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083b2:	e7f8      	b.n	80083a6 <memmove+0x12>
 80083b4:	4402      	add	r2, r0
 80083b6:	4601      	mov	r1, r0
 80083b8:	428a      	cmp	r2, r1
 80083ba:	d100      	bne.n	80083be <memmove+0x2a>
 80083bc:	bd10      	pop	{r4, pc}
 80083be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083c6:	e7f7      	b.n	80083b8 <memmove+0x24>

080083c8 <__malloc_lock>:
 80083c8:	4801      	ldr	r0, [pc, #4]	; (80083d0 <__malloc_lock+0x8>)
 80083ca:	f7fe bf58 	b.w	800727e <__retarget_lock_acquire_recursive>
 80083ce:	bf00      	nop
 80083d0:	200008bc 	.word	0x200008bc

080083d4 <__malloc_unlock>:
 80083d4:	4801      	ldr	r0, [pc, #4]	; (80083dc <__malloc_unlock+0x8>)
 80083d6:	f7fe bf53 	b.w	8007280 <__retarget_lock_release_recursive>
 80083da:	bf00      	nop
 80083dc:	200008bc 	.word	0x200008bc

080083e0 <_realloc_r>:
 80083e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e4:	4680      	mov	r8, r0
 80083e6:	4614      	mov	r4, r2
 80083e8:	460e      	mov	r6, r1
 80083ea:	b921      	cbnz	r1, 80083f6 <_realloc_r+0x16>
 80083ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083f0:	4611      	mov	r1, r2
 80083f2:	f7ff bbb9 	b.w	8007b68 <_malloc_r>
 80083f6:	b92a      	cbnz	r2, 8008404 <_realloc_r+0x24>
 80083f8:	f7ff fb4a 	bl	8007a90 <_free_r>
 80083fc:	4625      	mov	r5, r4
 80083fe:	4628      	mov	r0, r5
 8008400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008404:	f000 f842 	bl	800848c <_malloc_usable_size_r>
 8008408:	4284      	cmp	r4, r0
 800840a:	4607      	mov	r7, r0
 800840c:	d802      	bhi.n	8008414 <_realloc_r+0x34>
 800840e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008412:	d812      	bhi.n	800843a <_realloc_r+0x5a>
 8008414:	4621      	mov	r1, r4
 8008416:	4640      	mov	r0, r8
 8008418:	f7ff fba6 	bl	8007b68 <_malloc_r>
 800841c:	4605      	mov	r5, r0
 800841e:	2800      	cmp	r0, #0
 8008420:	d0ed      	beq.n	80083fe <_realloc_r+0x1e>
 8008422:	42bc      	cmp	r4, r7
 8008424:	4622      	mov	r2, r4
 8008426:	4631      	mov	r1, r6
 8008428:	bf28      	it	cs
 800842a:	463a      	movcs	r2, r7
 800842c:	f7fd f900 	bl	8005630 <memcpy>
 8008430:	4631      	mov	r1, r6
 8008432:	4640      	mov	r0, r8
 8008434:	f7ff fb2c 	bl	8007a90 <_free_r>
 8008438:	e7e1      	b.n	80083fe <_realloc_r+0x1e>
 800843a:	4635      	mov	r5, r6
 800843c:	e7df      	b.n	80083fe <_realloc_r+0x1e>
	...

08008440 <_read_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4d07      	ldr	r5, [pc, #28]	; (8008460 <_read_r+0x20>)
 8008444:	4604      	mov	r4, r0
 8008446:	4608      	mov	r0, r1
 8008448:	4611      	mov	r1, r2
 800844a:	2200      	movs	r2, #0
 800844c:	602a      	str	r2, [r5, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	f7f9 fb16 	bl	8001a80 <_read>
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d102      	bne.n	800845e <_read_r+0x1e>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	b103      	cbz	r3, 800845e <_read_r+0x1e>
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	200008c8 	.word	0x200008c8

08008464 <__ascii_wctomb>:
 8008464:	b149      	cbz	r1, 800847a <__ascii_wctomb+0x16>
 8008466:	2aff      	cmp	r2, #255	; 0xff
 8008468:	bf85      	ittet	hi
 800846a:	238a      	movhi	r3, #138	; 0x8a
 800846c:	6003      	strhi	r3, [r0, #0]
 800846e:	700a      	strbls	r2, [r1, #0]
 8008470:	f04f 30ff 	movhi.w	r0, #4294967295
 8008474:	bf98      	it	ls
 8008476:	2001      	movls	r0, #1
 8008478:	4770      	bx	lr
 800847a:	4608      	mov	r0, r1
 800847c:	4770      	bx	lr

0800847e <abort>:
 800847e:	b508      	push	{r3, lr}
 8008480:	2006      	movs	r0, #6
 8008482:	f000 f833 	bl	80084ec <raise>
 8008486:	2001      	movs	r0, #1
 8008488:	f7f9 faf0 	bl	8001a6c <_exit>

0800848c <_malloc_usable_size_r>:
 800848c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008490:	1f18      	subs	r0, r3, #4
 8008492:	2b00      	cmp	r3, #0
 8008494:	bfbc      	itt	lt
 8008496:	580b      	ldrlt	r3, [r1, r0]
 8008498:	18c0      	addlt	r0, r0, r3
 800849a:	4770      	bx	lr

0800849c <_raise_r>:
 800849c:	291f      	cmp	r1, #31
 800849e:	b538      	push	{r3, r4, r5, lr}
 80084a0:	4604      	mov	r4, r0
 80084a2:	460d      	mov	r5, r1
 80084a4:	d904      	bls.n	80084b0 <_raise_r+0x14>
 80084a6:	2316      	movs	r3, #22
 80084a8:	6003      	str	r3, [r0, #0]
 80084aa:	f04f 30ff 	mov.w	r0, #4294967295
 80084ae:	bd38      	pop	{r3, r4, r5, pc}
 80084b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084b2:	b112      	cbz	r2, 80084ba <_raise_r+0x1e>
 80084b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084b8:	b94b      	cbnz	r3, 80084ce <_raise_r+0x32>
 80084ba:	4620      	mov	r0, r4
 80084bc:	f000 f830 	bl	8008520 <_getpid_r>
 80084c0:	462a      	mov	r2, r5
 80084c2:	4601      	mov	r1, r0
 80084c4:	4620      	mov	r0, r4
 80084c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084ca:	f000 b817 	b.w	80084fc <_kill_r>
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d00a      	beq.n	80084e8 <_raise_r+0x4c>
 80084d2:	1c59      	adds	r1, r3, #1
 80084d4:	d103      	bne.n	80084de <_raise_r+0x42>
 80084d6:	2316      	movs	r3, #22
 80084d8:	6003      	str	r3, [r0, #0]
 80084da:	2001      	movs	r0, #1
 80084dc:	e7e7      	b.n	80084ae <_raise_r+0x12>
 80084de:	2400      	movs	r4, #0
 80084e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084e4:	4628      	mov	r0, r5
 80084e6:	4798      	blx	r3
 80084e8:	2000      	movs	r0, #0
 80084ea:	e7e0      	b.n	80084ae <_raise_r+0x12>

080084ec <raise>:
 80084ec:	4b02      	ldr	r3, [pc, #8]	; (80084f8 <raise+0xc>)
 80084ee:	4601      	mov	r1, r0
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	f7ff bfd3 	b.w	800849c <_raise_r>
 80084f6:	bf00      	nop
 80084f8:	2000005c 	.word	0x2000005c

080084fc <_kill_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4d07      	ldr	r5, [pc, #28]	; (800851c <_kill_r+0x20>)
 8008500:	2300      	movs	r3, #0
 8008502:	4604      	mov	r4, r0
 8008504:	4608      	mov	r0, r1
 8008506:	4611      	mov	r1, r2
 8008508:	602b      	str	r3, [r5, #0]
 800850a:	f7f9 fa9f 	bl	8001a4c <_kill>
 800850e:	1c43      	adds	r3, r0, #1
 8008510:	d102      	bne.n	8008518 <_kill_r+0x1c>
 8008512:	682b      	ldr	r3, [r5, #0]
 8008514:	b103      	cbz	r3, 8008518 <_kill_r+0x1c>
 8008516:	6023      	str	r3, [r4, #0]
 8008518:	bd38      	pop	{r3, r4, r5, pc}
 800851a:	bf00      	nop
 800851c:	200008c8 	.word	0x200008c8

08008520 <_getpid_r>:
 8008520:	f7f9 ba8c 	b.w	8001a3c <_getpid>
 8008524:	0000      	movs	r0, r0
	...

08008528 <cos>:
 8008528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800852a:	ec53 2b10 	vmov	r2, r3, d0
 800852e:	4826      	ldr	r0, [pc, #152]	; (80085c8 <cos+0xa0>)
 8008530:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008534:	4281      	cmp	r1, r0
 8008536:	dc06      	bgt.n	8008546 <cos+0x1e>
 8008538:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80085c0 <cos+0x98>
 800853c:	b005      	add	sp, #20
 800853e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008542:	f001 b8a5 	b.w	8009690 <__kernel_cos>
 8008546:	4821      	ldr	r0, [pc, #132]	; (80085cc <cos+0xa4>)
 8008548:	4281      	cmp	r1, r0
 800854a:	dd09      	ble.n	8008560 <cos+0x38>
 800854c:	ee10 0a10 	vmov	r0, s0
 8008550:	4619      	mov	r1, r3
 8008552:	f7f7 fe99 	bl	8000288 <__aeabi_dsub>
 8008556:	ec41 0b10 	vmov	d0, r0, r1
 800855a:	b005      	add	sp, #20
 800855c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008560:	4668      	mov	r0, sp
 8008562:	f000 fdd5 	bl	8009110 <__ieee754_rem_pio2>
 8008566:	f000 0003 	and.w	r0, r0, #3
 800856a:	2801      	cmp	r0, #1
 800856c:	d00b      	beq.n	8008586 <cos+0x5e>
 800856e:	2802      	cmp	r0, #2
 8008570:	d016      	beq.n	80085a0 <cos+0x78>
 8008572:	b9e0      	cbnz	r0, 80085ae <cos+0x86>
 8008574:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008578:	ed9d 0b00 	vldr	d0, [sp]
 800857c:	f001 f888 	bl	8009690 <__kernel_cos>
 8008580:	ec51 0b10 	vmov	r0, r1, d0
 8008584:	e7e7      	b.n	8008556 <cos+0x2e>
 8008586:	ed9d 1b02 	vldr	d1, [sp, #8]
 800858a:	ed9d 0b00 	vldr	d0, [sp]
 800858e:	f001 fc97 	bl	8009ec0 <__kernel_sin>
 8008592:	ec53 2b10 	vmov	r2, r3, d0
 8008596:	ee10 0a10 	vmov	r0, s0
 800859a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800859e:	e7da      	b.n	8008556 <cos+0x2e>
 80085a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085a4:	ed9d 0b00 	vldr	d0, [sp]
 80085a8:	f001 f872 	bl	8009690 <__kernel_cos>
 80085ac:	e7f1      	b.n	8008592 <cos+0x6a>
 80085ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085b2:	ed9d 0b00 	vldr	d0, [sp]
 80085b6:	2001      	movs	r0, #1
 80085b8:	f001 fc82 	bl	8009ec0 <__kernel_sin>
 80085bc:	e7e0      	b.n	8008580 <cos+0x58>
 80085be:	bf00      	nop
	...
 80085c8:	3fe921fb 	.word	0x3fe921fb
 80085cc:	7fefffff 	.word	0x7fefffff

080085d0 <pow>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	ed2d 8b02 	vpush	{d8}
 80085d6:	eeb0 8a40 	vmov.f32	s16, s0
 80085da:	eef0 8a60 	vmov.f32	s17, s1
 80085de:	ec55 4b11 	vmov	r4, r5, d1
 80085e2:	f000 f865 	bl	80086b0 <__ieee754_pow>
 80085e6:	4622      	mov	r2, r4
 80085e8:	462b      	mov	r3, r5
 80085ea:	4620      	mov	r0, r4
 80085ec:	4629      	mov	r1, r5
 80085ee:	ec57 6b10 	vmov	r6, r7, d0
 80085f2:	f7f8 fa9b 	bl	8000b2c <__aeabi_dcmpun>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d13b      	bne.n	8008672 <pow+0xa2>
 80085fa:	ec51 0b18 	vmov	r0, r1, d8
 80085fe:	2200      	movs	r2, #0
 8008600:	2300      	movs	r3, #0
 8008602:	f7f8 fa61 	bl	8000ac8 <__aeabi_dcmpeq>
 8008606:	b1b8      	cbz	r0, 8008638 <pow+0x68>
 8008608:	2200      	movs	r2, #0
 800860a:	2300      	movs	r3, #0
 800860c:	4620      	mov	r0, r4
 800860e:	4629      	mov	r1, r5
 8008610:	f7f8 fa5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008614:	2800      	cmp	r0, #0
 8008616:	d146      	bne.n	80086a6 <pow+0xd6>
 8008618:	ec45 4b10 	vmov	d0, r4, r5
 800861c:	f001 fd47 	bl	800a0ae <finite>
 8008620:	b338      	cbz	r0, 8008672 <pow+0xa2>
 8008622:	2200      	movs	r2, #0
 8008624:	2300      	movs	r3, #0
 8008626:	4620      	mov	r0, r4
 8008628:	4629      	mov	r1, r5
 800862a:	f7f8 fa57 	bl	8000adc <__aeabi_dcmplt>
 800862e:	b300      	cbz	r0, 8008672 <pow+0xa2>
 8008630:	f7fc ffd4 	bl	80055dc <__errno>
 8008634:	2322      	movs	r3, #34	; 0x22
 8008636:	e01b      	b.n	8008670 <pow+0xa0>
 8008638:	ec47 6b10 	vmov	d0, r6, r7
 800863c:	f001 fd37 	bl	800a0ae <finite>
 8008640:	b9e0      	cbnz	r0, 800867c <pow+0xac>
 8008642:	eeb0 0a48 	vmov.f32	s0, s16
 8008646:	eef0 0a68 	vmov.f32	s1, s17
 800864a:	f001 fd30 	bl	800a0ae <finite>
 800864e:	b1a8      	cbz	r0, 800867c <pow+0xac>
 8008650:	ec45 4b10 	vmov	d0, r4, r5
 8008654:	f001 fd2b 	bl	800a0ae <finite>
 8008658:	b180      	cbz	r0, 800867c <pow+0xac>
 800865a:	4632      	mov	r2, r6
 800865c:	463b      	mov	r3, r7
 800865e:	4630      	mov	r0, r6
 8008660:	4639      	mov	r1, r7
 8008662:	f7f8 fa63 	bl	8000b2c <__aeabi_dcmpun>
 8008666:	2800      	cmp	r0, #0
 8008668:	d0e2      	beq.n	8008630 <pow+0x60>
 800866a:	f7fc ffb7 	bl	80055dc <__errno>
 800866e:	2321      	movs	r3, #33	; 0x21
 8008670:	6003      	str	r3, [r0, #0]
 8008672:	ecbd 8b02 	vpop	{d8}
 8008676:	ec47 6b10 	vmov	d0, r6, r7
 800867a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800867c:	2200      	movs	r2, #0
 800867e:	2300      	movs	r3, #0
 8008680:	4630      	mov	r0, r6
 8008682:	4639      	mov	r1, r7
 8008684:	f7f8 fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 8008688:	2800      	cmp	r0, #0
 800868a:	d0f2      	beq.n	8008672 <pow+0xa2>
 800868c:	eeb0 0a48 	vmov.f32	s0, s16
 8008690:	eef0 0a68 	vmov.f32	s1, s17
 8008694:	f001 fd0b 	bl	800a0ae <finite>
 8008698:	2800      	cmp	r0, #0
 800869a:	d0ea      	beq.n	8008672 <pow+0xa2>
 800869c:	ec45 4b10 	vmov	d0, r4, r5
 80086a0:	f001 fd05 	bl	800a0ae <finite>
 80086a4:	e7c3      	b.n	800862e <pow+0x5e>
 80086a6:	4f01      	ldr	r7, [pc, #4]	; (80086ac <pow+0xdc>)
 80086a8:	2600      	movs	r6, #0
 80086aa:	e7e2      	b.n	8008672 <pow+0xa2>
 80086ac:	3ff00000 	.word	0x3ff00000

080086b0 <__ieee754_pow>:
 80086b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b4:	ed2d 8b06 	vpush	{d8-d10}
 80086b8:	b089      	sub	sp, #36	; 0x24
 80086ba:	ed8d 1b00 	vstr	d1, [sp]
 80086be:	e9dd 2900 	ldrd	r2, r9, [sp]
 80086c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80086c6:	ea58 0102 	orrs.w	r1, r8, r2
 80086ca:	ec57 6b10 	vmov	r6, r7, d0
 80086ce:	d115      	bne.n	80086fc <__ieee754_pow+0x4c>
 80086d0:	19b3      	adds	r3, r6, r6
 80086d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80086d6:	4152      	adcs	r2, r2
 80086d8:	4299      	cmp	r1, r3
 80086da:	4b89      	ldr	r3, [pc, #548]	; (8008900 <__ieee754_pow+0x250>)
 80086dc:	4193      	sbcs	r3, r2
 80086de:	f080 84d2 	bcs.w	8009086 <__ieee754_pow+0x9d6>
 80086e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086e6:	4630      	mov	r0, r6
 80086e8:	4639      	mov	r1, r7
 80086ea:	f7f7 fdcf 	bl	800028c <__adddf3>
 80086ee:	ec41 0b10 	vmov	d0, r0, r1
 80086f2:	b009      	add	sp, #36	; 0x24
 80086f4:	ecbd 8b06 	vpop	{d8-d10}
 80086f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fc:	4b81      	ldr	r3, [pc, #516]	; (8008904 <__ieee754_pow+0x254>)
 80086fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008702:	429c      	cmp	r4, r3
 8008704:	ee10 aa10 	vmov	sl, s0
 8008708:	463d      	mov	r5, r7
 800870a:	dc06      	bgt.n	800871a <__ieee754_pow+0x6a>
 800870c:	d101      	bne.n	8008712 <__ieee754_pow+0x62>
 800870e:	2e00      	cmp	r6, #0
 8008710:	d1e7      	bne.n	80086e2 <__ieee754_pow+0x32>
 8008712:	4598      	cmp	r8, r3
 8008714:	dc01      	bgt.n	800871a <__ieee754_pow+0x6a>
 8008716:	d10f      	bne.n	8008738 <__ieee754_pow+0x88>
 8008718:	b172      	cbz	r2, 8008738 <__ieee754_pow+0x88>
 800871a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800871e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008722:	ea55 050a 	orrs.w	r5, r5, sl
 8008726:	d1dc      	bne.n	80086e2 <__ieee754_pow+0x32>
 8008728:	e9dd 3200 	ldrd	r3, r2, [sp]
 800872c:	18db      	adds	r3, r3, r3
 800872e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008732:	4152      	adcs	r2, r2
 8008734:	429d      	cmp	r5, r3
 8008736:	e7d0      	b.n	80086da <__ieee754_pow+0x2a>
 8008738:	2d00      	cmp	r5, #0
 800873a:	da3b      	bge.n	80087b4 <__ieee754_pow+0x104>
 800873c:	4b72      	ldr	r3, [pc, #456]	; (8008908 <__ieee754_pow+0x258>)
 800873e:	4598      	cmp	r8, r3
 8008740:	dc51      	bgt.n	80087e6 <__ieee754_pow+0x136>
 8008742:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008746:	4598      	cmp	r8, r3
 8008748:	f340 84ac 	ble.w	80090a4 <__ieee754_pow+0x9f4>
 800874c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008750:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008754:	2b14      	cmp	r3, #20
 8008756:	dd0f      	ble.n	8008778 <__ieee754_pow+0xc8>
 8008758:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800875c:	fa22 f103 	lsr.w	r1, r2, r3
 8008760:	fa01 f303 	lsl.w	r3, r1, r3
 8008764:	4293      	cmp	r3, r2
 8008766:	f040 849d 	bne.w	80090a4 <__ieee754_pow+0x9f4>
 800876a:	f001 0101 	and.w	r1, r1, #1
 800876e:	f1c1 0302 	rsb	r3, r1, #2
 8008772:	9304      	str	r3, [sp, #16]
 8008774:	b182      	cbz	r2, 8008798 <__ieee754_pow+0xe8>
 8008776:	e05f      	b.n	8008838 <__ieee754_pow+0x188>
 8008778:	2a00      	cmp	r2, #0
 800877a:	d15b      	bne.n	8008834 <__ieee754_pow+0x184>
 800877c:	f1c3 0314 	rsb	r3, r3, #20
 8008780:	fa48 f103 	asr.w	r1, r8, r3
 8008784:	fa01 f303 	lsl.w	r3, r1, r3
 8008788:	4543      	cmp	r3, r8
 800878a:	f040 8488 	bne.w	800909e <__ieee754_pow+0x9ee>
 800878e:	f001 0101 	and.w	r1, r1, #1
 8008792:	f1c1 0302 	rsb	r3, r1, #2
 8008796:	9304      	str	r3, [sp, #16]
 8008798:	4b5c      	ldr	r3, [pc, #368]	; (800890c <__ieee754_pow+0x25c>)
 800879a:	4598      	cmp	r8, r3
 800879c:	d132      	bne.n	8008804 <__ieee754_pow+0x154>
 800879e:	f1b9 0f00 	cmp.w	r9, #0
 80087a2:	f280 8478 	bge.w	8009096 <__ieee754_pow+0x9e6>
 80087a6:	4959      	ldr	r1, [pc, #356]	; (800890c <__ieee754_pow+0x25c>)
 80087a8:	4632      	mov	r2, r6
 80087aa:	463b      	mov	r3, r7
 80087ac:	2000      	movs	r0, #0
 80087ae:	f7f8 f84d 	bl	800084c <__aeabi_ddiv>
 80087b2:	e79c      	b.n	80086ee <__ieee754_pow+0x3e>
 80087b4:	2300      	movs	r3, #0
 80087b6:	9304      	str	r3, [sp, #16]
 80087b8:	2a00      	cmp	r2, #0
 80087ba:	d13d      	bne.n	8008838 <__ieee754_pow+0x188>
 80087bc:	4b51      	ldr	r3, [pc, #324]	; (8008904 <__ieee754_pow+0x254>)
 80087be:	4598      	cmp	r8, r3
 80087c0:	d1ea      	bne.n	8008798 <__ieee754_pow+0xe8>
 80087c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80087c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80087ca:	ea53 030a 	orrs.w	r3, r3, sl
 80087ce:	f000 845a 	beq.w	8009086 <__ieee754_pow+0x9d6>
 80087d2:	4b4f      	ldr	r3, [pc, #316]	; (8008910 <__ieee754_pow+0x260>)
 80087d4:	429c      	cmp	r4, r3
 80087d6:	dd08      	ble.n	80087ea <__ieee754_pow+0x13a>
 80087d8:	f1b9 0f00 	cmp.w	r9, #0
 80087dc:	f2c0 8457 	blt.w	800908e <__ieee754_pow+0x9de>
 80087e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087e4:	e783      	b.n	80086ee <__ieee754_pow+0x3e>
 80087e6:	2302      	movs	r3, #2
 80087e8:	e7e5      	b.n	80087b6 <__ieee754_pow+0x106>
 80087ea:	f1b9 0f00 	cmp.w	r9, #0
 80087ee:	f04f 0000 	mov.w	r0, #0
 80087f2:	f04f 0100 	mov.w	r1, #0
 80087f6:	f6bf af7a 	bge.w	80086ee <__ieee754_pow+0x3e>
 80087fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80087fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008802:	e774      	b.n	80086ee <__ieee754_pow+0x3e>
 8008804:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008808:	d106      	bne.n	8008818 <__ieee754_pow+0x168>
 800880a:	4632      	mov	r2, r6
 800880c:	463b      	mov	r3, r7
 800880e:	4630      	mov	r0, r6
 8008810:	4639      	mov	r1, r7
 8008812:	f7f7 fef1 	bl	80005f8 <__aeabi_dmul>
 8008816:	e76a      	b.n	80086ee <__ieee754_pow+0x3e>
 8008818:	4b3e      	ldr	r3, [pc, #248]	; (8008914 <__ieee754_pow+0x264>)
 800881a:	4599      	cmp	r9, r3
 800881c:	d10c      	bne.n	8008838 <__ieee754_pow+0x188>
 800881e:	2d00      	cmp	r5, #0
 8008820:	db0a      	blt.n	8008838 <__ieee754_pow+0x188>
 8008822:	ec47 6b10 	vmov	d0, r6, r7
 8008826:	b009      	add	sp, #36	; 0x24
 8008828:	ecbd 8b06 	vpop	{d8-d10}
 800882c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	f000 be7a 	b.w	8009528 <__ieee754_sqrt>
 8008834:	2300      	movs	r3, #0
 8008836:	9304      	str	r3, [sp, #16]
 8008838:	ec47 6b10 	vmov	d0, r6, r7
 800883c:	f001 fc2e 	bl	800a09c <fabs>
 8008840:	ec51 0b10 	vmov	r0, r1, d0
 8008844:	f1ba 0f00 	cmp.w	sl, #0
 8008848:	d129      	bne.n	800889e <__ieee754_pow+0x1ee>
 800884a:	b124      	cbz	r4, 8008856 <__ieee754_pow+0x1a6>
 800884c:	4b2f      	ldr	r3, [pc, #188]	; (800890c <__ieee754_pow+0x25c>)
 800884e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008852:	429a      	cmp	r2, r3
 8008854:	d123      	bne.n	800889e <__ieee754_pow+0x1ee>
 8008856:	f1b9 0f00 	cmp.w	r9, #0
 800885a:	da05      	bge.n	8008868 <__ieee754_pow+0x1b8>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	2000      	movs	r0, #0
 8008862:	492a      	ldr	r1, [pc, #168]	; (800890c <__ieee754_pow+0x25c>)
 8008864:	f7f7 fff2 	bl	800084c <__aeabi_ddiv>
 8008868:	2d00      	cmp	r5, #0
 800886a:	f6bf af40 	bge.w	80086ee <__ieee754_pow+0x3e>
 800886e:	9b04      	ldr	r3, [sp, #16]
 8008870:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008874:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008878:	4323      	orrs	r3, r4
 800887a:	d108      	bne.n	800888e <__ieee754_pow+0x1de>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4610      	mov	r0, r2
 8008882:	4619      	mov	r1, r3
 8008884:	f7f7 fd00 	bl	8000288 <__aeabi_dsub>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	e78f      	b.n	80087ae <__ieee754_pow+0xfe>
 800888e:	9b04      	ldr	r3, [sp, #16]
 8008890:	2b01      	cmp	r3, #1
 8008892:	f47f af2c 	bne.w	80086ee <__ieee754_pow+0x3e>
 8008896:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800889a:	4619      	mov	r1, r3
 800889c:	e727      	b.n	80086ee <__ieee754_pow+0x3e>
 800889e:	0feb      	lsrs	r3, r5, #31
 80088a0:	3b01      	subs	r3, #1
 80088a2:	9306      	str	r3, [sp, #24]
 80088a4:	9a06      	ldr	r2, [sp, #24]
 80088a6:	9b04      	ldr	r3, [sp, #16]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	d102      	bne.n	80088b2 <__ieee754_pow+0x202>
 80088ac:	4632      	mov	r2, r6
 80088ae:	463b      	mov	r3, r7
 80088b0:	e7e6      	b.n	8008880 <__ieee754_pow+0x1d0>
 80088b2:	4b19      	ldr	r3, [pc, #100]	; (8008918 <__ieee754_pow+0x268>)
 80088b4:	4598      	cmp	r8, r3
 80088b6:	f340 80fb 	ble.w	8008ab0 <__ieee754_pow+0x400>
 80088ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80088be:	4598      	cmp	r8, r3
 80088c0:	4b13      	ldr	r3, [pc, #76]	; (8008910 <__ieee754_pow+0x260>)
 80088c2:	dd0c      	ble.n	80088de <__ieee754_pow+0x22e>
 80088c4:	429c      	cmp	r4, r3
 80088c6:	dc0f      	bgt.n	80088e8 <__ieee754_pow+0x238>
 80088c8:	f1b9 0f00 	cmp.w	r9, #0
 80088cc:	da0f      	bge.n	80088ee <__ieee754_pow+0x23e>
 80088ce:	2000      	movs	r0, #0
 80088d0:	b009      	add	sp, #36	; 0x24
 80088d2:	ecbd 8b06 	vpop	{d8-d10}
 80088d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088da:	f001 bbd6 	b.w	800a08a <__math_oflow>
 80088de:	429c      	cmp	r4, r3
 80088e0:	dbf2      	blt.n	80088c8 <__ieee754_pow+0x218>
 80088e2:	4b0a      	ldr	r3, [pc, #40]	; (800890c <__ieee754_pow+0x25c>)
 80088e4:	429c      	cmp	r4, r3
 80088e6:	dd19      	ble.n	800891c <__ieee754_pow+0x26c>
 80088e8:	f1b9 0f00 	cmp.w	r9, #0
 80088ec:	dcef      	bgt.n	80088ce <__ieee754_pow+0x21e>
 80088ee:	2000      	movs	r0, #0
 80088f0:	b009      	add	sp, #36	; 0x24
 80088f2:	ecbd 8b06 	vpop	{d8-d10}
 80088f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fa:	f001 bbbd 	b.w	800a078 <__math_uflow>
 80088fe:	bf00      	nop
 8008900:	fff00000 	.word	0xfff00000
 8008904:	7ff00000 	.word	0x7ff00000
 8008908:	433fffff 	.word	0x433fffff
 800890c:	3ff00000 	.word	0x3ff00000
 8008910:	3fefffff 	.word	0x3fefffff
 8008914:	3fe00000 	.word	0x3fe00000
 8008918:	41e00000 	.word	0x41e00000
 800891c:	4b60      	ldr	r3, [pc, #384]	; (8008aa0 <__ieee754_pow+0x3f0>)
 800891e:	2200      	movs	r2, #0
 8008920:	f7f7 fcb2 	bl	8000288 <__aeabi_dsub>
 8008924:	a354      	add	r3, pc, #336	; (adr r3, 8008a78 <__ieee754_pow+0x3c8>)
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	4604      	mov	r4, r0
 800892c:	460d      	mov	r5, r1
 800892e:	f7f7 fe63 	bl	80005f8 <__aeabi_dmul>
 8008932:	a353      	add	r3, pc, #332	; (adr r3, 8008a80 <__ieee754_pow+0x3d0>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	4606      	mov	r6, r0
 800893a:	460f      	mov	r7, r1
 800893c:	4620      	mov	r0, r4
 800893e:	4629      	mov	r1, r5
 8008940:	f7f7 fe5a 	bl	80005f8 <__aeabi_dmul>
 8008944:	4b57      	ldr	r3, [pc, #348]	; (8008aa4 <__ieee754_pow+0x3f4>)
 8008946:	4682      	mov	sl, r0
 8008948:	468b      	mov	fp, r1
 800894a:	2200      	movs	r2, #0
 800894c:	4620      	mov	r0, r4
 800894e:	4629      	mov	r1, r5
 8008950:	f7f7 fe52 	bl	80005f8 <__aeabi_dmul>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	a14b      	add	r1, pc, #300	; (adr r1, 8008a88 <__ieee754_pow+0x3d8>)
 800895a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800895e:	f7f7 fc93 	bl	8000288 <__aeabi_dsub>
 8008962:	4622      	mov	r2, r4
 8008964:	462b      	mov	r3, r5
 8008966:	f7f7 fe47 	bl	80005f8 <__aeabi_dmul>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	2000      	movs	r0, #0
 8008970:	494d      	ldr	r1, [pc, #308]	; (8008aa8 <__ieee754_pow+0x3f8>)
 8008972:	f7f7 fc89 	bl	8000288 <__aeabi_dsub>
 8008976:	4622      	mov	r2, r4
 8008978:	4680      	mov	r8, r0
 800897a:	4689      	mov	r9, r1
 800897c:	462b      	mov	r3, r5
 800897e:	4620      	mov	r0, r4
 8008980:	4629      	mov	r1, r5
 8008982:	f7f7 fe39 	bl	80005f8 <__aeabi_dmul>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	4640      	mov	r0, r8
 800898c:	4649      	mov	r1, r9
 800898e:	f7f7 fe33 	bl	80005f8 <__aeabi_dmul>
 8008992:	a33f      	add	r3, pc, #252	; (adr r3, 8008a90 <__ieee754_pow+0x3e0>)
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	f7f7 fe2e 	bl	80005f8 <__aeabi_dmul>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4650      	mov	r0, sl
 80089a2:	4659      	mov	r1, fp
 80089a4:	f7f7 fc70 	bl	8000288 <__aeabi_dsub>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	4680      	mov	r8, r0
 80089ae:	4689      	mov	r9, r1
 80089b0:	4630      	mov	r0, r6
 80089b2:	4639      	mov	r1, r7
 80089b4:	f7f7 fc6a 	bl	800028c <__adddf3>
 80089b8:	2000      	movs	r0, #0
 80089ba:	4632      	mov	r2, r6
 80089bc:	463b      	mov	r3, r7
 80089be:	4604      	mov	r4, r0
 80089c0:	460d      	mov	r5, r1
 80089c2:	f7f7 fc61 	bl	8000288 <__aeabi_dsub>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	4640      	mov	r0, r8
 80089cc:	4649      	mov	r1, r9
 80089ce:	f7f7 fc5b 	bl	8000288 <__aeabi_dsub>
 80089d2:	9b04      	ldr	r3, [sp, #16]
 80089d4:	9a06      	ldr	r2, [sp, #24]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	4313      	orrs	r3, r2
 80089da:	4682      	mov	sl, r0
 80089dc:	468b      	mov	fp, r1
 80089de:	f040 81e7 	bne.w	8008db0 <__ieee754_pow+0x700>
 80089e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008a98 <__ieee754_pow+0x3e8>
 80089e6:	eeb0 8a47 	vmov.f32	s16, s14
 80089ea:	eef0 8a67 	vmov.f32	s17, s15
 80089ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80089f2:	2600      	movs	r6, #0
 80089f4:	4632      	mov	r2, r6
 80089f6:	463b      	mov	r3, r7
 80089f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089fc:	f7f7 fc44 	bl	8000288 <__aeabi_dsub>
 8008a00:	4622      	mov	r2, r4
 8008a02:	462b      	mov	r3, r5
 8008a04:	f7f7 fdf8 	bl	80005f8 <__aeabi_dmul>
 8008a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a0c:	4680      	mov	r8, r0
 8008a0e:	4689      	mov	r9, r1
 8008a10:	4650      	mov	r0, sl
 8008a12:	4659      	mov	r1, fp
 8008a14:	f7f7 fdf0 	bl	80005f8 <__aeabi_dmul>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4640      	mov	r0, r8
 8008a1e:	4649      	mov	r1, r9
 8008a20:	f7f7 fc34 	bl	800028c <__adddf3>
 8008a24:	4632      	mov	r2, r6
 8008a26:	463b      	mov	r3, r7
 8008a28:	4680      	mov	r8, r0
 8008a2a:	4689      	mov	r9, r1
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7f7 fde2 	bl	80005f8 <__aeabi_dmul>
 8008a34:	460b      	mov	r3, r1
 8008a36:	4604      	mov	r4, r0
 8008a38:	460d      	mov	r5, r1
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	4649      	mov	r1, r9
 8008a3e:	4640      	mov	r0, r8
 8008a40:	f7f7 fc24 	bl	800028c <__adddf3>
 8008a44:	4b19      	ldr	r3, [pc, #100]	; (8008aac <__ieee754_pow+0x3fc>)
 8008a46:	4299      	cmp	r1, r3
 8008a48:	ec45 4b19 	vmov	d9, r4, r5
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	460f      	mov	r7, r1
 8008a50:	468b      	mov	fp, r1
 8008a52:	f340 82f1 	ble.w	8009038 <__ieee754_pow+0x988>
 8008a56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008a5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008a5e:	4303      	orrs	r3, r0
 8008a60:	f000 81e4 	beq.w	8008e2c <__ieee754_pow+0x77c>
 8008a64:	ec51 0b18 	vmov	r0, r1, d8
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f7f8 f836 	bl	8000adc <__aeabi_dcmplt>
 8008a70:	3800      	subs	r0, #0
 8008a72:	bf18      	it	ne
 8008a74:	2001      	movne	r0, #1
 8008a76:	e72b      	b.n	80088d0 <__ieee754_pow+0x220>
 8008a78:	60000000 	.word	0x60000000
 8008a7c:	3ff71547 	.word	0x3ff71547
 8008a80:	f85ddf44 	.word	0xf85ddf44
 8008a84:	3e54ae0b 	.word	0x3e54ae0b
 8008a88:	55555555 	.word	0x55555555
 8008a8c:	3fd55555 	.word	0x3fd55555
 8008a90:	652b82fe 	.word	0x652b82fe
 8008a94:	3ff71547 	.word	0x3ff71547
 8008a98:	00000000 	.word	0x00000000
 8008a9c:	bff00000 	.word	0xbff00000
 8008aa0:	3ff00000 	.word	0x3ff00000
 8008aa4:	3fd00000 	.word	0x3fd00000
 8008aa8:	3fe00000 	.word	0x3fe00000
 8008aac:	408fffff 	.word	0x408fffff
 8008ab0:	4bd5      	ldr	r3, [pc, #852]	; (8008e08 <__ieee754_pow+0x758>)
 8008ab2:	402b      	ands	r3, r5
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	b92b      	cbnz	r3, 8008ac4 <__ieee754_pow+0x414>
 8008ab8:	4bd4      	ldr	r3, [pc, #848]	; (8008e0c <__ieee754_pow+0x75c>)
 8008aba:	f7f7 fd9d 	bl	80005f8 <__aeabi_dmul>
 8008abe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	1523      	asrs	r3, r4, #20
 8008ac6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008aca:	4413      	add	r3, r2
 8008acc:	9305      	str	r3, [sp, #20]
 8008ace:	4bd0      	ldr	r3, [pc, #832]	; (8008e10 <__ieee754_pow+0x760>)
 8008ad0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008ad4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008ad8:	429c      	cmp	r4, r3
 8008ada:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008ade:	dd08      	ble.n	8008af2 <__ieee754_pow+0x442>
 8008ae0:	4bcc      	ldr	r3, [pc, #816]	; (8008e14 <__ieee754_pow+0x764>)
 8008ae2:	429c      	cmp	r4, r3
 8008ae4:	f340 8162 	ble.w	8008dac <__ieee754_pow+0x6fc>
 8008ae8:	9b05      	ldr	r3, [sp, #20]
 8008aea:	3301      	adds	r3, #1
 8008aec:	9305      	str	r3, [sp, #20]
 8008aee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008af2:	2400      	movs	r4, #0
 8008af4:	00e3      	lsls	r3, r4, #3
 8008af6:	9307      	str	r3, [sp, #28]
 8008af8:	4bc7      	ldr	r3, [pc, #796]	; (8008e18 <__ieee754_pow+0x768>)
 8008afa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008afe:	ed93 7b00 	vldr	d7, [r3]
 8008b02:	4629      	mov	r1, r5
 8008b04:	ec53 2b17 	vmov	r2, r3, d7
 8008b08:	eeb0 9a47 	vmov.f32	s18, s14
 8008b0c:	eef0 9a67 	vmov.f32	s19, s15
 8008b10:	4682      	mov	sl, r0
 8008b12:	f7f7 fbb9 	bl	8000288 <__aeabi_dsub>
 8008b16:	4652      	mov	r2, sl
 8008b18:	4606      	mov	r6, r0
 8008b1a:	460f      	mov	r7, r1
 8008b1c:	462b      	mov	r3, r5
 8008b1e:	ec51 0b19 	vmov	r0, r1, d9
 8008b22:	f7f7 fbb3 	bl	800028c <__adddf3>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	49bb      	ldr	r1, [pc, #748]	; (8008e1c <__ieee754_pow+0x76c>)
 8008b2e:	f7f7 fe8d 	bl	800084c <__aeabi_ddiv>
 8008b32:	ec41 0b1a 	vmov	d10, r0, r1
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	f7f7 fd5b 	bl	80005f8 <__aeabi_dmul>
 8008b42:	2300      	movs	r3, #0
 8008b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b48:	9302      	str	r3, [sp, #8]
 8008b4a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008b4e:	46ab      	mov	fp, r5
 8008b50:	106d      	asrs	r5, r5, #1
 8008b52:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008b56:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008b5a:	ec41 0b18 	vmov	d8, r0, r1
 8008b5e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008b62:	2200      	movs	r2, #0
 8008b64:	4640      	mov	r0, r8
 8008b66:	4649      	mov	r1, r9
 8008b68:	4614      	mov	r4, r2
 8008b6a:	461d      	mov	r5, r3
 8008b6c:	f7f7 fd44 	bl	80005f8 <__aeabi_dmul>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4630      	mov	r0, r6
 8008b76:	4639      	mov	r1, r7
 8008b78:	f7f7 fb86 	bl	8000288 <__aeabi_dsub>
 8008b7c:	ec53 2b19 	vmov	r2, r3, d9
 8008b80:	4606      	mov	r6, r0
 8008b82:	460f      	mov	r7, r1
 8008b84:	4620      	mov	r0, r4
 8008b86:	4629      	mov	r1, r5
 8008b88:	f7f7 fb7e 	bl	8000288 <__aeabi_dsub>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4650      	mov	r0, sl
 8008b92:	4659      	mov	r1, fp
 8008b94:	f7f7 fb78 	bl	8000288 <__aeabi_dsub>
 8008b98:	4642      	mov	r2, r8
 8008b9a:	464b      	mov	r3, r9
 8008b9c:	f7f7 fd2c 	bl	80005f8 <__aeabi_dmul>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	4639      	mov	r1, r7
 8008ba8:	f7f7 fb6e 	bl	8000288 <__aeabi_dsub>
 8008bac:	ec53 2b1a 	vmov	r2, r3, d10
 8008bb0:	f7f7 fd22 	bl	80005f8 <__aeabi_dmul>
 8008bb4:	ec53 2b18 	vmov	r2, r3, d8
 8008bb8:	ec41 0b19 	vmov	d9, r0, r1
 8008bbc:	ec51 0b18 	vmov	r0, r1, d8
 8008bc0:	f7f7 fd1a 	bl	80005f8 <__aeabi_dmul>
 8008bc4:	a37c      	add	r3, pc, #496	; (adr r3, 8008db8 <__ieee754_pow+0x708>)
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	4604      	mov	r4, r0
 8008bcc:	460d      	mov	r5, r1
 8008bce:	f7f7 fd13 	bl	80005f8 <__aeabi_dmul>
 8008bd2:	a37b      	add	r3, pc, #492	; (adr r3, 8008dc0 <__ieee754_pow+0x710>)
 8008bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd8:	f7f7 fb58 	bl	800028c <__adddf3>
 8008bdc:	4622      	mov	r2, r4
 8008bde:	462b      	mov	r3, r5
 8008be0:	f7f7 fd0a 	bl	80005f8 <__aeabi_dmul>
 8008be4:	a378      	add	r3, pc, #480	; (adr r3, 8008dc8 <__ieee754_pow+0x718>)
 8008be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bea:	f7f7 fb4f 	bl	800028c <__adddf3>
 8008bee:	4622      	mov	r2, r4
 8008bf0:	462b      	mov	r3, r5
 8008bf2:	f7f7 fd01 	bl	80005f8 <__aeabi_dmul>
 8008bf6:	a376      	add	r3, pc, #472	; (adr r3, 8008dd0 <__ieee754_pow+0x720>)
 8008bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfc:	f7f7 fb46 	bl	800028c <__adddf3>
 8008c00:	4622      	mov	r2, r4
 8008c02:	462b      	mov	r3, r5
 8008c04:	f7f7 fcf8 	bl	80005f8 <__aeabi_dmul>
 8008c08:	a373      	add	r3, pc, #460	; (adr r3, 8008dd8 <__ieee754_pow+0x728>)
 8008c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0e:	f7f7 fb3d 	bl	800028c <__adddf3>
 8008c12:	4622      	mov	r2, r4
 8008c14:	462b      	mov	r3, r5
 8008c16:	f7f7 fcef 	bl	80005f8 <__aeabi_dmul>
 8008c1a:	a371      	add	r3, pc, #452	; (adr r3, 8008de0 <__ieee754_pow+0x730>)
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	f7f7 fb34 	bl	800028c <__adddf3>
 8008c24:	4622      	mov	r2, r4
 8008c26:	4606      	mov	r6, r0
 8008c28:	460f      	mov	r7, r1
 8008c2a:	462b      	mov	r3, r5
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	4629      	mov	r1, r5
 8008c30:	f7f7 fce2 	bl	80005f8 <__aeabi_dmul>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4630      	mov	r0, r6
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	f7f7 fcdc 	bl	80005f8 <__aeabi_dmul>
 8008c40:	4642      	mov	r2, r8
 8008c42:	4604      	mov	r4, r0
 8008c44:	460d      	mov	r5, r1
 8008c46:	464b      	mov	r3, r9
 8008c48:	ec51 0b18 	vmov	r0, r1, d8
 8008c4c:	f7f7 fb1e 	bl	800028c <__adddf3>
 8008c50:	ec53 2b19 	vmov	r2, r3, d9
 8008c54:	f7f7 fcd0 	bl	80005f8 <__aeabi_dmul>
 8008c58:	4622      	mov	r2, r4
 8008c5a:	462b      	mov	r3, r5
 8008c5c:	f7f7 fb16 	bl	800028c <__adddf3>
 8008c60:	4642      	mov	r2, r8
 8008c62:	4682      	mov	sl, r0
 8008c64:	468b      	mov	fp, r1
 8008c66:	464b      	mov	r3, r9
 8008c68:	4640      	mov	r0, r8
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	f7f7 fcc4 	bl	80005f8 <__aeabi_dmul>
 8008c70:	4b6b      	ldr	r3, [pc, #428]	; (8008e20 <__ieee754_pow+0x770>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	4606      	mov	r6, r0
 8008c76:	460f      	mov	r7, r1
 8008c78:	f7f7 fb08 	bl	800028c <__adddf3>
 8008c7c:	4652      	mov	r2, sl
 8008c7e:	465b      	mov	r3, fp
 8008c80:	f7f7 fb04 	bl	800028c <__adddf3>
 8008c84:	2000      	movs	r0, #0
 8008c86:	4604      	mov	r4, r0
 8008c88:	460d      	mov	r5, r1
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4640      	mov	r0, r8
 8008c90:	4649      	mov	r1, r9
 8008c92:	f7f7 fcb1 	bl	80005f8 <__aeabi_dmul>
 8008c96:	4b62      	ldr	r3, [pc, #392]	; (8008e20 <__ieee754_pow+0x770>)
 8008c98:	4680      	mov	r8, r0
 8008c9a:	4689      	mov	r9, r1
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	f7f7 faf1 	bl	8000288 <__aeabi_dsub>
 8008ca6:	4632      	mov	r2, r6
 8008ca8:	463b      	mov	r3, r7
 8008caa:	f7f7 faed 	bl	8000288 <__aeabi_dsub>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4650      	mov	r0, sl
 8008cb4:	4659      	mov	r1, fp
 8008cb6:	f7f7 fae7 	bl	8000288 <__aeabi_dsub>
 8008cba:	ec53 2b18 	vmov	r2, r3, d8
 8008cbe:	f7f7 fc9b 	bl	80005f8 <__aeabi_dmul>
 8008cc2:	4622      	mov	r2, r4
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	460f      	mov	r7, r1
 8008cc8:	462b      	mov	r3, r5
 8008cca:	ec51 0b19 	vmov	r0, r1, d9
 8008cce:	f7f7 fc93 	bl	80005f8 <__aeabi_dmul>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	4639      	mov	r1, r7
 8008cda:	f7f7 fad7 	bl	800028c <__adddf3>
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	4649      	mov	r1, r9
 8008cea:	f7f7 facf 	bl	800028c <__adddf3>
 8008cee:	a33e      	add	r3, pc, #248	; (adr r3, 8008de8 <__ieee754_pow+0x738>)
 8008cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	460d      	mov	r5, r1
 8008cfa:	f7f7 fc7d 	bl	80005f8 <__aeabi_dmul>
 8008cfe:	4642      	mov	r2, r8
 8008d00:	ec41 0b18 	vmov	d8, r0, r1
 8008d04:	464b      	mov	r3, r9
 8008d06:	4620      	mov	r0, r4
 8008d08:	4629      	mov	r1, r5
 8008d0a:	f7f7 fabd 	bl	8000288 <__aeabi_dsub>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4630      	mov	r0, r6
 8008d14:	4639      	mov	r1, r7
 8008d16:	f7f7 fab7 	bl	8000288 <__aeabi_dsub>
 8008d1a:	a335      	add	r3, pc, #212	; (adr r3, 8008df0 <__ieee754_pow+0x740>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	f7f7 fc6a 	bl	80005f8 <__aeabi_dmul>
 8008d24:	a334      	add	r3, pc, #208	; (adr r3, 8008df8 <__ieee754_pow+0x748>)
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	460f      	mov	r7, r1
 8008d2e:	4620      	mov	r0, r4
 8008d30:	4629      	mov	r1, r5
 8008d32:	f7f7 fc61 	bl	80005f8 <__aeabi_dmul>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	4639      	mov	r1, r7
 8008d3e:	f7f7 faa5 	bl	800028c <__adddf3>
 8008d42:	9a07      	ldr	r2, [sp, #28]
 8008d44:	4b37      	ldr	r3, [pc, #220]	; (8008e24 <__ieee754_pow+0x774>)
 8008d46:	4413      	add	r3, r2
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	f7f7 fa9e 	bl	800028c <__adddf3>
 8008d50:	4682      	mov	sl, r0
 8008d52:	9805      	ldr	r0, [sp, #20]
 8008d54:	468b      	mov	fp, r1
 8008d56:	f7f7 fbe5 	bl	8000524 <__aeabi_i2d>
 8008d5a:	9a07      	ldr	r2, [sp, #28]
 8008d5c:	4b32      	ldr	r3, [pc, #200]	; (8008e28 <__ieee754_pow+0x778>)
 8008d5e:	4413      	add	r3, r2
 8008d60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d64:	4606      	mov	r6, r0
 8008d66:	460f      	mov	r7, r1
 8008d68:	4652      	mov	r2, sl
 8008d6a:	465b      	mov	r3, fp
 8008d6c:	ec51 0b18 	vmov	r0, r1, d8
 8008d70:	f7f7 fa8c 	bl	800028c <__adddf3>
 8008d74:	4642      	mov	r2, r8
 8008d76:	464b      	mov	r3, r9
 8008d78:	f7f7 fa88 	bl	800028c <__adddf3>
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	463b      	mov	r3, r7
 8008d80:	f7f7 fa84 	bl	800028c <__adddf3>
 8008d84:	2000      	movs	r0, #0
 8008d86:	4632      	mov	r2, r6
 8008d88:	463b      	mov	r3, r7
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	460d      	mov	r5, r1
 8008d8e:	f7f7 fa7b 	bl	8000288 <__aeabi_dsub>
 8008d92:	4642      	mov	r2, r8
 8008d94:	464b      	mov	r3, r9
 8008d96:	f7f7 fa77 	bl	8000288 <__aeabi_dsub>
 8008d9a:	ec53 2b18 	vmov	r2, r3, d8
 8008d9e:	f7f7 fa73 	bl	8000288 <__aeabi_dsub>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	4650      	mov	r0, sl
 8008da8:	4659      	mov	r1, fp
 8008daa:	e610      	b.n	80089ce <__ieee754_pow+0x31e>
 8008dac:	2401      	movs	r4, #1
 8008dae:	e6a1      	b.n	8008af4 <__ieee754_pow+0x444>
 8008db0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008e00 <__ieee754_pow+0x750>
 8008db4:	e617      	b.n	80089e6 <__ieee754_pow+0x336>
 8008db6:	bf00      	nop
 8008db8:	4a454eef 	.word	0x4a454eef
 8008dbc:	3fca7e28 	.word	0x3fca7e28
 8008dc0:	93c9db65 	.word	0x93c9db65
 8008dc4:	3fcd864a 	.word	0x3fcd864a
 8008dc8:	a91d4101 	.word	0xa91d4101
 8008dcc:	3fd17460 	.word	0x3fd17460
 8008dd0:	518f264d 	.word	0x518f264d
 8008dd4:	3fd55555 	.word	0x3fd55555
 8008dd8:	db6fabff 	.word	0xdb6fabff
 8008ddc:	3fdb6db6 	.word	0x3fdb6db6
 8008de0:	33333303 	.word	0x33333303
 8008de4:	3fe33333 	.word	0x3fe33333
 8008de8:	e0000000 	.word	0xe0000000
 8008dec:	3feec709 	.word	0x3feec709
 8008df0:	dc3a03fd 	.word	0xdc3a03fd
 8008df4:	3feec709 	.word	0x3feec709
 8008df8:	145b01f5 	.word	0x145b01f5
 8008dfc:	be3e2fe0 	.word	0xbe3e2fe0
 8008e00:	00000000 	.word	0x00000000
 8008e04:	3ff00000 	.word	0x3ff00000
 8008e08:	7ff00000 	.word	0x7ff00000
 8008e0c:	43400000 	.word	0x43400000
 8008e10:	0003988e 	.word	0x0003988e
 8008e14:	000bb679 	.word	0x000bb679
 8008e18:	0800bce0 	.word	0x0800bce0
 8008e1c:	3ff00000 	.word	0x3ff00000
 8008e20:	40080000 	.word	0x40080000
 8008e24:	0800bd00 	.word	0x0800bd00
 8008e28:	0800bcf0 	.word	0x0800bcf0
 8008e2c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009104 <__ieee754_pow+0xa54>)
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	4640      	mov	r0, r8
 8008e34:	4649      	mov	r1, r9
 8008e36:	f7f7 fa29 	bl	800028c <__adddf3>
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	ec41 0b1a 	vmov	d10, r0, r1
 8008e40:	462b      	mov	r3, r5
 8008e42:	4630      	mov	r0, r6
 8008e44:	4639      	mov	r1, r7
 8008e46:	f7f7 fa1f 	bl	8000288 <__aeabi_dsub>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	ec51 0b1a 	vmov	r0, r1, d10
 8008e52:	f7f7 fe61 	bl	8000b18 <__aeabi_dcmpgt>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	f47f ae04 	bne.w	8008a64 <__ieee754_pow+0x3b4>
 8008e5c:	4aa4      	ldr	r2, [pc, #656]	; (80090f0 <__ieee754_pow+0xa40>)
 8008e5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e62:	4293      	cmp	r3, r2
 8008e64:	f340 8108 	ble.w	8009078 <__ieee754_pow+0x9c8>
 8008e68:	151b      	asrs	r3, r3, #20
 8008e6a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008e6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008e72:	fa4a f303 	asr.w	r3, sl, r3
 8008e76:	445b      	add	r3, fp
 8008e78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008e7c:	4e9d      	ldr	r6, [pc, #628]	; (80090f4 <__ieee754_pow+0xa44>)
 8008e7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008e82:	4116      	asrs	r6, r2
 8008e84:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008e88:	2000      	movs	r0, #0
 8008e8a:	ea23 0106 	bic.w	r1, r3, r6
 8008e8e:	f1c2 0214 	rsb	r2, r2, #20
 8008e92:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008e96:	fa4a fa02 	asr.w	sl, sl, r2
 8008e9a:	f1bb 0f00 	cmp.w	fp, #0
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	bfb8      	it	lt
 8008ea8:	f1ca 0a00 	rsblt	sl, sl, #0
 8008eac:	f7f7 f9ec 	bl	8000288 <__aeabi_dsub>
 8008eb0:	ec41 0b19 	vmov	d9, r0, r1
 8008eb4:	4642      	mov	r2, r8
 8008eb6:	464b      	mov	r3, r9
 8008eb8:	ec51 0b19 	vmov	r0, r1, d9
 8008ebc:	f7f7 f9e6 	bl	800028c <__adddf3>
 8008ec0:	a37b      	add	r3, pc, #492	; (adr r3, 80090b0 <__ieee754_pow+0xa00>)
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	4604      	mov	r4, r0
 8008eca:	460d      	mov	r5, r1
 8008ecc:	f7f7 fb94 	bl	80005f8 <__aeabi_dmul>
 8008ed0:	ec53 2b19 	vmov	r2, r3, d9
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	460f      	mov	r7, r1
 8008ed8:	4620      	mov	r0, r4
 8008eda:	4629      	mov	r1, r5
 8008edc:	f7f7 f9d4 	bl	8000288 <__aeabi_dsub>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4640      	mov	r0, r8
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	f7f7 f9ce 	bl	8000288 <__aeabi_dsub>
 8008eec:	a372      	add	r3, pc, #456	; (adr r3, 80090b8 <__ieee754_pow+0xa08>)
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	f7f7 fb81 	bl	80005f8 <__aeabi_dmul>
 8008ef6:	a372      	add	r3, pc, #456	; (adr r3, 80090c0 <__ieee754_pow+0xa10>)
 8008ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efc:	4680      	mov	r8, r0
 8008efe:	4689      	mov	r9, r1
 8008f00:	4620      	mov	r0, r4
 8008f02:	4629      	mov	r1, r5
 8008f04:	f7f7 fb78 	bl	80005f8 <__aeabi_dmul>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4640      	mov	r0, r8
 8008f0e:	4649      	mov	r1, r9
 8008f10:	f7f7 f9bc 	bl	800028c <__adddf3>
 8008f14:	4604      	mov	r4, r0
 8008f16:	460d      	mov	r5, r1
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	4639      	mov	r1, r7
 8008f20:	f7f7 f9b4 	bl	800028c <__adddf3>
 8008f24:	4632      	mov	r2, r6
 8008f26:	463b      	mov	r3, r7
 8008f28:	4680      	mov	r8, r0
 8008f2a:	4689      	mov	r9, r1
 8008f2c:	f7f7 f9ac 	bl	8000288 <__aeabi_dsub>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4620      	mov	r0, r4
 8008f36:	4629      	mov	r1, r5
 8008f38:	f7f7 f9a6 	bl	8000288 <__aeabi_dsub>
 8008f3c:	4642      	mov	r2, r8
 8008f3e:	4606      	mov	r6, r0
 8008f40:	460f      	mov	r7, r1
 8008f42:	464b      	mov	r3, r9
 8008f44:	4640      	mov	r0, r8
 8008f46:	4649      	mov	r1, r9
 8008f48:	f7f7 fb56 	bl	80005f8 <__aeabi_dmul>
 8008f4c:	a35e      	add	r3, pc, #376	; (adr r3, 80090c8 <__ieee754_pow+0xa18>)
 8008f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f52:	4604      	mov	r4, r0
 8008f54:	460d      	mov	r5, r1
 8008f56:	f7f7 fb4f 	bl	80005f8 <__aeabi_dmul>
 8008f5a:	a35d      	add	r3, pc, #372	; (adr r3, 80090d0 <__ieee754_pow+0xa20>)
 8008f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f60:	f7f7 f992 	bl	8000288 <__aeabi_dsub>
 8008f64:	4622      	mov	r2, r4
 8008f66:	462b      	mov	r3, r5
 8008f68:	f7f7 fb46 	bl	80005f8 <__aeabi_dmul>
 8008f6c:	a35a      	add	r3, pc, #360	; (adr r3, 80090d8 <__ieee754_pow+0xa28>)
 8008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f72:	f7f7 f98b 	bl	800028c <__adddf3>
 8008f76:	4622      	mov	r2, r4
 8008f78:	462b      	mov	r3, r5
 8008f7a:	f7f7 fb3d 	bl	80005f8 <__aeabi_dmul>
 8008f7e:	a358      	add	r3, pc, #352	; (adr r3, 80090e0 <__ieee754_pow+0xa30>)
 8008f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f84:	f7f7 f980 	bl	8000288 <__aeabi_dsub>
 8008f88:	4622      	mov	r2, r4
 8008f8a:	462b      	mov	r3, r5
 8008f8c:	f7f7 fb34 	bl	80005f8 <__aeabi_dmul>
 8008f90:	a355      	add	r3, pc, #340	; (adr r3, 80090e8 <__ieee754_pow+0xa38>)
 8008f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f96:	f7f7 f979 	bl	800028c <__adddf3>
 8008f9a:	4622      	mov	r2, r4
 8008f9c:	462b      	mov	r3, r5
 8008f9e:	f7f7 fb2b 	bl	80005f8 <__aeabi_dmul>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	4649      	mov	r1, r9
 8008faa:	f7f7 f96d 	bl	8000288 <__aeabi_dsub>
 8008fae:	4604      	mov	r4, r0
 8008fb0:	460d      	mov	r5, r1
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	4649      	mov	r1, r9
 8008fba:	f7f7 fb1d 	bl	80005f8 <__aeabi_dmul>
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	ec41 0b19 	vmov	d9, r0, r1
 8008fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008fc8:	4620      	mov	r0, r4
 8008fca:	4629      	mov	r1, r5
 8008fcc:	f7f7 f95c 	bl	8000288 <__aeabi_dsub>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	ec51 0b19 	vmov	r0, r1, d9
 8008fd8:	f7f7 fc38 	bl	800084c <__aeabi_ddiv>
 8008fdc:	4632      	mov	r2, r6
 8008fde:	4604      	mov	r4, r0
 8008fe0:	460d      	mov	r5, r1
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	4640      	mov	r0, r8
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	f7f7 fb06 	bl	80005f8 <__aeabi_dmul>
 8008fec:	4632      	mov	r2, r6
 8008fee:	463b      	mov	r3, r7
 8008ff0:	f7f7 f94c 	bl	800028c <__adddf3>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	f7f7 f944 	bl	8000288 <__aeabi_dsub>
 8009000:	4642      	mov	r2, r8
 8009002:	464b      	mov	r3, r9
 8009004:	f7f7 f940 	bl	8000288 <__aeabi_dsub>
 8009008:	460b      	mov	r3, r1
 800900a:	4602      	mov	r2, r0
 800900c:	493a      	ldr	r1, [pc, #232]	; (80090f8 <__ieee754_pow+0xa48>)
 800900e:	2000      	movs	r0, #0
 8009010:	f7f7 f93a 	bl	8000288 <__aeabi_dsub>
 8009014:	ec41 0b10 	vmov	d0, r0, r1
 8009018:	ee10 3a90 	vmov	r3, s1
 800901c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009024:	da2b      	bge.n	800907e <__ieee754_pow+0x9ce>
 8009026:	4650      	mov	r0, sl
 8009028:	f001 f8ce 	bl	800a1c8 <scalbn>
 800902c:	ec51 0b10 	vmov	r0, r1, d0
 8009030:	ec53 2b18 	vmov	r2, r3, d8
 8009034:	f7ff bbed 	b.w	8008812 <__ieee754_pow+0x162>
 8009038:	4b30      	ldr	r3, [pc, #192]	; (80090fc <__ieee754_pow+0xa4c>)
 800903a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800903e:	429e      	cmp	r6, r3
 8009040:	f77f af0c 	ble.w	8008e5c <__ieee754_pow+0x7ac>
 8009044:	4b2e      	ldr	r3, [pc, #184]	; (8009100 <__ieee754_pow+0xa50>)
 8009046:	440b      	add	r3, r1
 8009048:	4303      	orrs	r3, r0
 800904a:	d009      	beq.n	8009060 <__ieee754_pow+0x9b0>
 800904c:	ec51 0b18 	vmov	r0, r1, d8
 8009050:	2200      	movs	r2, #0
 8009052:	2300      	movs	r3, #0
 8009054:	f7f7 fd42 	bl	8000adc <__aeabi_dcmplt>
 8009058:	3800      	subs	r0, #0
 800905a:	bf18      	it	ne
 800905c:	2001      	movne	r0, #1
 800905e:	e447      	b.n	80088f0 <__ieee754_pow+0x240>
 8009060:	4622      	mov	r2, r4
 8009062:	462b      	mov	r3, r5
 8009064:	f7f7 f910 	bl	8000288 <__aeabi_dsub>
 8009068:	4642      	mov	r2, r8
 800906a:	464b      	mov	r3, r9
 800906c:	f7f7 fd4a 	bl	8000b04 <__aeabi_dcmpge>
 8009070:	2800      	cmp	r0, #0
 8009072:	f43f aef3 	beq.w	8008e5c <__ieee754_pow+0x7ac>
 8009076:	e7e9      	b.n	800904c <__ieee754_pow+0x99c>
 8009078:	f04f 0a00 	mov.w	sl, #0
 800907c:	e71a      	b.n	8008eb4 <__ieee754_pow+0x804>
 800907e:	ec51 0b10 	vmov	r0, r1, d0
 8009082:	4619      	mov	r1, r3
 8009084:	e7d4      	b.n	8009030 <__ieee754_pow+0x980>
 8009086:	491c      	ldr	r1, [pc, #112]	; (80090f8 <__ieee754_pow+0xa48>)
 8009088:	2000      	movs	r0, #0
 800908a:	f7ff bb30 	b.w	80086ee <__ieee754_pow+0x3e>
 800908e:	2000      	movs	r0, #0
 8009090:	2100      	movs	r1, #0
 8009092:	f7ff bb2c 	b.w	80086ee <__ieee754_pow+0x3e>
 8009096:	4630      	mov	r0, r6
 8009098:	4639      	mov	r1, r7
 800909a:	f7ff bb28 	b.w	80086ee <__ieee754_pow+0x3e>
 800909e:	9204      	str	r2, [sp, #16]
 80090a0:	f7ff bb7a 	b.w	8008798 <__ieee754_pow+0xe8>
 80090a4:	2300      	movs	r3, #0
 80090a6:	f7ff bb64 	b.w	8008772 <__ieee754_pow+0xc2>
 80090aa:	bf00      	nop
 80090ac:	f3af 8000 	nop.w
 80090b0:	00000000 	.word	0x00000000
 80090b4:	3fe62e43 	.word	0x3fe62e43
 80090b8:	fefa39ef 	.word	0xfefa39ef
 80090bc:	3fe62e42 	.word	0x3fe62e42
 80090c0:	0ca86c39 	.word	0x0ca86c39
 80090c4:	be205c61 	.word	0xbe205c61
 80090c8:	72bea4d0 	.word	0x72bea4d0
 80090cc:	3e663769 	.word	0x3e663769
 80090d0:	c5d26bf1 	.word	0xc5d26bf1
 80090d4:	3ebbbd41 	.word	0x3ebbbd41
 80090d8:	af25de2c 	.word	0xaf25de2c
 80090dc:	3f11566a 	.word	0x3f11566a
 80090e0:	16bebd93 	.word	0x16bebd93
 80090e4:	3f66c16c 	.word	0x3f66c16c
 80090e8:	5555553e 	.word	0x5555553e
 80090ec:	3fc55555 	.word	0x3fc55555
 80090f0:	3fe00000 	.word	0x3fe00000
 80090f4:	000fffff 	.word	0x000fffff
 80090f8:	3ff00000 	.word	0x3ff00000
 80090fc:	4090cbff 	.word	0x4090cbff
 8009100:	3f6f3400 	.word	0x3f6f3400
 8009104:	652b82fe 	.word	0x652b82fe
 8009108:	3c971547 	.word	0x3c971547
 800910c:	00000000 	.word	0x00000000

08009110 <__ieee754_rem_pio2>:
 8009110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	ed2d 8b02 	vpush	{d8}
 8009118:	ec55 4b10 	vmov	r4, r5, d0
 800911c:	4bca      	ldr	r3, [pc, #808]	; (8009448 <__ieee754_rem_pio2+0x338>)
 800911e:	b08b      	sub	sp, #44	; 0x2c
 8009120:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009124:	4598      	cmp	r8, r3
 8009126:	4682      	mov	sl, r0
 8009128:	9502      	str	r5, [sp, #8]
 800912a:	dc08      	bgt.n	800913e <__ieee754_rem_pio2+0x2e>
 800912c:	2200      	movs	r2, #0
 800912e:	2300      	movs	r3, #0
 8009130:	ed80 0b00 	vstr	d0, [r0]
 8009134:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009138:	f04f 0b00 	mov.w	fp, #0
 800913c:	e028      	b.n	8009190 <__ieee754_rem_pio2+0x80>
 800913e:	4bc3      	ldr	r3, [pc, #780]	; (800944c <__ieee754_rem_pio2+0x33c>)
 8009140:	4598      	cmp	r8, r3
 8009142:	dc78      	bgt.n	8009236 <__ieee754_rem_pio2+0x126>
 8009144:	9b02      	ldr	r3, [sp, #8]
 8009146:	4ec2      	ldr	r6, [pc, #776]	; (8009450 <__ieee754_rem_pio2+0x340>)
 8009148:	2b00      	cmp	r3, #0
 800914a:	ee10 0a10 	vmov	r0, s0
 800914e:	a3b0      	add	r3, pc, #704	; (adr r3, 8009410 <__ieee754_rem_pio2+0x300>)
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	4629      	mov	r1, r5
 8009156:	dd39      	ble.n	80091cc <__ieee754_rem_pio2+0xbc>
 8009158:	f7f7 f896 	bl	8000288 <__aeabi_dsub>
 800915c:	45b0      	cmp	r8, r6
 800915e:	4604      	mov	r4, r0
 8009160:	460d      	mov	r5, r1
 8009162:	d01b      	beq.n	800919c <__ieee754_rem_pio2+0x8c>
 8009164:	a3ac      	add	r3, pc, #688	; (adr r3, 8009418 <__ieee754_rem_pio2+0x308>)
 8009166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916a:	f7f7 f88d 	bl	8000288 <__aeabi_dsub>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	e9ca 2300 	strd	r2, r3, [sl]
 8009176:	4620      	mov	r0, r4
 8009178:	4629      	mov	r1, r5
 800917a:	f7f7 f885 	bl	8000288 <__aeabi_dsub>
 800917e:	a3a6      	add	r3, pc, #664	; (adr r3, 8009418 <__ieee754_rem_pio2+0x308>)
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	f7f7 f880 	bl	8000288 <__aeabi_dsub>
 8009188:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800918c:	f04f 0b01 	mov.w	fp, #1
 8009190:	4658      	mov	r0, fp
 8009192:	b00b      	add	sp, #44	; 0x2c
 8009194:	ecbd 8b02 	vpop	{d8}
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	a3a0      	add	r3, pc, #640	; (adr r3, 8009420 <__ieee754_rem_pio2+0x310>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	f7f7 f871 	bl	8000288 <__aeabi_dsub>
 80091a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8009428 <__ieee754_rem_pio2+0x318>)
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	4604      	mov	r4, r0
 80091ae:	460d      	mov	r5, r1
 80091b0:	f7f7 f86a 	bl	8000288 <__aeabi_dsub>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	e9ca 2300 	strd	r2, r3, [sl]
 80091bc:	4620      	mov	r0, r4
 80091be:	4629      	mov	r1, r5
 80091c0:	f7f7 f862 	bl	8000288 <__aeabi_dsub>
 80091c4:	a398      	add	r3, pc, #608	; (adr r3, 8009428 <__ieee754_rem_pio2+0x318>)
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	e7db      	b.n	8009184 <__ieee754_rem_pio2+0x74>
 80091cc:	f7f7 f85e 	bl	800028c <__adddf3>
 80091d0:	45b0      	cmp	r8, r6
 80091d2:	4604      	mov	r4, r0
 80091d4:	460d      	mov	r5, r1
 80091d6:	d016      	beq.n	8009206 <__ieee754_rem_pio2+0xf6>
 80091d8:	a38f      	add	r3, pc, #572	; (adr r3, 8009418 <__ieee754_rem_pio2+0x308>)
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	f7f7 f855 	bl	800028c <__adddf3>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	e9ca 2300 	strd	r2, r3, [sl]
 80091ea:	4620      	mov	r0, r4
 80091ec:	4629      	mov	r1, r5
 80091ee:	f7f7 f84b 	bl	8000288 <__aeabi_dsub>
 80091f2:	a389      	add	r3, pc, #548	; (adr r3, 8009418 <__ieee754_rem_pio2+0x308>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f7f7 f848 	bl	800028c <__adddf3>
 80091fc:	f04f 3bff 	mov.w	fp, #4294967295
 8009200:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009204:	e7c4      	b.n	8009190 <__ieee754_rem_pio2+0x80>
 8009206:	a386      	add	r3, pc, #536	; (adr r3, 8009420 <__ieee754_rem_pio2+0x310>)
 8009208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920c:	f7f7 f83e 	bl	800028c <__adddf3>
 8009210:	a385      	add	r3, pc, #532	; (adr r3, 8009428 <__ieee754_rem_pio2+0x318>)
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	4604      	mov	r4, r0
 8009218:	460d      	mov	r5, r1
 800921a:	f7f7 f837 	bl	800028c <__adddf3>
 800921e:	4602      	mov	r2, r0
 8009220:	460b      	mov	r3, r1
 8009222:	e9ca 2300 	strd	r2, r3, [sl]
 8009226:	4620      	mov	r0, r4
 8009228:	4629      	mov	r1, r5
 800922a:	f7f7 f82d 	bl	8000288 <__aeabi_dsub>
 800922e:	a37e      	add	r3, pc, #504	; (adr r3, 8009428 <__ieee754_rem_pio2+0x318>)
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	e7e0      	b.n	80091f8 <__ieee754_rem_pio2+0xe8>
 8009236:	4b87      	ldr	r3, [pc, #540]	; (8009454 <__ieee754_rem_pio2+0x344>)
 8009238:	4598      	cmp	r8, r3
 800923a:	f300 80d9 	bgt.w	80093f0 <__ieee754_rem_pio2+0x2e0>
 800923e:	f000 ff2d 	bl	800a09c <fabs>
 8009242:	ec55 4b10 	vmov	r4, r5, d0
 8009246:	ee10 0a10 	vmov	r0, s0
 800924a:	a379      	add	r3, pc, #484	; (adr r3, 8009430 <__ieee754_rem_pio2+0x320>)
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	4629      	mov	r1, r5
 8009252:	f7f7 f9d1 	bl	80005f8 <__aeabi_dmul>
 8009256:	4b80      	ldr	r3, [pc, #512]	; (8009458 <__ieee754_rem_pio2+0x348>)
 8009258:	2200      	movs	r2, #0
 800925a:	f7f7 f817 	bl	800028c <__adddf3>
 800925e:	f7f7 fc7b 	bl	8000b58 <__aeabi_d2iz>
 8009262:	4683      	mov	fp, r0
 8009264:	f7f7 f95e 	bl	8000524 <__aeabi_i2d>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	ec43 2b18 	vmov	d8, r2, r3
 8009270:	a367      	add	r3, pc, #412	; (adr r3, 8009410 <__ieee754_rem_pio2+0x300>)
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	f7f7 f9bf 	bl	80005f8 <__aeabi_dmul>
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	4620      	mov	r0, r4
 8009280:	4629      	mov	r1, r5
 8009282:	f7f7 f801 	bl	8000288 <__aeabi_dsub>
 8009286:	a364      	add	r3, pc, #400	; (adr r3, 8009418 <__ieee754_rem_pio2+0x308>)
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	4606      	mov	r6, r0
 800928e:	460f      	mov	r7, r1
 8009290:	ec51 0b18 	vmov	r0, r1, d8
 8009294:	f7f7 f9b0 	bl	80005f8 <__aeabi_dmul>
 8009298:	f1bb 0f1f 	cmp.w	fp, #31
 800929c:	4604      	mov	r4, r0
 800929e:	460d      	mov	r5, r1
 80092a0:	dc0d      	bgt.n	80092be <__ieee754_rem_pio2+0x1ae>
 80092a2:	4b6e      	ldr	r3, [pc, #440]	; (800945c <__ieee754_rem_pio2+0x34c>)
 80092a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80092a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ac:	4543      	cmp	r3, r8
 80092ae:	d006      	beq.n	80092be <__ieee754_rem_pio2+0x1ae>
 80092b0:	4622      	mov	r2, r4
 80092b2:	462b      	mov	r3, r5
 80092b4:	4630      	mov	r0, r6
 80092b6:	4639      	mov	r1, r7
 80092b8:	f7f6 ffe6 	bl	8000288 <__aeabi_dsub>
 80092bc:	e00f      	b.n	80092de <__ieee754_rem_pio2+0x1ce>
 80092be:	462b      	mov	r3, r5
 80092c0:	4622      	mov	r2, r4
 80092c2:	4630      	mov	r0, r6
 80092c4:	4639      	mov	r1, r7
 80092c6:	f7f6 ffdf 	bl	8000288 <__aeabi_dsub>
 80092ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80092ce:	9303      	str	r3, [sp, #12]
 80092d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80092d4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80092d8:	f1b8 0f10 	cmp.w	r8, #16
 80092dc:	dc02      	bgt.n	80092e4 <__ieee754_rem_pio2+0x1d4>
 80092de:	e9ca 0100 	strd	r0, r1, [sl]
 80092e2:	e039      	b.n	8009358 <__ieee754_rem_pio2+0x248>
 80092e4:	a34e      	add	r3, pc, #312	; (adr r3, 8009420 <__ieee754_rem_pio2+0x310>)
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	ec51 0b18 	vmov	r0, r1, d8
 80092ee:	f7f7 f983 	bl	80005f8 <__aeabi_dmul>
 80092f2:	4604      	mov	r4, r0
 80092f4:	460d      	mov	r5, r1
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	4630      	mov	r0, r6
 80092fc:	4639      	mov	r1, r7
 80092fe:	f7f6 ffc3 	bl	8000288 <__aeabi_dsub>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4680      	mov	r8, r0
 8009308:	4689      	mov	r9, r1
 800930a:	4630      	mov	r0, r6
 800930c:	4639      	mov	r1, r7
 800930e:	f7f6 ffbb 	bl	8000288 <__aeabi_dsub>
 8009312:	4622      	mov	r2, r4
 8009314:	462b      	mov	r3, r5
 8009316:	f7f6 ffb7 	bl	8000288 <__aeabi_dsub>
 800931a:	a343      	add	r3, pc, #268	; (adr r3, 8009428 <__ieee754_rem_pio2+0x318>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	4604      	mov	r4, r0
 8009322:	460d      	mov	r5, r1
 8009324:	ec51 0b18 	vmov	r0, r1, d8
 8009328:	f7f7 f966 	bl	80005f8 <__aeabi_dmul>
 800932c:	4622      	mov	r2, r4
 800932e:	462b      	mov	r3, r5
 8009330:	f7f6 ffaa 	bl	8000288 <__aeabi_dsub>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4604      	mov	r4, r0
 800933a:	460d      	mov	r5, r1
 800933c:	4640      	mov	r0, r8
 800933e:	4649      	mov	r1, r9
 8009340:	f7f6 ffa2 	bl	8000288 <__aeabi_dsub>
 8009344:	9a03      	ldr	r2, [sp, #12]
 8009346:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	2b31      	cmp	r3, #49	; 0x31
 800934e:	dc24      	bgt.n	800939a <__ieee754_rem_pio2+0x28a>
 8009350:	e9ca 0100 	strd	r0, r1, [sl]
 8009354:	4646      	mov	r6, r8
 8009356:	464f      	mov	r7, r9
 8009358:	e9da 8900 	ldrd	r8, r9, [sl]
 800935c:	4630      	mov	r0, r6
 800935e:	4642      	mov	r2, r8
 8009360:	464b      	mov	r3, r9
 8009362:	4639      	mov	r1, r7
 8009364:	f7f6 ff90 	bl	8000288 <__aeabi_dsub>
 8009368:	462b      	mov	r3, r5
 800936a:	4622      	mov	r2, r4
 800936c:	f7f6 ff8c 	bl	8000288 <__aeabi_dsub>
 8009370:	9b02      	ldr	r3, [sp, #8]
 8009372:	2b00      	cmp	r3, #0
 8009374:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009378:	f6bf af0a 	bge.w	8009190 <__ieee754_rem_pio2+0x80>
 800937c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009380:	f8ca 3004 	str.w	r3, [sl, #4]
 8009384:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009388:	f8ca 8000 	str.w	r8, [sl]
 800938c:	f8ca 0008 	str.w	r0, [sl, #8]
 8009390:	f8ca 300c 	str.w	r3, [sl, #12]
 8009394:	f1cb 0b00 	rsb	fp, fp, #0
 8009398:	e6fa      	b.n	8009190 <__ieee754_rem_pio2+0x80>
 800939a:	a327      	add	r3, pc, #156	; (adr r3, 8009438 <__ieee754_rem_pio2+0x328>)
 800939c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a0:	ec51 0b18 	vmov	r0, r1, d8
 80093a4:	f7f7 f928 	bl	80005f8 <__aeabi_dmul>
 80093a8:	4604      	mov	r4, r0
 80093aa:	460d      	mov	r5, r1
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	4640      	mov	r0, r8
 80093b2:	4649      	mov	r1, r9
 80093b4:	f7f6 ff68 	bl	8000288 <__aeabi_dsub>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4606      	mov	r6, r0
 80093be:	460f      	mov	r7, r1
 80093c0:	4640      	mov	r0, r8
 80093c2:	4649      	mov	r1, r9
 80093c4:	f7f6 ff60 	bl	8000288 <__aeabi_dsub>
 80093c8:	4622      	mov	r2, r4
 80093ca:	462b      	mov	r3, r5
 80093cc:	f7f6 ff5c 	bl	8000288 <__aeabi_dsub>
 80093d0:	a31b      	add	r3, pc, #108	; (adr r3, 8009440 <__ieee754_rem_pio2+0x330>)
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	4604      	mov	r4, r0
 80093d8:	460d      	mov	r5, r1
 80093da:	ec51 0b18 	vmov	r0, r1, d8
 80093de:	f7f7 f90b 	bl	80005f8 <__aeabi_dmul>
 80093e2:	4622      	mov	r2, r4
 80093e4:	462b      	mov	r3, r5
 80093e6:	f7f6 ff4f 	bl	8000288 <__aeabi_dsub>
 80093ea:	4604      	mov	r4, r0
 80093ec:	460d      	mov	r5, r1
 80093ee:	e75f      	b.n	80092b0 <__ieee754_rem_pio2+0x1a0>
 80093f0:	4b1b      	ldr	r3, [pc, #108]	; (8009460 <__ieee754_rem_pio2+0x350>)
 80093f2:	4598      	cmp	r8, r3
 80093f4:	dd36      	ble.n	8009464 <__ieee754_rem_pio2+0x354>
 80093f6:	ee10 2a10 	vmov	r2, s0
 80093fa:	462b      	mov	r3, r5
 80093fc:	4620      	mov	r0, r4
 80093fe:	4629      	mov	r1, r5
 8009400:	f7f6 ff42 	bl	8000288 <__aeabi_dsub>
 8009404:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009408:	e9ca 0100 	strd	r0, r1, [sl]
 800940c:	e694      	b.n	8009138 <__ieee754_rem_pio2+0x28>
 800940e:	bf00      	nop
 8009410:	54400000 	.word	0x54400000
 8009414:	3ff921fb 	.word	0x3ff921fb
 8009418:	1a626331 	.word	0x1a626331
 800941c:	3dd0b461 	.word	0x3dd0b461
 8009420:	1a600000 	.word	0x1a600000
 8009424:	3dd0b461 	.word	0x3dd0b461
 8009428:	2e037073 	.word	0x2e037073
 800942c:	3ba3198a 	.word	0x3ba3198a
 8009430:	6dc9c883 	.word	0x6dc9c883
 8009434:	3fe45f30 	.word	0x3fe45f30
 8009438:	2e000000 	.word	0x2e000000
 800943c:	3ba3198a 	.word	0x3ba3198a
 8009440:	252049c1 	.word	0x252049c1
 8009444:	397b839a 	.word	0x397b839a
 8009448:	3fe921fb 	.word	0x3fe921fb
 800944c:	4002d97b 	.word	0x4002d97b
 8009450:	3ff921fb 	.word	0x3ff921fb
 8009454:	413921fb 	.word	0x413921fb
 8009458:	3fe00000 	.word	0x3fe00000
 800945c:	0800bd10 	.word	0x0800bd10
 8009460:	7fefffff 	.word	0x7fefffff
 8009464:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009468:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800946c:	ee10 0a10 	vmov	r0, s0
 8009470:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009474:	ee10 6a10 	vmov	r6, s0
 8009478:	460f      	mov	r7, r1
 800947a:	f7f7 fb6d 	bl	8000b58 <__aeabi_d2iz>
 800947e:	f7f7 f851 	bl	8000524 <__aeabi_i2d>
 8009482:	4602      	mov	r2, r0
 8009484:	460b      	mov	r3, r1
 8009486:	4630      	mov	r0, r6
 8009488:	4639      	mov	r1, r7
 800948a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800948e:	f7f6 fefb 	bl	8000288 <__aeabi_dsub>
 8009492:	4b23      	ldr	r3, [pc, #140]	; (8009520 <__ieee754_rem_pio2+0x410>)
 8009494:	2200      	movs	r2, #0
 8009496:	f7f7 f8af 	bl	80005f8 <__aeabi_dmul>
 800949a:	460f      	mov	r7, r1
 800949c:	4606      	mov	r6, r0
 800949e:	f7f7 fb5b 	bl	8000b58 <__aeabi_d2iz>
 80094a2:	f7f7 f83f 	bl	8000524 <__aeabi_i2d>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	4630      	mov	r0, r6
 80094ac:	4639      	mov	r1, r7
 80094ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80094b2:	f7f6 fee9 	bl	8000288 <__aeabi_dsub>
 80094b6:	4b1a      	ldr	r3, [pc, #104]	; (8009520 <__ieee754_rem_pio2+0x410>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	f7f7 f89d 	bl	80005f8 <__aeabi_dmul>
 80094be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094c2:	ad04      	add	r5, sp, #16
 80094c4:	f04f 0803 	mov.w	r8, #3
 80094c8:	46a9      	mov	r9, r5
 80094ca:	2600      	movs	r6, #0
 80094cc:	2700      	movs	r7, #0
 80094ce:	4632      	mov	r2, r6
 80094d0:	463b      	mov	r3, r7
 80094d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80094d6:	46c3      	mov	fp, r8
 80094d8:	3d08      	subs	r5, #8
 80094da:	f108 38ff 	add.w	r8, r8, #4294967295
 80094de:	f7f7 faf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d1f3      	bne.n	80094ce <__ieee754_rem_pio2+0x3be>
 80094e6:	4b0f      	ldr	r3, [pc, #60]	; (8009524 <__ieee754_rem_pio2+0x414>)
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	2302      	movs	r3, #2
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	4622      	mov	r2, r4
 80094f0:	465b      	mov	r3, fp
 80094f2:	4651      	mov	r1, sl
 80094f4:	4648      	mov	r0, r9
 80094f6:	f000 f993 	bl	8009820 <__kernel_rem_pio2>
 80094fa:	9b02      	ldr	r3, [sp, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	4683      	mov	fp, r0
 8009500:	f6bf ae46 	bge.w	8009190 <__ieee754_rem_pio2+0x80>
 8009504:	e9da 2100 	ldrd	r2, r1, [sl]
 8009508:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800950c:	e9ca 2300 	strd	r2, r3, [sl]
 8009510:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009514:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009518:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800951c:	e73a      	b.n	8009394 <__ieee754_rem_pio2+0x284>
 800951e:	bf00      	nop
 8009520:	41700000 	.word	0x41700000
 8009524:	0800bd90 	.word	0x0800bd90

08009528 <__ieee754_sqrt>:
 8009528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952c:	ec55 4b10 	vmov	r4, r5, d0
 8009530:	4e55      	ldr	r6, [pc, #340]	; (8009688 <__ieee754_sqrt+0x160>)
 8009532:	43ae      	bics	r6, r5
 8009534:	ee10 0a10 	vmov	r0, s0
 8009538:	ee10 3a10 	vmov	r3, s0
 800953c:	462a      	mov	r2, r5
 800953e:	4629      	mov	r1, r5
 8009540:	d110      	bne.n	8009564 <__ieee754_sqrt+0x3c>
 8009542:	ee10 2a10 	vmov	r2, s0
 8009546:	462b      	mov	r3, r5
 8009548:	f7f7 f856 	bl	80005f8 <__aeabi_dmul>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	4620      	mov	r0, r4
 8009552:	4629      	mov	r1, r5
 8009554:	f7f6 fe9a 	bl	800028c <__adddf3>
 8009558:	4604      	mov	r4, r0
 800955a:	460d      	mov	r5, r1
 800955c:	ec45 4b10 	vmov	d0, r4, r5
 8009560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009564:	2d00      	cmp	r5, #0
 8009566:	dc10      	bgt.n	800958a <__ieee754_sqrt+0x62>
 8009568:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800956c:	4330      	orrs	r0, r6
 800956e:	d0f5      	beq.n	800955c <__ieee754_sqrt+0x34>
 8009570:	b15d      	cbz	r5, 800958a <__ieee754_sqrt+0x62>
 8009572:	ee10 2a10 	vmov	r2, s0
 8009576:	462b      	mov	r3, r5
 8009578:	ee10 0a10 	vmov	r0, s0
 800957c:	f7f6 fe84 	bl	8000288 <__aeabi_dsub>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	f7f7 f962 	bl	800084c <__aeabi_ddiv>
 8009588:	e7e6      	b.n	8009558 <__ieee754_sqrt+0x30>
 800958a:	1512      	asrs	r2, r2, #20
 800958c:	d074      	beq.n	8009678 <__ieee754_sqrt+0x150>
 800958e:	07d4      	lsls	r4, r2, #31
 8009590:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009594:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800959c:	bf5e      	ittt	pl
 800959e:	0fda      	lsrpl	r2, r3, #31
 80095a0:	005b      	lslpl	r3, r3, #1
 80095a2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80095a6:	2400      	movs	r4, #0
 80095a8:	0fda      	lsrs	r2, r3, #31
 80095aa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80095ae:	107f      	asrs	r7, r7, #1
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	2516      	movs	r5, #22
 80095b4:	4620      	mov	r0, r4
 80095b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80095ba:	1886      	adds	r6, r0, r2
 80095bc:	428e      	cmp	r6, r1
 80095be:	bfde      	ittt	le
 80095c0:	1b89      	suble	r1, r1, r6
 80095c2:	18b0      	addle	r0, r6, r2
 80095c4:	18a4      	addle	r4, r4, r2
 80095c6:	0049      	lsls	r1, r1, #1
 80095c8:	3d01      	subs	r5, #1
 80095ca:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80095ce:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80095d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80095d6:	d1f0      	bne.n	80095ba <__ieee754_sqrt+0x92>
 80095d8:	462a      	mov	r2, r5
 80095da:	f04f 0e20 	mov.w	lr, #32
 80095de:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80095e2:	4281      	cmp	r1, r0
 80095e4:	eb06 0c05 	add.w	ip, r6, r5
 80095e8:	dc02      	bgt.n	80095f0 <__ieee754_sqrt+0xc8>
 80095ea:	d113      	bne.n	8009614 <__ieee754_sqrt+0xec>
 80095ec:	459c      	cmp	ip, r3
 80095ee:	d811      	bhi.n	8009614 <__ieee754_sqrt+0xec>
 80095f0:	f1bc 0f00 	cmp.w	ip, #0
 80095f4:	eb0c 0506 	add.w	r5, ip, r6
 80095f8:	da43      	bge.n	8009682 <__ieee754_sqrt+0x15a>
 80095fa:	2d00      	cmp	r5, #0
 80095fc:	db41      	blt.n	8009682 <__ieee754_sqrt+0x15a>
 80095fe:	f100 0801 	add.w	r8, r0, #1
 8009602:	1a09      	subs	r1, r1, r0
 8009604:	459c      	cmp	ip, r3
 8009606:	bf88      	it	hi
 8009608:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800960c:	eba3 030c 	sub.w	r3, r3, ip
 8009610:	4432      	add	r2, r6
 8009612:	4640      	mov	r0, r8
 8009614:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009618:	f1be 0e01 	subs.w	lr, lr, #1
 800961c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009620:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009624:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009628:	d1db      	bne.n	80095e2 <__ieee754_sqrt+0xba>
 800962a:	430b      	orrs	r3, r1
 800962c:	d006      	beq.n	800963c <__ieee754_sqrt+0x114>
 800962e:	1c50      	adds	r0, r2, #1
 8009630:	bf13      	iteet	ne
 8009632:	3201      	addne	r2, #1
 8009634:	3401      	addeq	r4, #1
 8009636:	4672      	moveq	r2, lr
 8009638:	f022 0201 	bicne.w	r2, r2, #1
 800963c:	1063      	asrs	r3, r4, #1
 800963e:	0852      	lsrs	r2, r2, #1
 8009640:	07e1      	lsls	r1, r4, #31
 8009642:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009646:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800964a:	bf48      	it	mi
 800964c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009650:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009654:	4614      	mov	r4, r2
 8009656:	e781      	b.n	800955c <__ieee754_sqrt+0x34>
 8009658:	0ad9      	lsrs	r1, r3, #11
 800965a:	3815      	subs	r0, #21
 800965c:	055b      	lsls	r3, r3, #21
 800965e:	2900      	cmp	r1, #0
 8009660:	d0fa      	beq.n	8009658 <__ieee754_sqrt+0x130>
 8009662:	02cd      	lsls	r5, r1, #11
 8009664:	d50a      	bpl.n	800967c <__ieee754_sqrt+0x154>
 8009666:	f1c2 0420 	rsb	r4, r2, #32
 800966a:	fa23 f404 	lsr.w	r4, r3, r4
 800966e:	1e55      	subs	r5, r2, #1
 8009670:	4093      	lsls	r3, r2
 8009672:	4321      	orrs	r1, r4
 8009674:	1b42      	subs	r2, r0, r5
 8009676:	e78a      	b.n	800958e <__ieee754_sqrt+0x66>
 8009678:	4610      	mov	r0, r2
 800967a:	e7f0      	b.n	800965e <__ieee754_sqrt+0x136>
 800967c:	0049      	lsls	r1, r1, #1
 800967e:	3201      	adds	r2, #1
 8009680:	e7ef      	b.n	8009662 <__ieee754_sqrt+0x13a>
 8009682:	4680      	mov	r8, r0
 8009684:	e7bd      	b.n	8009602 <__ieee754_sqrt+0xda>
 8009686:	bf00      	nop
 8009688:	7ff00000 	.word	0x7ff00000
 800968c:	00000000 	.word	0x00000000

08009690 <__kernel_cos>:
 8009690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009694:	ec57 6b10 	vmov	r6, r7, d0
 8009698:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800969c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80096a0:	ed8d 1b00 	vstr	d1, [sp]
 80096a4:	da07      	bge.n	80096b6 <__kernel_cos+0x26>
 80096a6:	ee10 0a10 	vmov	r0, s0
 80096aa:	4639      	mov	r1, r7
 80096ac:	f7f7 fa54 	bl	8000b58 <__aeabi_d2iz>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	f000 8088 	beq.w	80097c6 <__kernel_cos+0x136>
 80096b6:	4632      	mov	r2, r6
 80096b8:	463b      	mov	r3, r7
 80096ba:	4630      	mov	r0, r6
 80096bc:	4639      	mov	r1, r7
 80096be:	f7f6 ff9b 	bl	80005f8 <__aeabi_dmul>
 80096c2:	4b51      	ldr	r3, [pc, #324]	; (8009808 <__kernel_cos+0x178>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	4604      	mov	r4, r0
 80096c8:	460d      	mov	r5, r1
 80096ca:	f7f6 ff95 	bl	80005f8 <__aeabi_dmul>
 80096ce:	a340      	add	r3, pc, #256	; (adr r3, 80097d0 <__kernel_cos+0x140>)
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	4682      	mov	sl, r0
 80096d6:	468b      	mov	fp, r1
 80096d8:	4620      	mov	r0, r4
 80096da:	4629      	mov	r1, r5
 80096dc:	f7f6 ff8c 	bl	80005f8 <__aeabi_dmul>
 80096e0:	a33d      	add	r3, pc, #244	; (adr r3, 80097d8 <__kernel_cos+0x148>)
 80096e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e6:	f7f6 fdd1 	bl	800028c <__adddf3>
 80096ea:	4622      	mov	r2, r4
 80096ec:	462b      	mov	r3, r5
 80096ee:	f7f6 ff83 	bl	80005f8 <__aeabi_dmul>
 80096f2:	a33b      	add	r3, pc, #236	; (adr r3, 80097e0 <__kernel_cos+0x150>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	f7f6 fdc6 	bl	8000288 <__aeabi_dsub>
 80096fc:	4622      	mov	r2, r4
 80096fe:	462b      	mov	r3, r5
 8009700:	f7f6 ff7a 	bl	80005f8 <__aeabi_dmul>
 8009704:	a338      	add	r3, pc, #224	; (adr r3, 80097e8 <__kernel_cos+0x158>)
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f7f6 fdbf 	bl	800028c <__adddf3>
 800970e:	4622      	mov	r2, r4
 8009710:	462b      	mov	r3, r5
 8009712:	f7f6 ff71 	bl	80005f8 <__aeabi_dmul>
 8009716:	a336      	add	r3, pc, #216	; (adr r3, 80097f0 <__kernel_cos+0x160>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f7f6 fdb4 	bl	8000288 <__aeabi_dsub>
 8009720:	4622      	mov	r2, r4
 8009722:	462b      	mov	r3, r5
 8009724:	f7f6 ff68 	bl	80005f8 <__aeabi_dmul>
 8009728:	a333      	add	r3, pc, #204	; (adr r3, 80097f8 <__kernel_cos+0x168>)
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	f7f6 fdad 	bl	800028c <__adddf3>
 8009732:	4622      	mov	r2, r4
 8009734:	462b      	mov	r3, r5
 8009736:	f7f6 ff5f 	bl	80005f8 <__aeabi_dmul>
 800973a:	4622      	mov	r2, r4
 800973c:	462b      	mov	r3, r5
 800973e:	f7f6 ff5b 	bl	80005f8 <__aeabi_dmul>
 8009742:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009746:	4604      	mov	r4, r0
 8009748:	460d      	mov	r5, r1
 800974a:	4630      	mov	r0, r6
 800974c:	4639      	mov	r1, r7
 800974e:	f7f6 ff53 	bl	80005f8 <__aeabi_dmul>
 8009752:	460b      	mov	r3, r1
 8009754:	4602      	mov	r2, r0
 8009756:	4629      	mov	r1, r5
 8009758:	4620      	mov	r0, r4
 800975a:	f7f6 fd95 	bl	8000288 <__aeabi_dsub>
 800975e:	4b2b      	ldr	r3, [pc, #172]	; (800980c <__kernel_cos+0x17c>)
 8009760:	4598      	cmp	r8, r3
 8009762:	4606      	mov	r6, r0
 8009764:	460f      	mov	r7, r1
 8009766:	dc10      	bgt.n	800978a <__kernel_cos+0xfa>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4650      	mov	r0, sl
 800976e:	4659      	mov	r1, fp
 8009770:	f7f6 fd8a 	bl	8000288 <__aeabi_dsub>
 8009774:	460b      	mov	r3, r1
 8009776:	4926      	ldr	r1, [pc, #152]	; (8009810 <__kernel_cos+0x180>)
 8009778:	4602      	mov	r2, r0
 800977a:	2000      	movs	r0, #0
 800977c:	f7f6 fd84 	bl	8000288 <__aeabi_dsub>
 8009780:	ec41 0b10 	vmov	d0, r0, r1
 8009784:	b003      	add	sp, #12
 8009786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978a:	4b22      	ldr	r3, [pc, #136]	; (8009814 <__kernel_cos+0x184>)
 800978c:	4920      	ldr	r1, [pc, #128]	; (8009810 <__kernel_cos+0x180>)
 800978e:	4598      	cmp	r8, r3
 8009790:	bfcc      	ite	gt
 8009792:	4d21      	ldrgt	r5, [pc, #132]	; (8009818 <__kernel_cos+0x188>)
 8009794:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009798:	2400      	movs	r4, #0
 800979a:	4622      	mov	r2, r4
 800979c:	462b      	mov	r3, r5
 800979e:	2000      	movs	r0, #0
 80097a0:	f7f6 fd72 	bl	8000288 <__aeabi_dsub>
 80097a4:	4622      	mov	r2, r4
 80097a6:	4680      	mov	r8, r0
 80097a8:	4689      	mov	r9, r1
 80097aa:	462b      	mov	r3, r5
 80097ac:	4650      	mov	r0, sl
 80097ae:	4659      	mov	r1, fp
 80097b0:	f7f6 fd6a 	bl	8000288 <__aeabi_dsub>
 80097b4:	4632      	mov	r2, r6
 80097b6:	463b      	mov	r3, r7
 80097b8:	f7f6 fd66 	bl	8000288 <__aeabi_dsub>
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	4640      	mov	r0, r8
 80097c2:	4649      	mov	r1, r9
 80097c4:	e7da      	b.n	800977c <__kernel_cos+0xec>
 80097c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009800 <__kernel_cos+0x170>
 80097ca:	e7db      	b.n	8009784 <__kernel_cos+0xf4>
 80097cc:	f3af 8000 	nop.w
 80097d0:	be8838d4 	.word	0xbe8838d4
 80097d4:	bda8fae9 	.word	0xbda8fae9
 80097d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80097dc:	3e21ee9e 	.word	0x3e21ee9e
 80097e0:	809c52ad 	.word	0x809c52ad
 80097e4:	3e927e4f 	.word	0x3e927e4f
 80097e8:	19cb1590 	.word	0x19cb1590
 80097ec:	3efa01a0 	.word	0x3efa01a0
 80097f0:	16c15177 	.word	0x16c15177
 80097f4:	3f56c16c 	.word	0x3f56c16c
 80097f8:	5555554c 	.word	0x5555554c
 80097fc:	3fa55555 	.word	0x3fa55555
 8009800:	00000000 	.word	0x00000000
 8009804:	3ff00000 	.word	0x3ff00000
 8009808:	3fe00000 	.word	0x3fe00000
 800980c:	3fd33332 	.word	0x3fd33332
 8009810:	3ff00000 	.word	0x3ff00000
 8009814:	3fe90000 	.word	0x3fe90000
 8009818:	3fd20000 	.word	0x3fd20000
 800981c:	00000000 	.word	0x00000000

08009820 <__kernel_rem_pio2>:
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	ed2d 8b02 	vpush	{d8}
 8009828:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800982c:	f112 0f14 	cmn.w	r2, #20
 8009830:	9308      	str	r3, [sp, #32]
 8009832:	9101      	str	r1, [sp, #4]
 8009834:	4bc4      	ldr	r3, [pc, #784]	; (8009b48 <__kernel_rem_pio2+0x328>)
 8009836:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009838:	900b      	str	r0, [sp, #44]	; 0x2c
 800983a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800983e:	9302      	str	r3, [sp, #8]
 8009840:	9b08      	ldr	r3, [sp, #32]
 8009842:	f103 33ff 	add.w	r3, r3, #4294967295
 8009846:	bfa8      	it	ge
 8009848:	1ed4      	subge	r4, r2, #3
 800984a:	9306      	str	r3, [sp, #24]
 800984c:	bfb2      	itee	lt
 800984e:	2400      	movlt	r4, #0
 8009850:	2318      	movge	r3, #24
 8009852:	fb94 f4f3 	sdivge	r4, r4, r3
 8009856:	f06f 0317 	mvn.w	r3, #23
 800985a:	fb04 3303 	mla	r3, r4, r3, r3
 800985e:	eb03 0a02 	add.w	sl, r3, r2
 8009862:	9b02      	ldr	r3, [sp, #8]
 8009864:	9a06      	ldr	r2, [sp, #24]
 8009866:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009b38 <__kernel_rem_pio2+0x318>
 800986a:	eb03 0802 	add.w	r8, r3, r2
 800986e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009870:	1aa7      	subs	r7, r4, r2
 8009872:	ae22      	add	r6, sp, #136	; 0x88
 8009874:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009878:	2500      	movs	r5, #0
 800987a:	4545      	cmp	r5, r8
 800987c:	dd13      	ble.n	80098a6 <__kernel_rem_pio2+0x86>
 800987e:	9b08      	ldr	r3, [sp, #32]
 8009880:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009b38 <__kernel_rem_pio2+0x318>
 8009884:	aa22      	add	r2, sp, #136	; 0x88
 8009886:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800988a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800988e:	f04f 0800 	mov.w	r8, #0
 8009892:	9b02      	ldr	r3, [sp, #8]
 8009894:	4598      	cmp	r8, r3
 8009896:	dc2f      	bgt.n	80098f8 <__kernel_rem_pio2+0xd8>
 8009898:	ed8d 8b04 	vstr	d8, [sp, #16]
 800989c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80098a0:	462f      	mov	r7, r5
 80098a2:	2600      	movs	r6, #0
 80098a4:	e01b      	b.n	80098de <__kernel_rem_pio2+0xbe>
 80098a6:	42ef      	cmn	r7, r5
 80098a8:	d407      	bmi.n	80098ba <__kernel_rem_pio2+0x9a>
 80098aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80098ae:	f7f6 fe39 	bl	8000524 <__aeabi_i2d>
 80098b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80098b6:	3501      	adds	r5, #1
 80098b8:	e7df      	b.n	800987a <__kernel_rem_pio2+0x5a>
 80098ba:	ec51 0b18 	vmov	r0, r1, d8
 80098be:	e7f8      	b.n	80098b2 <__kernel_rem_pio2+0x92>
 80098c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80098c8:	f7f6 fe96 	bl	80005f8 <__aeabi_dmul>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098d4:	f7f6 fcda 	bl	800028c <__adddf3>
 80098d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098dc:	3601      	adds	r6, #1
 80098de:	9b06      	ldr	r3, [sp, #24]
 80098e0:	429e      	cmp	r6, r3
 80098e2:	f1a7 0708 	sub.w	r7, r7, #8
 80098e6:	ddeb      	ble.n	80098c0 <__kernel_rem_pio2+0xa0>
 80098e8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80098ec:	f108 0801 	add.w	r8, r8, #1
 80098f0:	ecab 7b02 	vstmia	fp!, {d7}
 80098f4:	3508      	adds	r5, #8
 80098f6:	e7cc      	b.n	8009892 <__kernel_rem_pio2+0x72>
 80098f8:	9b02      	ldr	r3, [sp, #8]
 80098fa:	aa0e      	add	r2, sp, #56	; 0x38
 80098fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009900:	930d      	str	r3, [sp, #52]	; 0x34
 8009902:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009904:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009908:	9c02      	ldr	r4, [sp, #8]
 800990a:	930c      	str	r3, [sp, #48]	; 0x30
 800990c:	00e3      	lsls	r3, r4, #3
 800990e:	930a      	str	r3, [sp, #40]	; 0x28
 8009910:	ab9a      	add	r3, sp, #616	; 0x268
 8009912:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009916:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800991a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800991e:	ab72      	add	r3, sp, #456	; 0x1c8
 8009920:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8009924:	46c3      	mov	fp, r8
 8009926:	46a1      	mov	r9, r4
 8009928:	f1b9 0f00 	cmp.w	r9, #0
 800992c:	f1a5 0508 	sub.w	r5, r5, #8
 8009930:	dc77      	bgt.n	8009a22 <__kernel_rem_pio2+0x202>
 8009932:	ec47 6b10 	vmov	d0, r6, r7
 8009936:	4650      	mov	r0, sl
 8009938:	f000 fc46 	bl	800a1c8 <scalbn>
 800993c:	ec57 6b10 	vmov	r6, r7, d0
 8009940:	2200      	movs	r2, #0
 8009942:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009946:	ee10 0a10 	vmov	r0, s0
 800994a:	4639      	mov	r1, r7
 800994c:	f7f6 fe54 	bl	80005f8 <__aeabi_dmul>
 8009950:	ec41 0b10 	vmov	d0, r0, r1
 8009954:	f000 fbb8 	bl	800a0c8 <floor>
 8009958:	4b7c      	ldr	r3, [pc, #496]	; (8009b4c <__kernel_rem_pio2+0x32c>)
 800995a:	ec51 0b10 	vmov	r0, r1, d0
 800995e:	2200      	movs	r2, #0
 8009960:	f7f6 fe4a 	bl	80005f8 <__aeabi_dmul>
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	4630      	mov	r0, r6
 800996a:	4639      	mov	r1, r7
 800996c:	f7f6 fc8c 	bl	8000288 <__aeabi_dsub>
 8009970:	460f      	mov	r7, r1
 8009972:	4606      	mov	r6, r0
 8009974:	f7f7 f8f0 	bl	8000b58 <__aeabi_d2iz>
 8009978:	9004      	str	r0, [sp, #16]
 800997a:	f7f6 fdd3 	bl	8000524 <__aeabi_i2d>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	4630      	mov	r0, r6
 8009984:	4639      	mov	r1, r7
 8009986:	f7f6 fc7f 	bl	8000288 <__aeabi_dsub>
 800998a:	f1ba 0f00 	cmp.w	sl, #0
 800998e:	4606      	mov	r6, r0
 8009990:	460f      	mov	r7, r1
 8009992:	dd6d      	ble.n	8009a70 <__kernel_rem_pio2+0x250>
 8009994:	1e62      	subs	r2, r4, #1
 8009996:	ab0e      	add	r3, sp, #56	; 0x38
 8009998:	9d04      	ldr	r5, [sp, #16]
 800999a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800999e:	f1ca 0118 	rsb	r1, sl, #24
 80099a2:	fa40 f301 	asr.w	r3, r0, r1
 80099a6:	441d      	add	r5, r3
 80099a8:	408b      	lsls	r3, r1
 80099aa:	1ac0      	subs	r0, r0, r3
 80099ac:	ab0e      	add	r3, sp, #56	; 0x38
 80099ae:	9504      	str	r5, [sp, #16]
 80099b0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80099b4:	f1ca 0317 	rsb	r3, sl, #23
 80099b8:	fa40 fb03 	asr.w	fp, r0, r3
 80099bc:	f1bb 0f00 	cmp.w	fp, #0
 80099c0:	dd65      	ble.n	8009a8e <__kernel_rem_pio2+0x26e>
 80099c2:	9b04      	ldr	r3, [sp, #16]
 80099c4:	2200      	movs	r2, #0
 80099c6:	3301      	adds	r3, #1
 80099c8:	9304      	str	r3, [sp, #16]
 80099ca:	4615      	mov	r5, r2
 80099cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80099d0:	4294      	cmp	r4, r2
 80099d2:	f300 809c 	bgt.w	8009b0e <__kernel_rem_pio2+0x2ee>
 80099d6:	f1ba 0f00 	cmp.w	sl, #0
 80099da:	dd07      	ble.n	80099ec <__kernel_rem_pio2+0x1cc>
 80099dc:	f1ba 0f01 	cmp.w	sl, #1
 80099e0:	f000 80c0 	beq.w	8009b64 <__kernel_rem_pio2+0x344>
 80099e4:	f1ba 0f02 	cmp.w	sl, #2
 80099e8:	f000 80c6 	beq.w	8009b78 <__kernel_rem_pio2+0x358>
 80099ec:	f1bb 0f02 	cmp.w	fp, #2
 80099f0:	d14d      	bne.n	8009a8e <__kernel_rem_pio2+0x26e>
 80099f2:	4632      	mov	r2, r6
 80099f4:	463b      	mov	r3, r7
 80099f6:	4956      	ldr	r1, [pc, #344]	; (8009b50 <__kernel_rem_pio2+0x330>)
 80099f8:	2000      	movs	r0, #0
 80099fa:	f7f6 fc45 	bl	8000288 <__aeabi_dsub>
 80099fe:	4606      	mov	r6, r0
 8009a00:	460f      	mov	r7, r1
 8009a02:	2d00      	cmp	r5, #0
 8009a04:	d043      	beq.n	8009a8e <__kernel_rem_pio2+0x26e>
 8009a06:	4650      	mov	r0, sl
 8009a08:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009b40 <__kernel_rem_pio2+0x320>
 8009a0c:	f000 fbdc 	bl	800a1c8 <scalbn>
 8009a10:	4630      	mov	r0, r6
 8009a12:	4639      	mov	r1, r7
 8009a14:	ec53 2b10 	vmov	r2, r3, d0
 8009a18:	f7f6 fc36 	bl	8000288 <__aeabi_dsub>
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	460f      	mov	r7, r1
 8009a20:	e035      	b.n	8009a8e <__kernel_rem_pio2+0x26e>
 8009a22:	4b4c      	ldr	r3, [pc, #304]	; (8009b54 <__kernel_rem_pio2+0x334>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	4630      	mov	r0, r6
 8009a28:	4639      	mov	r1, r7
 8009a2a:	f7f6 fde5 	bl	80005f8 <__aeabi_dmul>
 8009a2e:	f7f7 f893 	bl	8000b58 <__aeabi_d2iz>
 8009a32:	f7f6 fd77 	bl	8000524 <__aeabi_i2d>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	ec43 2b18 	vmov	d8, r2, r3
 8009a3e:	4b46      	ldr	r3, [pc, #280]	; (8009b58 <__kernel_rem_pio2+0x338>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	f7f6 fdd9 	bl	80005f8 <__aeabi_dmul>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	4639      	mov	r1, r7
 8009a4e:	f7f6 fc1b 	bl	8000288 <__aeabi_dsub>
 8009a52:	f7f7 f881 	bl	8000b58 <__aeabi_d2iz>
 8009a56:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a5a:	f84b 0b04 	str.w	r0, [fp], #4
 8009a5e:	ec51 0b18 	vmov	r0, r1, d8
 8009a62:	f7f6 fc13 	bl	800028c <__adddf3>
 8009a66:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	460f      	mov	r7, r1
 8009a6e:	e75b      	b.n	8009928 <__kernel_rem_pio2+0x108>
 8009a70:	d106      	bne.n	8009a80 <__kernel_rem_pio2+0x260>
 8009a72:	1e63      	subs	r3, r4, #1
 8009a74:	aa0e      	add	r2, sp, #56	; 0x38
 8009a76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009a7a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009a7e:	e79d      	b.n	80099bc <__kernel_rem_pio2+0x19c>
 8009a80:	4b36      	ldr	r3, [pc, #216]	; (8009b5c <__kernel_rem_pio2+0x33c>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	f7f7 f83e 	bl	8000b04 <__aeabi_dcmpge>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d13d      	bne.n	8009b08 <__kernel_rem_pio2+0x2e8>
 8009a8c:	4683      	mov	fp, r0
 8009a8e:	2200      	movs	r2, #0
 8009a90:	2300      	movs	r3, #0
 8009a92:	4630      	mov	r0, r6
 8009a94:	4639      	mov	r1, r7
 8009a96:	f7f7 f817 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	f000 80c0 	beq.w	8009c20 <__kernel_rem_pio2+0x400>
 8009aa0:	1e65      	subs	r5, r4, #1
 8009aa2:	462b      	mov	r3, r5
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	9902      	ldr	r1, [sp, #8]
 8009aa8:	428b      	cmp	r3, r1
 8009aaa:	da6c      	bge.n	8009b86 <__kernel_rem_pio2+0x366>
 8009aac:	2a00      	cmp	r2, #0
 8009aae:	f000 8089 	beq.w	8009bc4 <__kernel_rem_pio2+0x3a4>
 8009ab2:	ab0e      	add	r3, sp, #56	; 0x38
 8009ab4:	f1aa 0a18 	sub.w	sl, sl, #24
 8009ab8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 80ad 	beq.w	8009c1c <__kernel_rem_pio2+0x3fc>
 8009ac2:	4650      	mov	r0, sl
 8009ac4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009b40 <__kernel_rem_pio2+0x320>
 8009ac8:	f000 fb7e 	bl	800a1c8 <scalbn>
 8009acc:	ab9a      	add	r3, sp, #616	; 0x268
 8009ace:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009ad2:	ec57 6b10 	vmov	r6, r7, d0
 8009ad6:	00ec      	lsls	r4, r5, #3
 8009ad8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8009adc:	46aa      	mov	sl, r5
 8009ade:	f1ba 0f00 	cmp.w	sl, #0
 8009ae2:	f280 80d6 	bge.w	8009c92 <__kernel_rem_pio2+0x472>
 8009ae6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009b38 <__kernel_rem_pio2+0x318>
 8009aea:	462e      	mov	r6, r5
 8009aec:	2e00      	cmp	r6, #0
 8009aee:	f2c0 8104 	blt.w	8009cfa <__kernel_rem_pio2+0x4da>
 8009af2:	ab72      	add	r3, sp, #456	; 0x1c8
 8009af4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009af8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009b60 <__kernel_rem_pio2+0x340>
 8009afc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009b00:	f04f 0800 	mov.w	r8, #0
 8009b04:	1baf      	subs	r7, r5, r6
 8009b06:	e0ea      	b.n	8009cde <__kernel_rem_pio2+0x4be>
 8009b08:	f04f 0b02 	mov.w	fp, #2
 8009b0c:	e759      	b.n	80099c2 <__kernel_rem_pio2+0x1a2>
 8009b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009b12:	b955      	cbnz	r5, 8009b2a <__kernel_rem_pio2+0x30a>
 8009b14:	b123      	cbz	r3, 8009b20 <__kernel_rem_pio2+0x300>
 8009b16:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009b1a:	f8c8 3000 	str.w	r3, [r8]
 8009b1e:	2301      	movs	r3, #1
 8009b20:	3201      	adds	r2, #1
 8009b22:	f108 0804 	add.w	r8, r8, #4
 8009b26:	461d      	mov	r5, r3
 8009b28:	e752      	b.n	80099d0 <__kernel_rem_pio2+0x1b0>
 8009b2a:	1acb      	subs	r3, r1, r3
 8009b2c:	f8c8 3000 	str.w	r3, [r8]
 8009b30:	462b      	mov	r3, r5
 8009b32:	e7f5      	b.n	8009b20 <__kernel_rem_pio2+0x300>
 8009b34:	f3af 8000 	nop.w
	...
 8009b44:	3ff00000 	.word	0x3ff00000
 8009b48:	0800bed8 	.word	0x0800bed8
 8009b4c:	40200000 	.word	0x40200000
 8009b50:	3ff00000 	.word	0x3ff00000
 8009b54:	3e700000 	.word	0x3e700000
 8009b58:	41700000 	.word	0x41700000
 8009b5c:	3fe00000 	.word	0x3fe00000
 8009b60:	0800be98 	.word	0x0800be98
 8009b64:	1e62      	subs	r2, r4, #1
 8009b66:	ab0e      	add	r3, sp, #56	; 0x38
 8009b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009b70:	a90e      	add	r1, sp, #56	; 0x38
 8009b72:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009b76:	e739      	b.n	80099ec <__kernel_rem_pio2+0x1cc>
 8009b78:	1e62      	subs	r2, r4, #1
 8009b7a:	ab0e      	add	r3, sp, #56	; 0x38
 8009b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009b84:	e7f4      	b.n	8009b70 <__kernel_rem_pio2+0x350>
 8009b86:	a90e      	add	r1, sp, #56	; 0x38
 8009b88:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	430a      	orrs	r2, r1
 8009b90:	e789      	b.n	8009aa6 <__kernel_rem_pio2+0x286>
 8009b92:	3301      	adds	r3, #1
 8009b94:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009b98:	2900      	cmp	r1, #0
 8009b9a:	d0fa      	beq.n	8009b92 <__kernel_rem_pio2+0x372>
 8009b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b9e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8009ba2:	446a      	add	r2, sp
 8009ba4:	3a98      	subs	r2, #152	; 0x98
 8009ba6:	920a      	str	r2, [sp, #40]	; 0x28
 8009ba8:	9a08      	ldr	r2, [sp, #32]
 8009baa:	18e3      	adds	r3, r4, r3
 8009bac:	18a5      	adds	r5, r4, r2
 8009bae:	aa22      	add	r2, sp, #136	; 0x88
 8009bb0:	f104 0801 	add.w	r8, r4, #1
 8009bb4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009bb8:	9304      	str	r3, [sp, #16]
 8009bba:	9b04      	ldr	r3, [sp, #16]
 8009bbc:	4543      	cmp	r3, r8
 8009bbe:	da04      	bge.n	8009bca <__kernel_rem_pio2+0x3aa>
 8009bc0:	461c      	mov	r4, r3
 8009bc2:	e6a3      	b.n	800990c <__kernel_rem_pio2+0xec>
 8009bc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e7e4      	b.n	8009b94 <__kernel_rem_pio2+0x374>
 8009bca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bcc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009bd0:	f7f6 fca8 	bl	8000524 <__aeabi_i2d>
 8009bd4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bda:	46ab      	mov	fp, r5
 8009bdc:	461c      	mov	r4, r3
 8009bde:	f04f 0900 	mov.w	r9, #0
 8009be2:	2600      	movs	r6, #0
 8009be4:	2700      	movs	r7, #0
 8009be6:	9b06      	ldr	r3, [sp, #24]
 8009be8:	4599      	cmp	r9, r3
 8009bea:	dd06      	ble.n	8009bfa <__kernel_rem_pio2+0x3da>
 8009bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bee:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009bf2:	f108 0801 	add.w	r8, r8, #1
 8009bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8009bf8:	e7df      	b.n	8009bba <__kernel_rem_pio2+0x39a>
 8009bfa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009bfe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009c02:	f7f6 fcf9 	bl	80005f8 <__aeabi_dmul>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	4639      	mov	r1, r7
 8009c0e:	f7f6 fb3d 	bl	800028c <__adddf3>
 8009c12:	f109 0901 	add.w	r9, r9, #1
 8009c16:	4606      	mov	r6, r0
 8009c18:	460f      	mov	r7, r1
 8009c1a:	e7e4      	b.n	8009be6 <__kernel_rem_pio2+0x3c6>
 8009c1c:	3d01      	subs	r5, #1
 8009c1e:	e748      	b.n	8009ab2 <__kernel_rem_pio2+0x292>
 8009c20:	ec47 6b10 	vmov	d0, r6, r7
 8009c24:	f1ca 0000 	rsb	r0, sl, #0
 8009c28:	f000 face 	bl	800a1c8 <scalbn>
 8009c2c:	ec57 6b10 	vmov	r6, r7, d0
 8009c30:	4ba0      	ldr	r3, [pc, #640]	; (8009eb4 <__kernel_rem_pio2+0x694>)
 8009c32:	ee10 0a10 	vmov	r0, s0
 8009c36:	2200      	movs	r2, #0
 8009c38:	4639      	mov	r1, r7
 8009c3a:	f7f6 ff63 	bl	8000b04 <__aeabi_dcmpge>
 8009c3e:	b1f8      	cbz	r0, 8009c80 <__kernel_rem_pio2+0x460>
 8009c40:	4b9d      	ldr	r3, [pc, #628]	; (8009eb8 <__kernel_rem_pio2+0x698>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	4630      	mov	r0, r6
 8009c46:	4639      	mov	r1, r7
 8009c48:	f7f6 fcd6 	bl	80005f8 <__aeabi_dmul>
 8009c4c:	f7f6 ff84 	bl	8000b58 <__aeabi_d2iz>
 8009c50:	4680      	mov	r8, r0
 8009c52:	f7f6 fc67 	bl	8000524 <__aeabi_i2d>
 8009c56:	4b97      	ldr	r3, [pc, #604]	; (8009eb4 <__kernel_rem_pio2+0x694>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f7f6 fccd 	bl	80005f8 <__aeabi_dmul>
 8009c5e:	460b      	mov	r3, r1
 8009c60:	4602      	mov	r2, r0
 8009c62:	4639      	mov	r1, r7
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7f6 fb0f 	bl	8000288 <__aeabi_dsub>
 8009c6a:	f7f6 ff75 	bl	8000b58 <__aeabi_d2iz>
 8009c6e:	1c65      	adds	r5, r4, #1
 8009c70:	ab0e      	add	r3, sp, #56	; 0x38
 8009c72:	f10a 0a18 	add.w	sl, sl, #24
 8009c76:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009c7a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009c7e:	e720      	b.n	8009ac2 <__kernel_rem_pio2+0x2a2>
 8009c80:	4630      	mov	r0, r6
 8009c82:	4639      	mov	r1, r7
 8009c84:	f7f6 ff68 	bl	8000b58 <__aeabi_d2iz>
 8009c88:	ab0e      	add	r3, sp, #56	; 0x38
 8009c8a:	4625      	mov	r5, r4
 8009c8c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009c90:	e717      	b.n	8009ac2 <__kernel_rem_pio2+0x2a2>
 8009c92:	ab0e      	add	r3, sp, #56	; 0x38
 8009c94:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009c98:	f7f6 fc44 	bl	8000524 <__aeabi_i2d>
 8009c9c:	4632      	mov	r2, r6
 8009c9e:	463b      	mov	r3, r7
 8009ca0:	f7f6 fcaa 	bl	80005f8 <__aeabi_dmul>
 8009ca4:	4b84      	ldr	r3, [pc, #528]	; (8009eb8 <__kernel_rem_pio2+0x698>)
 8009ca6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009caa:	2200      	movs	r2, #0
 8009cac:	4630      	mov	r0, r6
 8009cae:	4639      	mov	r1, r7
 8009cb0:	f7f6 fca2 	bl	80005f8 <__aeabi_dmul>
 8009cb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cb8:	4606      	mov	r6, r0
 8009cba:	460f      	mov	r7, r1
 8009cbc:	e70f      	b.n	8009ade <__kernel_rem_pio2+0x2be>
 8009cbe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009cc2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009cc6:	f7f6 fc97 	bl	80005f8 <__aeabi_dmul>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cd2:	f7f6 fadb 	bl	800028c <__adddf3>
 8009cd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009cda:	f108 0801 	add.w	r8, r8, #1
 8009cde:	9b02      	ldr	r3, [sp, #8]
 8009ce0:	4598      	cmp	r8, r3
 8009ce2:	dc01      	bgt.n	8009ce8 <__kernel_rem_pio2+0x4c8>
 8009ce4:	45b8      	cmp	r8, r7
 8009ce6:	ddea      	ble.n	8009cbe <__kernel_rem_pio2+0x49e>
 8009ce8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009cec:	ab4a      	add	r3, sp, #296	; 0x128
 8009cee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009cf2:	ed87 7b00 	vstr	d7, [r7]
 8009cf6:	3e01      	subs	r6, #1
 8009cf8:	e6f8      	b.n	8009aec <__kernel_rem_pio2+0x2cc>
 8009cfa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	dc0b      	bgt.n	8009d18 <__kernel_rem_pio2+0x4f8>
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	dc35      	bgt.n	8009d70 <__kernel_rem_pio2+0x550>
 8009d04:	d059      	beq.n	8009dba <__kernel_rem_pio2+0x59a>
 8009d06:	9b04      	ldr	r3, [sp, #16]
 8009d08:	f003 0007 	and.w	r0, r3, #7
 8009d0c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009d10:	ecbd 8b02 	vpop	{d8}
 8009d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d18:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d1f3      	bne.n	8009d06 <__kernel_rem_pio2+0x4e6>
 8009d1e:	ab4a      	add	r3, sp, #296	; 0x128
 8009d20:	4423      	add	r3, r4
 8009d22:	9306      	str	r3, [sp, #24]
 8009d24:	461c      	mov	r4, r3
 8009d26:	469a      	mov	sl, r3
 8009d28:	9502      	str	r5, [sp, #8]
 8009d2a:	9b02      	ldr	r3, [sp, #8]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f1aa 0a08 	sub.w	sl, sl, #8
 8009d32:	dc6b      	bgt.n	8009e0c <__kernel_rem_pio2+0x5ec>
 8009d34:	46aa      	mov	sl, r5
 8009d36:	f1ba 0f01 	cmp.w	sl, #1
 8009d3a:	f1a4 0408 	sub.w	r4, r4, #8
 8009d3e:	f300 8085 	bgt.w	8009e4c <__kernel_rem_pio2+0x62c>
 8009d42:	9c06      	ldr	r4, [sp, #24]
 8009d44:	2000      	movs	r0, #0
 8009d46:	3408      	adds	r4, #8
 8009d48:	2100      	movs	r1, #0
 8009d4a:	2d01      	cmp	r5, #1
 8009d4c:	f300 809d 	bgt.w	8009e8a <__kernel_rem_pio2+0x66a>
 8009d50:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009d54:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009d58:	f1bb 0f00 	cmp.w	fp, #0
 8009d5c:	f040 809b 	bne.w	8009e96 <__kernel_rem_pio2+0x676>
 8009d60:	9b01      	ldr	r3, [sp, #4]
 8009d62:	e9c3 5600 	strd	r5, r6, [r3]
 8009d66:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009d6a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009d6e:	e7ca      	b.n	8009d06 <__kernel_rem_pio2+0x4e6>
 8009d70:	3408      	adds	r4, #8
 8009d72:	ab4a      	add	r3, sp, #296	; 0x128
 8009d74:	441c      	add	r4, r3
 8009d76:	462e      	mov	r6, r5
 8009d78:	2000      	movs	r0, #0
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	2e00      	cmp	r6, #0
 8009d7e:	da36      	bge.n	8009dee <__kernel_rem_pio2+0x5ce>
 8009d80:	f1bb 0f00 	cmp.w	fp, #0
 8009d84:	d039      	beq.n	8009dfa <__kernel_rem_pio2+0x5da>
 8009d86:	4602      	mov	r2, r0
 8009d88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d8c:	9c01      	ldr	r4, [sp, #4]
 8009d8e:	e9c4 2300 	strd	r2, r3, [r4]
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009d9a:	f7f6 fa75 	bl	8000288 <__aeabi_dsub>
 8009d9e:	ae4c      	add	r6, sp, #304	; 0x130
 8009da0:	2401      	movs	r4, #1
 8009da2:	42a5      	cmp	r5, r4
 8009da4:	da2c      	bge.n	8009e00 <__kernel_rem_pio2+0x5e0>
 8009da6:	f1bb 0f00 	cmp.w	fp, #0
 8009daa:	d002      	beq.n	8009db2 <__kernel_rem_pio2+0x592>
 8009dac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009db0:	4619      	mov	r1, r3
 8009db2:	9b01      	ldr	r3, [sp, #4]
 8009db4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009db8:	e7a5      	b.n	8009d06 <__kernel_rem_pio2+0x4e6>
 8009dba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009dbe:	eb0d 0403 	add.w	r4, sp, r3
 8009dc2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	2100      	movs	r1, #0
 8009dca:	2d00      	cmp	r5, #0
 8009dcc:	da09      	bge.n	8009de2 <__kernel_rem_pio2+0x5c2>
 8009dce:	f1bb 0f00 	cmp.w	fp, #0
 8009dd2:	d002      	beq.n	8009dda <__kernel_rem_pio2+0x5ba>
 8009dd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dd8:	4619      	mov	r1, r3
 8009dda:	9b01      	ldr	r3, [sp, #4]
 8009ddc:	e9c3 0100 	strd	r0, r1, [r3]
 8009de0:	e791      	b.n	8009d06 <__kernel_rem_pio2+0x4e6>
 8009de2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009de6:	f7f6 fa51 	bl	800028c <__adddf3>
 8009dea:	3d01      	subs	r5, #1
 8009dec:	e7ed      	b.n	8009dca <__kernel_rem_pio2+0x5aa>
 8009dee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009df2:	f7f6 fa4b 	bl	800028c <__adddf3>
 8009df6:	3e01      	subs	r6, #1
 8009df8:	e7c0      	b.n	8009d7c <__kernel_rem_pio2+0x55c>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	e7c5      	b.n	8009d8c <__kernel_rem_pio2+0x56c>
 8009e00:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009e04:	f7f6 fa42 	bl	800028c <__adddf3>
 8009e08:	3401      	adds	r4, #1
 8009e0a:	e7ca      	b.n	8009da2 <__kernel_rem_pio2+0x582>
 8009e0c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e10:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009e14:	9b02      	ldr	r3, [sp, #8]
 8009e16:	3b01      	subs	r3, #1
 8009e18:	9302      	str	r3, [sp, #8]
 8009e1a:	4632      	mov	r2, r6
 8009e1c:	463b      	mov	r3, r7
 8009e1e:	4640      	mov	r0, r8
 8009e20:	4649      	mov	r1, r9
 8009e22:	f7f6 fa33 	bl	800028c <__adddf3>
 8009e26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4640      	mov	r0, r8
 8009e30:	4649      	mov	r1, r9
 8009e32:	f7f6 fa29 	bl	8000288 <__aeabi_dsub>
 8009e36:	4632      	mov	r2, r6
 8009e38:	463b      	mov	r3, r7
 8009e3a:	f7f6 fa27 	bl	800028c <__adddf3>
 8009e3e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009e42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009e46:	ed8a 7b00 	vstr	d7, [sl]
 8009e4a:	e76e      	b.n	8009d2a <__kernel_rem_pio2+0x50a>
 8009e4c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009e50:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009e54:	4640      	mov	r0, r8
 8009e56:	4632      	mov	r2, r6
 8009e58:	463b      	mov	r3, r7
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	f7f6 fa16 	bl	800028c <__adddf3>
 8009e60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4640      	mov	r0, r8
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	f7f6 fa0c 	bl	8000288 <__aeabi_dsub>
 8009e70:	4632      	mov	r2, r6
 8009e72:	463b      	mov	r3, r7
 8009e74:	f7f6 fa0a 	bl	800028c <__adddf3>
 8009e78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009e80:	ed84 7b00 	vstr	d7, [r4]
 8009e84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e88:	e755      	b.n	8009d36 <__kernel_rem_pio2+0x516>
 8009e8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009e8e:	f7f6 f9fd 	bl	800028c <__adddf3>
 8009e92:	3d01      	subs	r5, #1
 8009e94:	e759      	b.n	8009d4a <__kernel_rem_pio2+0x52a>
 8009e96:	9b01      	ldr	r3, [sp, #4]
 8009e98:	9a01      	ldr	r2, [sp, #4]
 8009e9a:	601d      	str	r5, [r3, #0]
 8009e9c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009ea0:	605c      	str	r4, [r3, #4]
 8009ea2:	609f      	str	r7, [r3, #8]
 8009ea4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009ea8:	60d3      	str	r3, [r2, #12]
 8009eaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009eae:	6110      	str	r0, [r2, #16]
 8009eb0:	6153      	str	r3, [r2, #20]
 8009eb2:	e728      	b.n	8009d06 <__kernel_rem_pio2+0x4e6>
 8009eb4:	41700000 	.word	0x41700000
 8009eb8:	3e700000 	.word	0x3e700000
 8009ebc:	00000000 	.word	0x00000000

08009ec0 <__kernel_sin>:
 8009ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec4:	ed2d 8b04 	vpush	{d8-d9}
 8009ec8:	eeb0 8a41 	vmov.f32	s16, s2
 8009ecc:	eef0 8a61 	vmov.f32	s17, s3
 8009ed0:	ec55 4b10 	vmov	r4, r5, d0
 8009ed4:	b083      	sub	sp, #12
 8009ed6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009eda:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009ede:	9001      	str	r0, [sp, #4]
 8009ee0:	da06      	bge.n	8009ef0 <__kernel_sin+0x30>
 8009ee2:	ee10 0a10 	vmov	r0, s0
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	f7f6 fe36 	bl	8000b58 <__aeabi_d2iz>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d051      	beq.n	8009f94 <__kernel_sin+0xd4>
 8009ef0:	4622      	mov	r2, r4
 8009ef2:	462b      	mov	r3, r5
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	f7f6 fb7e 	bl	80005f8 <__aeabi_dmul>
 8009efc:	4682      	mov	sl, r0
 8009efe:	468b      	mov	fp, r1
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4620      	mov	r0, r4
 8009f06:	4629      	mov	r1, r5
 8009f08:	f7f6 fb76 	bl	80005f8 <__aeabi_dmul>
 8009f0c:	a341      	add	r3, pc, #260	; (adr r3, 800a014 <__kernel_sin+0x154>)
 8009f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f12:	4680      	mov	r8, r0
 8009f14:	4689      	mov	r9, r1
 8009f16:	4650      	mov	r0, sl
 8009f18:	4659      	mov	r1, fp
 8009f1a:	f7f6 fb6d 	bl	80005f8 <__aeabi_dmul>
 8009f1e:	a33f      	add	r3, pc, #252	; (adr r3, 800a01c <__kernel_sin+0x15c>)
 8009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f24:	f7f6 f9b0 	bl	8000288 <__aeabi_dsub>
 8009f28:	4652      	mov	r2, sl
 8009f2a:	465b      	mov	r3, fp
 8009f2c:	f7f6 fb64 	bl	80005f8 <__aeabi_dmul>
 8009f30:	a33c      	add	r3, pc, #240	; (adr r3, 800a024 <__kernel_sin+0x164>)
 8009f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f36:	f7f6 f9a9 	bl	800028c <__adddf3>
 8009f3a:	4652      	mov	r2, sl
 8009f3c:	465b      	mov	r3, fp
 8009f3e:	f7f6 fb5b 	bl	80005f8 <__aeabi_dmul>
 8009f42:	a33a      	add	r3, pc, #232	; (adr r3, 800a02c <__kernel_sin+0x16c>)
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	f7f6 f99e 	bl	8000288 <__aeabi_dsub>
 8009f4c:	4652      	mov	r2, sl
 8009f4e:	465b      	mov	r3, fp
 8009f50:	f7f6 fb52 	bl	80005f8 <__aeabi_dmul>
 8009f54:	a337      	add	r3, pc, #220	; (adr r3, 800a034 <__kernel_sin+0x174>)
 8009f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5a:	f7f6 f997 	bl	800028c <__adddf3>
 8009f5e:	9b01      	ldr	r3, [sp, #4]
 8009f60:	4606      	mov	r6, r0
 8009f62:	460f      	mov	r7, r1
 8009f64:	b9eb      	cbnz	r3, 8009fa2 <__kernel_sin+0xe2>
 8009f66:	4602      	mov	r2, r0
 8009f68:	460b      	mov	r3, r1
 8009f6a:	4650      	mov	r0, sl
 8009f6c:	4659      	mov	r1, fp
 8009f6e:	f7f6 fb43 	bl	80005f8 <__aeabi_dmul>
 8009f72:	a325      	add	r3, pc, #148	; (adr r3, 800a008 <__kernel_sin+0x148>)
 8009f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f78:	f7f6 f986 	bl	8000288 <__aeabi_dsub>
 8009f7c:	4642      	mov	r2, r8
 8009f7e:	464b      	mov	r3, r9
 8009f80:	f7f6 fb3a 	bl	80005f8 <__aeabi_dmul>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	4620      	mov	r0, r4
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	f7f6 f97e 	bl	800028c <__adddf3>
 8009f90:	4604      	mov	r4, r0
 8009f92:	460d      	mov	r5, r1
 8009f94:	ec45 4b10 	vmov	d0, r4, r5
 8009f98:	b003      	add	sp, #12
 8009f9a:	ecbd 8b04 	vpop	{d8-d9}
 8009f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa2:	4b1b      	ldr	r3, [pc, #108]	; (800a010 <__kernel_sin+0x150>)
 8009fa4:	ec51 0b18 	vmov	r0, r1, d8
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f7f6 fb25 	bl	80005f8 <__aeabi_dmul>
 8009fae:	4632      	mov	r2, r6
 8009fb0:	ec41 0b19 	vmov	d9, r0, r1
 8009fb4:	463b      	mov	r3, r7
 8009fb6:	4640      	mov	r0, r8
 8009fb8:	4649      	mov	r1, r9
 8009fba:	f7f6 fb1d 	bl	80005f8 <__aeabi_dmul>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	ec51 0b19 	vmov	r0, r1, d9
 8009fc6:	f7f6 f95f 	bl	8000288 <__aeabi_dsub>
 8009fca:	4652      	mov	r2, sl
 8009fcc:	465b      	mov	r3, fp
 8009fce:	f7f6 fb13 	bl	80005f8 <__aeabi_dmul>
 8009fd2:	ec53 2b18 	vmov	r2, r3, d8
 8009fd6:	f7f6 f957 	bl	8000288 <__aeabi_dsub>
 8009fda:	a30b      	add	r3, pc, #44	; (adr r3, 800a008 <__kernel_sin+0x148>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	460f      	mov	r7, r1
 8009fe4:	4640      	mov	r0, r8
 8009fe6:	4649      	mov	r1, r9
 8009fe8:	f7f6 fb06 	bl	80005f8 <__aeabi_dmul>
 8009fec:	4602      	mov	r2, r0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	f7f6 f94a 	bl	800028c <__adddf3>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	4629      	mov	r1, r5
 800a000:	f7f6 f942 	bl	8000288 <__aeabi_dsub>
 800a004:	e7c4      	b.n	8009f90 <__kernel_sin+0xd0>
 800a006:	bf00      	nop
 800a008:	55555549 	.word	0x55555549
 800a00c:	3fc55555 	.word	0x3fc55555
 800a010:	3fe00000 	.word	0x3fe00000
 800a014:	5acfd57c 	.word	0x5acfd57c
 800a018:	3de5d93a 	.word	0x3de5d93a
 800a01c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a020:	3e5ae5e6 	.word	0x3e5ae5e6
 800a024:	57b1fe7d 	.word	0x57b1fe7d
 800a028:	3ec71de3 	.word	0x3ec71de3
 800a02c:	19c161d5 	.word	0x19c161d5
 800a030:	3f2a01a0 	.word	0x3f2a01a0
 800a034:	1110f8a6 	.word	0x1110f8a6
 800a038:	3f811111 	.word	0x3f811111

0800a03c <with_errno>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	4604      	mov	r4, r0
 800a040:	460d      	mov	r5, r1
 800a042:	4616      	mov	r6, r2
 800a044:	f7fb faca 	bl	80055dc <__errno>
 800a048:	4629      	mov	r1, r5
 800a04a:	6006      	str	r6, [r0, #0]
 800a04c:	4620      	mov	r0, r4
 800a04e:	bd70      	pop	{r4, r5, r6, pc}

0800a050 <xflow>:
 800a050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a052:	4614      	mov	r4, r2
 800a054:	461d      	mov	r5, r3
 800a056:	b108      	cbz	r0, 800a05c <xflow+0xc>
 800a058:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a05c:	e9cd 2300 	strd	r2, r3, [sp]
 800a060:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a064:	4620      	mov	r0, r4
 800a066:	4629      	mov	r1, r5
 800a068:	f7f6 fac6 	bl	80005f8 <__aeabi_dmul>
 800a06c:	2222      	movs	r2, #34	; 0x22
 800a06e:	b003      	add	sp, #12
 800a070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a074:	f7ff bfe2 	b.w	800a03c <with_errno>

0800a078 <__math_uflow>:
 800a078:	b508      	push	{r3, lr}
 800a07a:	2200      	movs	r2, #0
 800a07c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a080:	f7ff ffe6 	bl	800a050 <xflow>
 800a084:	ec41 0b10 	vmov	d0, r0, r1
 800a088:	bd08      	pop	{r3, pc}

0800a08a <__math_oflow>:
 800a08a:	b508      	push	{r3, lr}
 800a08c:	2200      	movs	r2, #0
 800a08e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a092:	f7ff ffdd 	bl	800a050 <xflow>
 800a096:	ec41 0b10 	vmov	d0, r0, r1
 800a09a:	bd08      	pop	{r3, pc}

0800a09c <fabs>:
 800a09c:	ec51 0b10 	vmov	r0, r1, d0
 800a0a0:	ee10 2a10 	vmov	r2, s0
 800a0a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0a8:	ec43 2b10 	vmov	d0, r2, r3
 800a0ac:	4770      	bx	lr

0800a0ae <finite>:
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	ed8d 0b00 	vstr	d0, [sp]
 800a0b4:	9801      	ldr	r0, [sp, #4]
 800a0b6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a0ba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a0be:	0fc0      	lsrs	r0, r0, #31
 800a0c0:	b002      	add	sp, #8
 800a0c2:	4770      	bx	lr
 800a0c4:	0000      	movs	r0, r0
	...

0800a0c8 <floor>:
 800a0c8:	ec51 0b10 	vmov	r0, r1, d0
 800a0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a0d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a0d8:	2e13      	cmp	r6, #19
 800a0da:	ee10 5a10 	vmov	r5, s0
 800a0de:	ee10 8a10 	vmov	r8, s0
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	dc32      	bgt.n	800a14c <floor+0x84>
 800a0e6:	2e00      	cmp	r6, #0
 800a0e8:	da14      	bge.n	800a114 <floor+0x4c>
 800a0ea:	a333      	add	r3, pc, #204	; (adr r3, 800a1b8 <floor+0xf0>)
 800a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f0:	f7f6 f8cc 	bl	800028c <__adddf3>
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	f7f6 fd0e 	bl	8000b18 <__aeabi_dcmpgt>
 800a0fc:	b138      	cbz	r0, 800a10e <floor+0x46>
 800a0fe:	2c00      	cmp	r4, #0
 800a100:	da57      	bge.n	800a1b2 <floor+0xea>
 800a102:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a106:	431d      	orrs	r5, r3
 800a108:	d001      	beq.n	800a10e <floor+0x46>
 800a10a:	4c2d      	ldr	r4, [pc, #180]	; (800a1c0 <floor+0xf8>)
 800a10c:	2500      	movs	r5, #0
 800a10e:	4621      	mov	r1, r4
 800a110:	4628      	mov	r0, r5
 800a112:	e025      	b.n	800a160 <floor+0x98>
 800a114:	4f2b      	ldr	r7, [pc, #172]	; (800a1c4 <floor+0xfc>)
 800a116:	4137      	asrs	r7, r6
 800a118:	ea01 0307 	and.w	r3, r1, r7
 800a11c:	4303      	orrs	r3, r0
 800a11e:	d01f      	beq.n	800a160 <floor+0x98>
 800a120:	a325      	add	r3, pc, #148	; (adr r3, 800a1b8 <floor+0xf0>)
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	f7f6 f8b1 	bl	800028c <__adddf3>
 800a12a:	2200      	movs	r2, #0
 800a12c:	2300      	movs	r3, #0
 800a12e:	f7f6 fcf3 	bl	8000b18 <__aeabi_dcmpgt>
 800a132:	2800      	cmp	r0, #0
 800a134:	d0eb      	beq.n	800a10e <floor+0x46>
 800a136:	2c00      	cmp	r4, #0
 800a138:	bfbe      	ittt	lt
 800a13a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a13e:	fa43 f606 	asrlt.w	r6, r3, r6
 800a142:	19a4      	addlt	r4, r4, r6
 800a144:	ea24 0407 	bic.w	r4, r4, r7
 800a148:	2500      	movs	r5, #0
 800a14a:	e7e0      	b.n	800a10e <floor+0x46>
 800a14c:	2e33      	cmp	r6, #51	; 0x33
 800a14e:	dd0b      	ble.n	800a168 <floor+0xa0>
 800a150:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a154:	d104      	bne.n	800a160 <floor+0x98>
 800a156:	ee10 2a10 	vmov	r2, s0
 800a15a:	460b      	mov	r3, r1
 800a15c:	f7f6 f896 	bl	800028c <__adddf3>
 800a160:	ec41 0b10 	vmov	d0, r0, r1
 800a164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a168:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a16c:	f04f 33ff 	mov.w	r3, #4294967295
 800a170:	fa23 f707 	lsr.w	r7, r3, r7
 800a174:	4207      	tst	r7, r0
 800a176:	d0f3      	beq.n	800a160 <floor+0x98>
 800a178:	a30f      	add	r3, pc, #60	; (adr r3, 800a1b8 <floor+0xf0>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f6 f885 	bl	800028c <__adddf3>
 800a182:	2200      	movs	r2, #0
 800a184:	2300      	movs	r3, #0
 800a186:	f7f6 fcc7 	bl	8000b18 <__aeabi_dcmpgt>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d0bf      	beq.n	800a10e <floor+0x46>
 800a18e:	2c00      	cmp	r4, #0
 800a190:	da02      	bge.n	800a198 <floor+0xd0>
 800a192:	2e14      	cmp	r6, #20
 800a194:	d103      	bne.n	800a19e <floor+0xd6>
 800a196:	3401      	adds	r4, #1
 800a198:	ea25 0507 	bic.w	r5, r5, r7
 800a19c:	e7b7      	b.n	800a10e <floor+0x46>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a1a4:	fa03 f606 	lsl.w	r6, r3, r6
 800a1a8:	4435      	add	r5, r6
 800a1aa:	4545      	cmp	r5, r8
 800a1ac:	bf38      	it	cc
 800a1ae:	18e4      	addcc	r4, r4, r3
 800a1b0:	e7f2      	b.n	800a198 <floor+0xd0>
 800a1b2:	2500      	movs	r5, #0
 800a1b4:	462c      	mov	r4, r5
 800a1b6:	e7aa      	b.n	800a10e <floor+0x46>
 800a1b8:	8800759c 	.word	0x8800759c
 800a1bc:	7e37e43c 	.word	0x7e37e43c
 800a1c0:	bff00000 	.word	0xbff00000
 800a1c4:	000fffff 	.word	0x000fffff

0800a1c8 <scalbn>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	ec55 4b10 	vmov	r4, r5, d0
 800a1ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a1d2:	4606      	mov	r6, r0
 800a1d4:	462b      	mov	r3, r5
 800a1d6:	b99a      	cbnz	r2, 800a200 <scalbn+0x38>
 800a1d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a1dc:	4323      	orrs	r3, r4
 800a1de:	d036      	beq.n	800a24e <scalbn+0x86>
 800a1e0:	4b39      	ldr	r3, [pc, #228]	; (800a2c8 <scalbn+0x100>)
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	ee10 0a10 	vmov	r0, s0
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f7f6 fa05 	bl	80005f8 <__aeabi_dmul>
 800a1ee:	4b37      	ldr	r3, [pc, #220]	; (800a2cc <scalbn+0x104>)
 800a1f0:	429e      	cmp	r6, r3
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	460d      	mov	r5, r1
 800a1f6:	da10      	bge.n	800a21a <scalbn+0x52>
 800a1f8:	a32b      	add	r3, pc, #172	; (adr r3, 800a2a8 <scalbn+0xe0>)
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	e03a      	b.n	800a276 <scalbn+0xae>
 800a200:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a204:	428a      	cmp	r2, r1
 800a206:	d10c      	bne.n	800a222 <scalbn+0x5a>
 800a208:	ee10 2a10 	vmov	r2, s0
 800a20c:	4620      	mov	r0, r4
 800a20e:	4629      	mov	r1, r5
 800a210:	f7f6 f83c 	bl	800028c <__adddf3>
 800a214:	4604      	mov	r4, r0
 800a216:	460d      	mov	r5, r1
 800a218:	e019      	b.n	800a24e <scalbn+0x86>
 800a21a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a21e:	460b      	mov	r3, r1
 800a220:	3a36      	subs	r2, #54	; 0x36
 800a222:	4432      	add	r2, r6
 800a224:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a228:	428a      	cmp	r2, r1
 800a22a:	dd08      	ble.n	800a23e <scalbn+0x76>
 800a22c:	2d00      	cmp	r5, #0
 800a22e:	a120      	add	r1, pc, #128	; (adr r1, 800a2b0 <scalbn+0xe8>)
 800a230:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a234:	da1c      	bge.n	800a270 <scalbn+0xa8>
 800a236:	a120      	add	r1, pc, #128	; (adr r1, 800a2b8 <scalbn+0xf0>)
 800a238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a23c:	e018      	b.n	800a270 <scalbn+0xa8>
 800a23e:	2a00      	cmp	r2, #0
 800a240:	dd08      	ble.n	800a254 <scalbn+0x8c>
 800a242:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a246:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a24a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a24e:	ec45 4b10 	vmov	d0, r4, r5
 800a252:	bd70      	pop	{r4, r5, r6, pc}
 800a254:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a258:	da19      	bge.n	800a28e <scalbn+0xc6>
 800a25a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a25e:	429e      	cmp	r6, r3
 800a260:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a264:	dd0a      	ble.n	800a27c <scalbn+0xb4>
 800a266:	a112      	add	r1, pc, #72	; (adr r1, 800a2b0 <scalbn+0xe8>)
 800a268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1e2      	bne.n	800a236 <scalbn+0x6e>
 800a270:	a30f      	add	r3, pc, #60	; (adr r3, 800a2b0 <scalbn+0xe8>)
 800a272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a276:	f7f6 f9bf 	bl	80005f8 <__aeabi_dmul>
 800a27a:	e7cb      	b.n	800a214 <scalbn+0x4c>
 800a27c:	a10a      	add	r1, pc, #40	; (adr r1, 800a2a8 <scalbn+0xe0>)
 800a27e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d0b8      	beq.n	800a1f8 <scalbn+0x30>
 800a286:	a10e      	add	r1, pc, #56	; (adr r1, 800a2c0 <scalbn+0xf8>)
 800a288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a28c:	e7b4      	b.n	800a1f8 <scalbn+0x30>
 800a28e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a292:	3236      	adds	r2, #54	; 0x36
 800a294:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a298:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a29c:	4620      	mov	r0, r4
 800a29e:	4b0c      	ldr	r3, [pc, #48]	; (800a2d0 <scalbn+0x108>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	e7e8      	b.n	800a276 <scalbn+0xae>
 800a2a4:	f3af 8000 	nop.w
 800a2a8:	c2f8f359 	.word	0xc2f8f359
 800a2ac:	01a56e1f 	.word	0x01a56e1f
 800a2b0:	8800759c 	.word	0x8800759c
 800a2b4:	7e37e43c 	.word	0x7e37e43c
 800a2b8:	8800759c 	.word	0x8800759c
 800a2bc:	fe37e43c 	.word	0xfe37e43c
 800a2c0:	c2f8f359 	.word	0xc2f8f359
 800a2c4:	81a56e1f 	.word	0x81a56e1f
 800a2c8:	43500000 	.word	0x43500000
 800a2cc:	ffff3cb0 	.word	0xffff3cb0
 800a2d0:	3c900000 	.word	0x3c900000

0800a2d4 <_init>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	bf00      	nop
 800a2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2da:	bc08      	pop	{r3}
 800a2dc:	469e      	mov	lr, r3
 800a2de:	4770      	bx	lr

0800a2e0 <_fini>:
 800a2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e2:	bf00      	nop
 800a2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2e6:	bc08      	pop	{r3}
 800a2e8:	469e      	mov	lr, r3
 800a2ea:	4770      	bx	lr
